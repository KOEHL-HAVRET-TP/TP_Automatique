
TP_Automatique.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000afcc  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000051c  0800b1b0  0800b1b0  0001b1b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b6cc  0800b6cc  000202f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800b6cc  0800b6cc  0001b6cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b6d4  0800b6d4  000202f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b6d4  0800b6d4  0001b6d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b6d8  0800b6d8  0001b6d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002f8  20000000  0800b6dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000230  200002f8  0800b9d4  000202f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000528  0800b9d4  00020528  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019f59  00000000  00000000  00020328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003125  00000000  00000000  0003a281  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001560  00000000  00000000  0003d3a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001418  00000000  00000000  0003e908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029a5d  00000000  00000000  0003fd20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000191a3  00000000  00000000  0006977d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00113da9  00000000  00000000  00082920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001966c9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006e40  00000000  00000000  0019671c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200002f8 	.word	0x200002f8
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800b194 	.word	0x0800b194

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200002fc 	.word	0x200002fc
 800021c:	0800b194 	.word	0x0800b194

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__gedf2>:
 8000a8c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a90:	e006      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a92:	bf00      	nop

08000a94 <__ledf2>:
 8000a94:	f04f 0c01 	mov.w	ip, #1
 8000a98:	e002      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a9a:	bf00      	nop

08000a9c <__cmpdf2>:
 8000a9c:	f04f 0c01 	mov.w	ip, #1
 8000aa0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ab6:	d01b      	beq.n	8000af0 <__cmpdf2+0x54>
 8000ab8:	b001      	add	sp, #4
 8000aba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000abe:	bf0c      	ite	eq
 8000ac0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ac4:	ea91 0f03 	teqne	r1, r3
 8000ac8:	bf02      	ittt	eq
 8000aca:	ea90 0f02 	teqeq	r0, r2
 8000ace:	2000      	moveq	r0, #0
 8000ad0:	4770      	bxeq	lr
 8000ad2:	f110 0f00 	cmn.w	r0, #0
 8000ad6:	ea91 0f03 	teq	r1, r3
 8000ada:	bf58      	it	pl
 8000adc:	4299      	cmppl	r1, r3
 8000ade:	bf08      	it	eq
 8000ae0:	4290      	cmpeq	r0, r2
 8000ae2:	bf2c      	ite	cs
 8000ae4:	17d8      	asrcs	r0, r3, #31
 8000ae6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aea:	f040 0001 	orr.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__cmpdf2+0x64>
 8000afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afe:	d107      	bne.n	8000b10 <__cmpdf2+0x74>
 8000b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d1d6      	bne.n	8000ab8 <__cmpdf2+0x1c>
 8000b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0e:	d0d3      	beq.n	8000ab8 <__cmpdf2+0x1c>
 8000b10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdrcmple>:
 8000b18:	4684      	mov	ip, r0
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	4662      	mov	r2, ip
 8000b1e:	468c      	mov	ip, r1
 8000b20:	4619      	mov	r1, r3
 8000b22:	4663      	mov	r3, ip
 8000b24:	e000      	b.n	8000b28 <__aeabi_cdcmpeq>
 8000b26:	bf00      	nop

08000b28 <__aeabi_cdcmpeq>:
 8000b28:	b501      	push	{r0, lr}
 8000b2a:	f7ff ffb7 	bl	8000a9c <__cmpdf2>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	bf48      	it	mi
 8000b32:	f110 0f00 	cmnmi.w	r0, #0
 8000b36:	bd01      	pop	{r0, pc}

08000b38 <__aeabi_dcmpeq>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff fff4 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b40:	bf0c      	ite	eq
 8000b42:	2001      	moveq	r0, #1
 8000b44:	2000      	movne	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmplt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffea 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmple>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffe0 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpge>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffce 	bl	8000b18 <__aeabi_cdrcmple>
 8000b7c:	bf94      	ite	ls
 8000b7e:	2001      	movls	r0, #1
 8000b80:	2000      	movhi	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpgt>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff ffc4 	bl	8000b18 <__aeabi_cdrcmple>
 8000b90:	bf34      	ite	cc
 8000b92:	2001      	movcc	r0, #1
 8000b94:	2000      	movcs	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmpun>:
 8000b9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x10>
 8000ba6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000baa:	d10a      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb4:	d102      	bne.n	8000bbc <__aeabi_dcmpun+0x20>
 8000bb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0001 	mov.w	r0, #1
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2iz>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d215      	bcs.n	8000bfe <__aeabi_d2iz+0x36>
 8000bd2:	d511      	bpl.n	8000bf8 <__aeabi_d2iz+0x30>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d912      	bls.n	8000c04 <__aeabi_d2iz+0x3c>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bee:	fa23 f002 	lsr.w	r0, r3, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	4240      	negne	r0, r0
 8000bf6:	4770      	bx	lr
 8000bf8:	f04f 0000 	mov.w	r0, #0
 8000bfc:	4770      	bx	lr
 8000bfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c02:	d105      	bne.n	8000c10 <__aeabi_d2iz+0x48>
 8000c04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	bf08      	it	eq
 8000c0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop

08000c18 <__aeabi_uldivmod>:
 8000c18:	b953      	cbnz	r3, 8000c30 <__aeabi_uldivmod+0x18>
 8000c1a:	b94a      	cbnz	r2, 8000c30 <__aeabi_uldivmod+0x18>
 8000c1c:	2900      	cmp	r1, #0
 8000c1e:	bf08      	it	eq
 8000c20:	2800      	cmpeq	r0, #0
 8000c22:	bf1c      	itt	ne
 8000c24:	f04f 31ff 	movne.w	r1, #4294967295
 8000c28:	f04f 30ff 	movne.w	r0, #4294967295
 8000c2c:	f000 b974 	b.w	8000f18 <__aeabi_idiv0>
 8000c30:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c34:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c38:	f000 f806 	bl	8000c48 <__udivmoddi4>
 8000c3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c44:	b004      	add	sp, #16
 8000c46:	4770      	bx	lr

08000c48 <__udivmoddi4>:
 8000c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c4c:	9d08      	ldr	r5, [sp, #32]
 8000c4e:	4604      	mov	r4, r0
 8000c50:	468e      	mov	lr, r1
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d14d      	bne.n	8000cf2 <__udivmoddi4+0xaa>
 8000c56:	428a      	cmp	r2, r1
 8000c58:	4694      	mov	ip, r2
 8000c5a:	d969      	bls.n	8000d30 <__udivmoddi4+0xe8>
 8000c5c:	fab2 f282 	clz	r2, r2
 8000c60:	b152      	cbz	r2, 8000c78 <__udivmoddi4+0x30>
 8000c62:	fa01 f302 	lsl.w	r3, r1, r2
 8000c66:	f1c2 0120 	rsb	r1, r2, #32
 8000c6a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c6e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c72:	ea41 0e03 	orr.w	lr, r1, r3
 8000c76:	4094      	lsls	r4, r2
 8000c78:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c7c:	0c21      	lsrs	r1, r4, #16
 8000c7e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c82:	fa1f f78c 	uxth.w	r7, ip
 8000c86:	fb08 e316 	mls	r3, r8, r6, lr
 8000c8a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c8e:	fb06 f107 	mul.w	r1, r6, r7
 8000c92:	4299      	cmp	r1, r3
 8000c94:	d90a      	bls.n	8000cac <__udivmoddi4+0x64>
 8000c96:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c9e:	f080 811f 	bcs.w	8000ee0 <__udivmoddi4+0x298>
 8000ca2:	4299      	cmp	r1, r3
 8000ca4:	f240 811c 	bls.w	8000ee0 <__udivmoddi4+0x298>
 8000ca8:	3e02      	subs	r6, #2
 8000caa:	4463      	add	r3, ip
 8000cac:	1a5b      	subs	r3, r3, r1
 8000cae:	b2a4      	uxth	r4, r4
 8000cb0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cb4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cb8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cbc:	fb00 f707 	mul.w	r7, r0, r7
 8000cc0:	42a7      	cmp	r7, r4
 8000cc2:	d90a      	bls.n	8000cda <__udivmoddi4+0x92>
 8000cc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cc8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ccc:	f080 810a 	bcs.w	8000ee4 <__udivmoddi4+0x29c>
 8000cd0:	42a7      	cmp	r7, r4
 8000cd2:	f240 8107 	bls.w	8000ee4 <__udivmoddi4+0x29c>
 8000cd6:	4464      	add	r4, ip
 8000cd8:	3802      	subs	r0, #2
 8000cda:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cde:	1be4      	subs	r4, r4, r7
 8000ce0:	2600      	movs	r6, #0
 8000ce2:	b11d      	cbz	r5, 8000cec <__udivmoddi4+0xa4>
 8000ce4:	40d4      	lsrs	r4, r2
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cec:	4631      	mov	r1, r6
 8000cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d909      	bls.n	8000d0a <__udivmoddi4+0xc2>
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	f000 80ef 	beq.w	8000eda <__udivmoddi4+0x292>
 8000cfc:	2600      	movs	r6, #0
 8000cfe:	e9c5 0100 	strd	r0, r1, [r5]
 8000d02:	4630      	mov	r0, r6
 8000d04:	4631      	mov	r1, r6
 8000d06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0a:	fab3 f683 	clz	r6, r3
 8000d0e:	2e00      	cmp	r6, #0
 8000d10:	d14a      	bne.n	8000da8 <__udivmoddi4+0x160>
 8000d12:	428b      	cmp	r3, r1
 8000d14:	d302      	bcc.n	8000d1c <__udivmoddi4+0xd4>
 8000d16:	4282      	cmp	r2, r0
 8000d18:	f200 80f9 	bhi.w	8000f0e <__udivmoddi4+0x2c6>
 8000d1c:	1a84      	subs	r4, r0, r2
 8000d1e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d22:	2001      	movs	r0, #1
 8000d24:	469e      	mov	lr, r3
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	d0e0      	beq.n	8000cec <__udivmoddi4+0xa4>
 8000d2a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d2e:	e7dd      	b.n	8000cec <__udivmoddi4+0xa4>
 8000d30:	b902      	cbnz	r2, 8000d34 <__udivmoddi4+0xec>
 8000d32:	deff      	udf	#255	; 0xff
 8000d34:	fab2 f282 	clz	r2, r2
 8000d38:	2a00      	cmp	r2, #0
 8000d3a:	f040 8092 	bne.w	8000e62 <__udivmoddi4+0x21a>
 8000d3e:	eba1 010c 	sub.w	r1, r1, ip
 8000d42:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d46:	fa1f fe8c 	uxth.w	lr, ip
 8000d4a:	2601      	movs	r6, #1
 8000d4c:	0c20      	lsrs	r0, r4, #16
 8000d4e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d52:	fb07 1113 	mls	r1, r7, r3, r1
 8000d56:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d5a:	fb0e f003 	mul.w	r0, lr, r3
 8000d5e:	4288      	cmp	r0, r1
 8000d60:	d908      	bls.n	8000d74 <__udivmoddi4+0x12c>
 8000d62:	eb1c 0101 	adds.w	r1, ip, r1
 8000d66:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d6a:	d202      	bcs.n	8000d72 <__udivmoddi4+0x12a>
 8000d6c:	4288      	cmp	r0, r1
 8000d6e:	f200 80cb 	bhi.w	8000f08 <__udivmoddi4+0x2c0>
 8000d72:	4643      	mov	r3, r8
 8000d74:	1a09      	subs	r1, r1, r0
 8000d76:	b2a4      	uxth	r4, r4
 8000d78:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d7c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d80:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d84:	fb0e fe00 	mul.w	lr, lr, r0
 8000d88:	45a6      	cmp	lr, r4
 8000d8a:	d908      	bls.n	8000d9e <__udivmoddi4+0x156>
 8000d8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d90:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d94:	d202      	bcs.n	8000d9c <__udivmoddi4+0x154>
 8000d96:	45a6      	cmp	lr, r4
 8000d98:	f200 80bb 	bhi.w	8000f12 <__udivmoddi4+0x2ca>
 8000d9c:	4608      	mov	r0, r1
 8000d9e:	eba4 040e 	sub.w	r4, r4, lr
 8000da2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000da6:	e79c      	b.n	8000ce2 <__udivmoddi4+0x9a>
 8000da8:	f1c6 0720 	rsb	r7, r6, #32
 8000dac:	40b3      	lsls	r3, r6
 8000dae:	fa22 fc07 	lsr.w	ip, r2, r7
 8000db2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000db6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dba:	fa01 f306 	lsl.w	r3, r1, r6
 8000dbe:	431c      	orrs	r4, r3
 8000dc0:	40f9      	lsrs	r1, r7
 8000dc2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dc6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dca:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dce:	0c20      	lsrs	r0, r4, #16
 8000dd0:	fa1f fe8c 	uxth.w	lr, ip
 8000dd4:	fb09 1118 	mls	r1, r9, r8, r1
 8000dd8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ddc:	fb08 f00e 	mul.w	r0, r8, lr
 8000de0:	4288      	cmp	r0, r1
 8000de2:	fa02 f206 	lsl.w	r2, r2, r6
 8000de6:	d90b      	bls.n	8000e00 <__udivmoddi4+0x1b8>
 8000de8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dec:	f108 3aff 	add.w	sl, r8, #4294967295
 8000df0:	f080 8088 	bcs.w	8000f04 <__udivmoddi4+0x2bc>
 8000df4:	4288      	cmp	r0, r1
 8000df6:	f240 8085 	bls.w	8000f04 <__udivmoddi4+0x2bc>
 8000dfa:	f1a8 0802 	sub.w	r8, r8, #2
 8000dfe:	4461      	add	r1, ip
 8000e00:	1a09      	subs	r1, r1, r0
 8000e02:	b2a4      	uxth	r4, r4
 8000e04:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e08:	fb09 1110 	mls	r1, r9, r0, r1
 8000e0c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e10:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e14:	458e      	cmp	lr, r1
 8000e16:	d908      	bls.n	8000e2a <__udivmoddi4+0x1e2>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e20:	d26c      	bcs.n	8000efc <__udivmoddi4+0x2b4>
 8000e22:	458e      	cmp	lr, r1
 8000e24:	d96a      	bls.n	8000efc <__udivmoddi4+0x2b4>
 8000e26:	3802      	subs	r0, #2
 8000e28:	4461      	add	r1, ip
 8000e2a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e2e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e32:	eba1 010e 	sub.w	r1, r1, lr
 8000e36:	42a1      	cmp	r1, r4
 8000e38:	46c8      	mov	r8, r9
 8000e3a:	46a6      	mov	lr, r4
 8000e3c:	d356      	bcc.n	8000eec <__udivmoddi4+0x2a4>
 8000e3e:	d053      	beq.n	8000ee8 <__udivmoddi4+0x2a0>
 8000e40:	b15d      	cbz	r5, 8000e5a <__udivmoddi4+0x212>
 8000e42:	ebb3 0208 	subs.w	r2, r3, r8
 8000e46:	eb61 010e 	sbc.w	r1, r1, lr
 8000e4a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e4e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e52:	40f1      	lsrs	r1, r6
 8000e54:	431f      	orrs	r7, r3
 8000e56:	e9c5 7100 	strd	r7, r1, [r5]
 8000e5a:	2600      	movs	r6, #0
 8000e5c:	4631      	mov	r1, r6
 8000e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e62:	f1c2 0320 	rsb	r3, r2, #32
 8000e66:	40d8      	lsrs	r0, r3
 8000e68:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e6c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e70:	4091      	lsls	r1, r2
 8000e72:	4301      	orrs	r1, r0
 8000e74:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e78:	fa1f fe8c 	uxth.w	lr, ip
 8000e7c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e80:	fb07 3610 	mls	r6, r7, r0, r3
 8000e84:	0c0b      	lsrs	r3, r1, #16
 8000e86:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e8a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e8e:	429e      	cmp	r6, r3
 8000e90:	fa04 f402 	lsl.w	r4, r4, r2
 8000e94:	d908      	bls.n	8000ea8 <__udivmoddi4+0x260>
 8000e96:	eb1c 0303 	adds.w	r3, ip, r3
 8000e9a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e9e:	d22f      	bcs.n	8000f00 <__udivmoddi4+0x2b8>
 8000ea0:	429e      	cmp	r6, r3
 8000ea2:	d92d      	bls.n	8000f00 <__udivmoddi4+0x2b8>
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	4463      	add	r3, ip
 8000ea8:	1b9b      	subs	r3, r3, r6
 8000eaa:	b289      	uxth	r1, r1
 8000eac:	fbb3 f6f7 	udiv	r6, r3, r7
 8000eb0:	fb07 3316 	mls	r3, r7, r6, r3
 8000eb4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb8:	fb06 f30e 	mul.w	r3, r6, lr
 8000ebc:	428b      	cmp	r3, r1
 8000ebe:	d908      	bls.n	8000ed2 <__udivmoddi4+0x28a>
 8000ec0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ec8:	d216      	bcs.n	8000ef8 <__udivmoddi4+0x2b0>
 8000eca:	428b      	cmp	r3, r1
 8000ecc:	d914      	bls.n	8000ef8 <__udivmoddi4+0x2b0>
 8000ece:	3e02      	subs	r6, #2
 8000ed0:	4461      	add	r1, ip
 8000ed2:	1ac9      	subs	r1, r1, r3
 8000ed4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ed8:	e738      	b.n	8000d4c <__udivmoddi4+0x104>
 8000eda:	462e      	mov	r6, r5
 8000edc:	4628      	mov	r0, r5
 8000ede:	e705      	b.n	8000cec <__udivmoddi4+0xa4>
 8000ee0:	4606      	mov	r6, r0
 8000ee2:	e6e3      	b.n	8000cac <__udivmoddi4+0x64>
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	e6f8      	b.n	8000cda <__udivmoddi4+0x92>
 8000ee8:	454b      	cmp	r3, r9
 8000eea:	d2a9      	bcs.n	8000e40 <__udivmoddi4+0x1f8>
 8000eec:	ebb9 0802 	subs.w	r8, r9, r2
 8000ef0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ef4:	3801      	subs	r0, #1
 8000ef6:	e7a3      	b.n	8000e40 <__udivmoddi4+0x1f8>
 8000ef8:	4646      	mov	r6, r8
 8000efa:	e7ea      	b.n	8000ed2 <__udivmoddi4+0x28a>
 8000efc:	4620      	mov	r0, r4
 8000efe:	e794      	b.n	8000e2a <__udivmoddi4+0x1e2>
 8000f00:	4640      	mov	r0, r8
 8000f02:	e7d1      	b.n	8000ea8 <__udivmoddi4+0x260>
 8000f04:	46d0      	mov	r8, sl
 8000f06:	e77b      	b.n	8000e00 <__udivmoddi4+0x1b8>
 8000f08:	3b02      	subs	r3, #2
 8000f0a:	4461      	add	r1, ip
 8000f0c:	e732      	b.n	8000d74 <__udivmoddi4+0x12c>
 8000f0e:	4630      	mov	r0, r6
 8000f10:	e709      	b.n	8000d26 <__udivmoddi4+0xde>
 8000f12:	4464      	add	r4, ip
 8000f14:	3802      	subs	r0, #2
 8000f16:	e742      	b.n	8000d9e <__udivmoddi4+0x156>

08000f18 <__aeabi_idiv0>:
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop

08000f1c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b08c      	sub	sp, #48	; 0x30
 8000f20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000f22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f26:	2200      	movs	r2, #0
 8000f28:	601a      	str	r2, [r3, #0]
 8000f2a:	605a      	str	r2, [r3, #4]
 8000f2c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f2e:	1d3b      	adds	r3, r7, #4
 8000f30:	2220      	movs	r2, #32
 8000f32:	2100      	movs	r1, #0
 8000f34:	4618      	mov	r0, r3
 8000f36:	f007 f947 	bl	80081c8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f3a:	4b32      	ldr	r3, [pc, #200]	; (8001004 <MX_ADC1_Init+0xe8>)
 8000f3c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000f40:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f42:	4b30      	ldr	r3, [pc, #192]	; (8001004 <MX_ADC1_Init+0xe8>)
 8000f44:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000f48:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f4a:	4b2e      	ldr	r3, [pc, #184]	; (8001004 <MX_ADC1_Init+0xe8>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f50:	4b2c      	ldr	r3, [pc, #176]	; (8001004 <MX_ADC1_Init+0xe8>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000f56:	4b2b      	ldr	r3, [pc, #172]	; (8001004 <MX_ADC1_Init+0xe8>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f5c:	4b29      	ldr	r3, [pc, #164]	; (8001004 <MX_ADC1_Init+0xe8>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f62:	4b28      	ldr	r3, [pc, #160]	; (8001004 <MX_ADC1_Init+0xe8>)
 8000f64:	2204      	movs	r2, #4
 8000f66:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f68:	4b26      	ldr	r3, [pc, #152]	; (8001004 <MX_ADC1_Init+0xe8>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f6e:	4b25      	ldr	r3, [pc, #148]	; (8001004 <MX_ADC1_Init+0xe8>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000f74:	4b23      	ldr	r3, [pc, #140]	; (8001004 <MX_ADC1_Init+0xe8>)
 8000f76:	2201      	movs	r2, #1
 8000f78:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f7a:	4b22      	ldr	r3, [pc, #136]	; (8001004 <MX_ADC1_Init+0xe8>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f82:	4b20      	ldr	r3, [pc, #128]	; (8001004 <MX_ADC1_Init+0xe8>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f88:	4b1e      	ldr	r3, [pc, #120]	; (8001004 <MX_ADC1_Init+0xe8>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f8e:	4b1d      	ldr	r3, [pc, #116]	; (8001004 <MX_ADC1_Init+0xe8>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f96:	4b1b      	ldr	r3, [pc, #108]	; (8001004 <MX_ADC1_Init+0xe8>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000f9c:	4b19      	ldr	r3, [pc, #100]	; (8001004 <MX_ADC1_Init+0xe8>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fa4:	4817      	ldr	r0, [pc, #92]	; (8001004 <MX_ADC1_Init+0xe8>)
 8000fa6:	f001 f989 	bl	80022bc <HAL_ADC_Init>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000fb0:	f000 fb7e 	bl	80016b0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000fb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	4811      	ldr	r0, [pc, #68]	; (8001004 <MX_ADC1_Init+0xe8>)
 8000fc0:	f002 faec 	bl	800359c <HAL_ADCEx_MultiModeConfigChannel>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000fca:	f000 fb71 	bl	80016b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000fce:	4b0e      	ldr	r3, [pc, #56]	; (8001008 <MX_ADC1_Init+0xec>)
 8000fd0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fd2:	2306      	movs	r3, #6
 8000fd4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000fda:	237f      	movs	r3, #127	; 0x7f
 8000fdc:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000fde:	2304      	movs	r3, #4
 8000fe0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fe6:	1d3b      	adds	r3, r7, #4
 8000fe8:	4619      	mov	r1, r3
 8000fea:	4806      	ldr	r0, [pc, #24]	; (8001004 <MX_ADC1_Init+0xe8>)
 8000fec:	f001 fd20 	bl	8002a30 <HAL_ADC_ConfigChannel>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000ff6:	f000 fb5b 	bl	80016b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ffa:	bf00      	nop
 8000ffc:	3730      	adds	r7, #48	; 0x30
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	20000314 	.word	0x20000314
 8001008:	08600004 	.word	0x08600004

0800100c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b09e      	sub	sp, #120	; 0x78
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001014:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]
 800101c:	605a      	str	r2, [r3, #4]
 800101e:	609a      	str	r2, [r3, #8]
 8001020:	60da      	str	r2, [r3, #12]
 8001022:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001024:	f107 0310 	add.w	r3, r7, #16
 8001028:	2254      	movs	r2, #84	; 0x54
 800102a:	2100      	movs	r1, #0
 800102c:	4618      	mov	r0, r3
 800102e:	f007 f8cb 	bl	80081c8 <memset>
  if(adcHandle->Instance==ADC1)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800103a:	d134      	bne.n	80010a6 <HAL_ADC_MspInit+0x9a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800103c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001040:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001042:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001046:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001048:	f107 0310 	add.w	r3, r7, #16
 800104c:	4618      	mov	r0, r3
 800104e:	f003 fd23 	bl	8004a98 <HAL_RCCEx_PeriphCLKConfig>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001058:	f000 fb2a 	bl	80016b0 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800105c:	4b14      	ldr	r3, [pc, #80]	; (80010b0 <HAL_ADC_MspInit+0xa4>)
 800105e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001060:	4a13      	ldr	r2, [pc, #76]	; (80010b0 <HAL_ADC_MspInit+0xa4>)
 8001062:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001066:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001068:	4b11      	ldr	r3, [pc, #68]	; (80010b0 <HAL_ADC_MspInit+0xa4>)
 800106a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800106c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001070:	60fb      	str	r3, [r7, #12]
 8001072:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001074:	4b0e      	ldr	r3, [pc, #56]	; (80010b0 <HAL_ADC_MspInit+0xa4>)
 8001076:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001078:	4a0d      	ldr	r2, [pc, #52]	; (80010b0 <HAL_ADC_MspInit+0xa4>)
 800107a:	f043 0301 	orr.w	r3, r3, #1
 800107e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001080:	4b0b      	ldr	r3, [pc, #44]	; (80010b0 <HAL_ADC_MspInit+0xa4>)
 8001082:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001084:	f003 0301 	and.w	r3, r3, #1
 8001088:	60bb      	str	r3, [r7, #8]
 800108a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800108c:	2302      	movs	r3, #2
 800108e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001090:	2303      	movs	r3, #3
 8001092:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001094:	2300      	movs	r3, #0
 8001096:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001098:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800109c:	4619      	mov	r1, r3
 800109e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010a2:	f002 fd53 	bl	8003b4c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80010a6:	bf00      	nop
 80010a8:	3778      	adds	r7, #120	; 0x78
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	40021000 	.word	0x40021000

080010b4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b088      	sub	sp, #32
 80010b8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ba:	f107 030c 	add.w	r3, r7, #12
 80010be:	2200      	movs	r2, #0
 80010c0:	601a      	str	r2, [r3, #0]
 80010c2:	605a      	str	r2, [r3, #4]
 80010c4:	609a      	str	r2, [r3, #8]
 80010c6:	60da      	str	r2, [r3, #12]
 80010c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ca:	4b33      	ldr	r3, [pc, #204]	; (8001198 <MX_GPIO_Init+0xe4>)
 80010cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ce:	4a32      	ldr	r2, [pc, #200]	; (8001198 <MX_GPIO_Init+0xe4>)
 80010d0:	f043 0304 	orr.w	r3, r3, #4
 80010d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010d6:	4b30      	ldr	r3, [pc, #192]	; (8001198 <MX_GPIO_Init+0xe4>)
 80010d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010da:	f003 0304 	and.w	r3, r3, #4
 80010de:	60bb      	str	r3, [r7, #8]
 80010e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010e2:	4b2d      	ldr	r3, [pc, #180]	; (8001198 <MX_GPIO_Init+0xe4>)
 80010e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010e6:	4a2c      	ldr	r2, [pc, #176]	; (8001198 <MX_GPIO_Init+0xe4>)
 80010e8:	f043 0320 	orr.w	r3, r3, #32
 80010ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010ee:	4b2a      	ldr	r3, [pc, #168]	; (8001198 <MX_GPIO_Init+0xe4>)
 80010f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f2:	f003 0320 	and.w	r3, r3, #32
 80010f6:	607b      	str	r3, [r7, #4]
 80010f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010fa:	4b27      	ldr	r3, [pc, #156]	; (8001198 <MX_GPIO_Init+0xe4>)
 80010fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010fe:	4a26      	ldr	r2, [pc, #152]	; (8001198 <MX_GPIO_Init+0xe4>)
 8001100:	f043 0301 	orr.w	r3, r3, #1
 8001104:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001106:	4b24      	ldr	r3, [pc, #144]	; (8001198 <MX_GPIO_Init+0xe4>)
 8001108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800110a:	f003 0301 	and.w	r3, r3, #1
 800110e:	603b      	str	r3, [r7, #0]
 8001110:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISO_RESET_GPIO_Port, ISO_RESET_Pin, GPIO_PIN_RESET);
 8001112:	2200      	movs	r2, #0
 8001114:	2104      	movs	r1, #4
 8001116:	4821      	ldr	r0, [pc, #132]	; (800119c <MX_GPIO_Init+0xe8>)
 8001118:	f002 fe9a 	bl	8003e50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800111c:	2200      	movs	r2, #0
 800111e:	2120      	movs	r1, #32
 8001120:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001124:	f002 fe94 	bl	8003e50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8001128:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800112c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800112e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001132:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001134:	2300      	movs	r3, #0
 8001136:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001138:	f107 030c 	add.w	r3, r7, #12
 800113c:	4619      	mov	r1, r3
 800113e:	4817      	ldr	r0, [pc, #92]	; (800119c <MX_GPIO_Init+0xe8>)
 8001140:	f002 fd04 	bl	8003b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ISO_RESET_Pin;
 8001144:	2304      	movs	r3, #4
 8001146:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001148:	2301      	movs	r3, #1
 800114a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114c:	2300      	movs	r3, #0
 800114e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001150:	2300      	movs	r3, #0
 8001152:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ISO_RESET_GPIO_Port, &GPIO_InitStruct);
 8001154:	f107 030c 	add.w	r3, r7, #12
 8001158:	4619      	mov	r1, r3
 800115a:	4810      	ldr	r0, [pc, #64]	; (800119c <MX_GPIO_Init+0xe8>)
 800115c:	f002 fcf6 	bl	8003b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001160:	2320      	movs	r3, #32
 8001162:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001164:	2301      	movs	r3, #1
 8001166:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001168:	2300      	movs	r3, #0
 800116a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800116c:	2300      	movs	r3, #0
 800116e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001170:	f107 030c 	add.w	r3, r7, #12
 8001174:	4619      	mov	r1, r3
 8001176:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800117a:	f002 fce7 	bl	8003b4c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800117e:	2200      	movs	r2, #0
 8001180:	2100      	movs	r1, #0
 8001182:	2028      	movs	r0, #40	; 0x28
 8001184:	f002 fbed 	bl	8003962 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001188:	2028      	movs	r0, #40	; 0x28
 800118a:	f002 fc04 	bl	8003996 <HAL_NVIC_EnableIRQ>

}
 800118e:	bf00      	nop
 8001190:	3720      	adds	r7, #32
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	40021000 	.word	0x40021000
 800119c:	48000800 	.word	0x48000800

080011a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b0a0      	sub	sp, #128	; 0x80
 80011a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	char	 	cmdBuffer[CMD_BUFFER_SIZE];
	int 		idx_cmd;
	char* 		argv[MAX_ARGS];
	int		 	argc = 0;
 80011a6:	2300      	movs	r3, #0
 80011a8:	67bb      	str	r3, [r7, #120]	; 0x78
	char*		token;
	int 		newCmdReady = 0;
 80011aa:	2300      	movs	r3, #0
 80011ac:	673b      	str	r3, [r7, #112]	; 0x70
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011ae:	f000 fd9c 	bl	8001cea <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011b2:	f000 fa1b 	bl	80015ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011b6:	f7ff ff7d 	bl	80010b4 <MX_GPIO_Init>
  MX_TIM1_Init();
 80011ba:	f000 fbc9 	bl	8001950 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 80011be:	f000 fcbf 	bl	8001b40 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80011c2:	f7ff feab 	bl	8000f1c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

	memset(argv,NULL,MAX_ARGS*sizeof(char*));
 80011c6:	463b      	mov	r3, r7
 80011c8:	2224      	movs	r2, #36	; 0x24
 80011ca:	2100      	movs	r1, #0
 80011cc:	4618      	mov	r0, r3
 80011ce:	f006 fffb 	bl	80081c8 <memset>
	memset(cmdBuffer,NULL,CMD_BUFFER_SIZE*sizeof(char));
 80011d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011d6:	2240      	movs	r2, #64	; 0x40
 80011d8:	2100      	movs	r1, #0
 80011da:	4618      	mov	r0, r3
 80011dc:	f006 fff4 	bl	80081c8 <memset>
 80011e0:	4bb1      	ldr	r3, [pc, #708]	; (80014a8 <main+0x308>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	701a      	strb	r2, [r3, #0]
	memset(uartRxBuffer,NULL,UART_RX_BUFFER_SIZE*sizeof(char));
	memset(uartTxBuffer,NULL,UART_TX_BUFFER_SIZE*sizeof(char));
 80011e6:	2240      	movs	r2, #64	; 0x40
 80011e8:	2100      	movs	r1, #0
 80011ea:	48b0      	ldr	r0, [pc, #704]	; (80014ac <main+0x30c>)
 80011ec:	f006 ffec 	bl	80081c8 <memset>

	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 80011f0:	2201      	movs	r2, #1
 80011f2:	49ad      	ldr	r1, [pc, #692]	; (80014a8 <main+0x308>)
 80011f4:	48ae      	ldr	r0, [pc, #696]	; (80014b0 <main+0x310>)
 80011f6:	f005 f829 	bl	800624c <HAL_UART_Receive_IT>
	HAL_Delay(10);
 80011fa:	200a      	movs	r0, #10
 80011fc:	f000 fde6 	bl	8001dcc <HAL_Delay>
	HAL_UART_Transmit(&huart2, started, sizeof(started), HAL_MAX_DELAY);
 8001200:	f04f 33ff 	mov.w	r3, #4294967295
 8001204:	2266      	movs	r2, #102	; 0x66
 8001206:	49ab      	ldr	r1, [pc, #684]	; (80014b4 <main+0x314>)
 8001208:	48a9      	ldr	r0, [pc, #676]	; (80014b0 <main+0x310>)
 800120a:	f004 ff88 	bl	800611e <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 800120e:	f04f 33ff 	mov.w	r3, #4294967295
 8001212:	2218      	movs	r2, #24
 8001214:	49a8      	ldr	r1, [pc, #672]	; (80014b8 <main+0x318>)
 8001216:	48a6      	ldr	r0, [pc, #664]	; (80014b0 <main+0x310>)
 8001218:	f004 ff81 	bl	800611e <HAL_UART_Transmit>

	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 800121c:	2100      	movs	r1, #0
 800121e:	48a7      	ldr	r0, [pc, #668]	; (80014bc <main+0x31c>)
 8001220:	f003 fee0 	bl	8004fe4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 8001224:	2104      	movs	r1, #4
 8001226:	48a5      	ldr	r0, [pc, #660]	; (80014bc <main+0x31c>)
 8001228:	f003 fedc 	bl	8004fe4 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_1);
 800122c:	2100      	movs	r1, #0
 800122e:	48a3      	ldr	r0, [pc, #652]	; (80014bc <main+0x31c>)
 8001230:	f004 fcf6 	bl	8005c20 <HAL_TIMEx_PWMN_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8001234:	2104      	movs	r1, #4
 8001236:	48a1      	ldr	r0, [pc, #644]	; (80014bc <main+0x31c>)
 8001238:	f004 fcf2 	bl	8005c20 <HAL_TIMEx_PWMN_Start>

	HAL_GPIO_WritePin(ISO_RESET_GPIO_Port, ISO_RESET_Pin, 0);
 800123c:	2200      	movs	r2, #0
 800123e:	2104      	movs	r1, #4
 8001240:	489f      	ldr	r0, [pc, #636]	; (80014c0 <main+0x320>)
 8001242:	f002 fe05 	bl	8003e50 <HAL_GPIO_WritePin>
	HAL_ADCEx_Calibration_Start(&hadc1,ADC_SINGLE_ENDED);
 8001246:	217f      	movs	r1, #127	; 0x7f
 8001248:	489e      	ldr	r0, [pc, #632]	; (80014c4 <main+0x324>)
 800124a:	f002 f945 	bl	80034d8 <HAL_ADCEx_Calibration_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		// uartRxReceived is set to 1 when a new character is received on uart 1
		if(uartRxReceived){
 800124e:	4b9e      	ldr	r3, [pc, #632]	; (80014c8 <main+0x328>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d058      	beq.n	8001308 <main+0x168>
			switch(uartRxBuffer[0]){
 8001256:	4b94      	ldr	r3, [pc, #592]	; (80014a8 <main+0x308>)
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	2b0d      	cmp	r3, #13
 800125c:	d002      	beq.n	8001264 <main+0xc4>
 800125e:	2b7f      	cmp	r3, #127	; 0x7f
 8001260:	d02f      	beq.n	80012c2 <main+0x122>
 8001262:	e03e      	b.n	80012e2 <main+0x142>
			// Nouvelle ligne, instruction à traiter
			case ASCII_CR:
				HAL_UART_Transmit(&huart2, newline, sizeof(newline), HAL_MAX_DELAY);
 8001264:	f04f 33ff 	mov.w	r3, #4294967295
 8001268:	2203      	movs	r2, #3
 800126a:	4998      	ldr	r1, [pc, #608]	; (80014cc <main+0x32c>)
 800126c:	4890      	ldr	r0, [pc, #576]	; (80014b0 <main+0x310>)
 800126e:	f004 ff56 	bl	800611e <HAL_UART_Transmit>
				cmdBuffer[idx_cmd] = '\0';
 8001272:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001276:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001278:	4413      	add	r3, r2
 800127a:	2200      	movs	r2, #0
 800127c:	701a      	strb	r2, [r3, #0]
				argc = 0;
 800127e:	2300      	movs	r3, #0
 8001280:	67bb      	str	r3, [r7, #120]	; 0x78
				token = strtok(cmdBuffer, " ");
 8001282:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001286:	4992      	ldr	r1, [pc, #584]	; (80014d0 <main+0x330>)
 8001288:	4618      	mov	r0, r3
 800128a:	f007 fc43 	bl	8008b14 <strtok>
 800128e:	4603      	mov	r3, r0
 8001290:	677b      	str	r3, [r7, #116]	; 0x74
				while(token!=NULL){
 8001292:	e00e      	b.n	80012b2 <main+0x112>
					argv[argc++] = token;
 8001294:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001296:	1c5a      	adds	r2, r3, #1
 8001298:	67ba      	str	r2, [r7, #120]	; 0x78
 800129a:	009b      	lsls	r3, r3, #2
 800129c:	3380      	adds	r3, #128	; 0x80
 800129e:	443b      	add	r3, r7
 80012a0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80012a2:	f843 2c80 	str.w	r2, [r3, #-128]
					token = strtok(NULL, " ");
 80012a6:	498a      	ldr	r1, [pc, #552]	; (80014d0 <main+0x330>)
 80012a8:	2000      	movs	r0, #0
 80012aa:	f007 fc33 	bl	8008b14 <strtok>
 80012ae:	4603      	mov	r3, r0
 80012b0:	677b      	str	r3, [r7, #116]	; 0x74
				while(token!=NULL){
 80012b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d1ed      	bne.n	8001294 <main+0xf4>
				}

				idx_cmd = 0;
 80012b8:	2300      	movs	r3, #0
 80012ba:	67fb      	str	r3, [r7, #124]	; 0x7c
				newCmdReady = 1;
 80012bc:	2301      	movs	r3, #1
 80012be:	673b      	str	r3, [r7, #112]	; 0x70
				break;
 80012c0:	e01f      	b.n	8001302 <main+0x162>
				// Suppression du dernier caractère
			case ASCII_DEL:
				cmdBuffer[idx_cmd--] = '\0';
 80012c2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80012c4:	1e5a      	subs	r2, r3, #1
 80012c6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80012c8:	3380      	adds	r3, #128	; 0x80
 80012ca:	443b      	add	r3, r7
 80012cc:	2200      	movs	r2, #0
 80012ce:	f803 2c5c 	strb.w	r2, [r3, #-92]
				HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 80012d2:	f04f 33ff 	mov.w	r3, #4294967295
 80012d6:	2201      	movs	r2, #1
 80012d8:	4973      	ldr	r1, [pc, #460]	; (80014a8 <main+0x308>)
 80012da:	4875      	ldr	r0, [pc, #468]	; (80014b0 <main+0x310>)
 80012dc:	f004 ff1f 	bl	800611e <HAL_UART_Transmit>
				break;
 80012e0:	e00f      	b.n	8001302 <main+0x162>
				// Nouveau caractère
			default:
				cmdBuffer[idx_cmd++] = uartRxBuffer[0];
 80012e2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80012e4:	1c5a      	adds	r2, r3, #1
 80012e6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80012e8:	4a6f      	ldr	r2, [pc, #444]	; (80014a8 <main+0x308>)
 80012ea:	7812      	ldrb	r2, [r2, #0]
 80012ec:	3380      	adds	r3, #128	; 0x80
 80012ee:	443b      	add	r3, r7
 80012f0:	f803 2c5c 	strb.w	r2, [r3, #-92]
				HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 80012f4:	f04f 33ff 	mov.w	r3, #4294967295
 80012f8:	2201      	movs	r2, #1
 80012fa:	496b      	ldr	r1, [pc, #428]	; (80014a8 <main+0x308>)
 80012fc:	486c      	ldr	r0, [pc, #432]	; (80014b0 <main+0x310>)
 80012fe:	f004 ff0e 	bl	800611e <HAL_UART_Transmit>
			}
			uartRxReceived = 0;
 8001302:	4b71      	ldr	r3, [pc, #452]	; (80014c8 <main+0x328>)
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]
		}

		if(newCmdReady){
 8001308:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800130a:	2b00      	cmp	r3, #0
 800130c:	d09f      	beq.n	800124e <main+0xae>
			if(strcmp(argv[0],"set")==0){
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	4970      	ldr	r1, [pc, #448]	; (80014d4 <main+0x334>)
 8001312:	4618      	mov	r0, r3
 8001314:	f7fe ff84 	bl	8000220 <strcmp>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d12d      	bne.n	800137a <main+0x1da>
				if(strcmp(argv[1],"PA5")==0){
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	496d      	ldr	r1, [pc, #436]	; (80014d8 <main+0x338>)
 8001322:	4618      	mov	r0, r3
 8001324:	f7fe ff7c 	bl	8000220 <strcmp>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d11d      	bne.n	800136a <main+0x1ca>
					HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, atoi(argv[2]));
 800132e:	68bb      	ldr	r3, [r7, #8]
 8001330:	4618      	mov	r0, r3
 8001332:	f006 ff1b 	bl	800816c <atoi>
 8001336:	4603      	mov	r3, r0
 8001338:	b2db      	uxtb	r3, r3
 800133a:	461a      	mov	r2, r3
 800133c:	2120      	movs	r1, #32
 800133e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001342:	f002 fd85 	bl	8003e50 <HAL_GPIO_WritePin>
					sprintf(uartTxBuffer,"Switch on/off led : %d\r\n",atoi(argv[2]));
 8001346:	68bb      	ldr	r3, [r7, #8]
 8001348:	4618      	mov	r0, r3
 800134a:	f006 ff0f 	bl	800816c <atoi>
 800134e:	4603      	mov	r3, r0
 8001350:	461a      	mov	r2, r3
 8001352:	4962      	ldr	r1, [pc, #392]	; (80014dc <main+0x33c>)
 8001354:	4855      	ldr	r0, [pc, #340]	; (80014ac <main+0x30c>)
 8001356:	f007 fba9 	bl	8008aac <siprintf>
					HAL_UART_Transmit(&huart2, uartTxBuffer, 32, HAL_MAX_DELAY);
 800135a:	f04f 33ff 	mov.w	r3, #4294967295
 800135e:	2220      	movs	r2, #32
 8001360:	4952      	ldr	r1, [pc, #328]	; (80014ac <main+0x30c>)
 8001362:	4853      	ldr	r0, [pc, #332]	; (80014b0 <main+0x310>)
 8001364:	f004 fedb 	bl	800611e <HAL_UART_Transmit>
 8001368:	e11f      	b.n	80015aa <main+0x40a>
				}
				else{
					HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 800136a:	f04f 33ff 	mov.w	r3, #4294967295
 800136e:	2214      	movs	r2, #20
 8001370:	495b      	ldr	r1, [pc, #364]	; (80014e0 <main+0x340>)
 8001372:	484f      	ldr	r0, [pc, #316]	; (80014b0 <main+0x310>)
 8001374:	f004 fed3 	bl	800611e <HAL_UART_Transmit>
 8001378:	e117      	b.n	80015aa <main+0x40a>
				}
			}
			else if(strcmp(argv[0],"get")==0)
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	4959      	ldr	r1, [pc, #356]	; (80014e4 <main+0x344>)
 800137e:	4618      	mov	r0, r3
 8001380:	f7fe ff4e 	bl	8000220 <strcmp>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d107      	bne.n	800139a <main+0x1fa>
			{
				HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 800138a:	f04f 33ff 	mov.w	r3, #4294967295
 800138e:	2214      	movs	r2, #20
 8001390:	4953      	ldr	r1, [pc, #332]	; (80014e0 <main+0x340>)
 8001392:	4847      	ldr	r0, [pc, #284]	; (80014b0 <main+0x310>)
 8001394:	f004 fec3 	bl	800611e <HAL_UART_Transmit>
 8001398:	e107      	b.n	80015aa <main+0x40a>
			}

			else if(strcmp(argv[0],"help")==0)
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	4952      	ldr	r1, [pc, #328]	; (80014e8 <main+0x348>)
 800139e:	4618      	mov	r0, r3
 80013a0:	f7fe ff3e 	bl	8000220 <strcmp>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d107      	bne.n	80013ba <main+0x21a>
			{
				HAL_UART_Transmit(&huart2, help, sizeof(help), HAL_MAX_DELAY);
 80013aa:	f04f 33ff 	mov.w	r3, #4294967295
 80013ae:	2239      	movs	r2, #57	; 0x39
 80013b0:	494e      	ldr	r1, [pc, #312]	; (80014ec <main+0x34c>)
 80013b2:	483f      	ldr	r0, [pc, #252]	; (80014b0 <main+0x310>)
 80013b4:	f004 feb3 	bl	800611e <HAL_UART_Transmit>
 80013b8:	e0f7      	b.n	80015aa <main+0x40a>
			}
			else if(strcmp(argv[0],"pinout")==0)
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	494c      	ldr	r1, [pc, #304]	; (80014f0 <main+0x350>)
 80013be:	4618      	mov	r0, r3
 80013c0:	f7fe ff2e 	bl	8000220 <strcmp>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d107      	bne.n	80013da <main+0x23a>
			{
				HAL_UART_Transmit(&huart2, pinout, sizeof(pinout), HAL_MAX_DELAY);
 80013ca:	f04f 33ff 	mov.w	r3, #4294967295
 80013ce:	222f      	movs	r2, #47	; 0x2f
 80013d0:	4948      	ldr	r1, [pc, #288]	; (80014f4 <main+0x354>)
 80013d2:	4837      	ldr	r0, [pc, #220]	; (80014b0 <main+0x310>)
 80013d4:	f004 fea3 	bl	800611e <HAL_UART_Transmit>
 80013d8:	e0e7      	b.n	80015aa <main+0x40a>
			}
			else if(strcmp(argv[0],"start")==0)
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	4946      	ldr	r1, [pc, #280]	; (80014f8 <main+0x358>)
 80013de:	4618      	mov	r0, r3
 80013e0:	f7fe ff1e 	bl	8000220 <strcmp>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d114      	bne.n	8001414 <main+0x274>
			{
				HAL_UART_Transmit(&huart2, powerOn, sizeof(powerOn), HAL_MAX_DELAY);
 80013ea:	f04f 33ff 	mov.w	r3, #4294967295
 80013ee:	220b      	movs	r2, #11
 80013f0:	4942      	ldr	r1, [pc, #264]	; (80014fc <main+0x35c>)
 80013f2:	482f      	ldr	r0, [pc, #188]	; (80014b0 <main+0x310>)
 80013f4:	f004 fe93 	bl	800611e <HAL_UART_Transmit>
				HAL_GPIO_WritePin(ISO_RESET_GPIO_Port, ISO_RESET_Pin, 1);
 80013f8:	2201      	movs	r2, #1
 80013fa:	2104      	movs	r1, #4
 80013fc:	4830      	ldr	r0, [pc, #192]	; (80014c0 <main+0x320>)
 80013fe:	f002 fd27 	bl	8003e50 <HAL_GPIO_WritePin>
				HAL_Delay(1);
 8001402:	2001      	movs	r0, #1
 8001404:	f000 fce2 	bl	8001dcc <HAL_Delay>
				//			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
				HAL_GPIO_WritePin(ISO_RESET_GPIO_Port, ISO_RESET_Pin, 0);
 8001408:	2200      	movs	r2, #0
 800140a:	2104      	movs	r1, #4
 800140c:	482c      	ldr	r0, [pc, #176]	; (80014c0 <main+0x320>)
 800140e:	f002 fd1f 	bl	8003e50 <HAL_GPIO_WritePin>
 8001412:	e0ca      	b.n	80015aa <main+0x40a>
			}
			else if(strcmp(argv[0],"ADC")==0)
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	493a      	ldr	r1, [pc, #232]	; (8001500 <main+0x360>)
 8001418:	4618      	mov	r0, r3
 800141a:	f7fe ff01 	bl	8000220 <strcmp>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d124      	bne.n	800146e <main+0x2ce>
			{
				HAL_ADC_Start (&hadc1);
 8001424:	4827      	ldr	r0, [pc, #156]	; (80014c4 <main+0x324>)
 8001426:	f001 f90b 	bl	8002640 <HAL_ADC_Start>
				HAL_ADC_PollForConversion(&hadc1,12);
 800142a:	210c      	movs	r1, #12
 800142c:	4825      	ldr	r0, [pc, #148]	; (80014c4 <main+0x324>)
 800142e:	f001 f9eb 	bl	8002808 <HAL_ADC_PollForConversion>
				float adcVal = HAL_ADC_GetValue(&hadc1);
 8001432:	4824      	ldr	r0, [pc, #144]	; (80014c4 <main+0x324>)
 8001434:	f001 faee 	bl	8002a14 <HAL_ADC_GetValue>
 8001438:	ee07 0a90 	vmov	s15, r0
 800143c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001440:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64

				//float courant=(((adcVal/4096)*3.3)-2.5)*12;

				sprintf(uartTxBuffer,"ADC valeur de courant : %f %\n\r",adcVal);
 8001444:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8001446:	f7ff f8b7 	bl	80005b8 <__aeabi_f2d>
 800144a:	4602      	mov	r2, r0
 800144c:	460b      	mov	r3, r1
 800144e:	492d      	ldr	r1, [pc, #180]	; (8001504 <main+0x364>)
 8001450:	4816      	ldr	r0, [pc, #88]	; (80014ac <main+0x30c>)
 8001452:	f007 fb2b 	bl	8008aac <siprintf>
				//sprintf(uartTxBuffer,"ADC valeur de courant : %f %\n\r",courant);
				HAL_UART_Transmit(&huart2, uartTxBuffer, strlen(uartTxBuffer), HAL_MAX_DELAY);
 8001456:	4815      	ldr	r0, [pc, #84]	; (80014ac <main+0x30c>)
 8001458:	f7fe feec 	bl	8000234 <strlen>
 800145c:	4603      	mov	r3, r0
 800145e:	b29a      	uxth	r2, r3
 8001460:	f04f 33ff 	mov.w	r3, #4294967295
 8001464:	4911      	ldr	r1, [pc, #68]	; (80014ac <main+0x30c>)
 8001466:	4812      	ldr	r0, [pc, #72]	; (80014b0 <main+0x310>)
 8001468:	f004 fe59 	bl	800611e <HAL_UART_Transmit>
 800146c:	e09d      	b.n	80015aa <main+0x40a>


			}


			else if(strcmp(argv[0],"stop")==0)
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	4925      	ldr	r1, [pc, #148]	; (8001508 <main+0x368>)
 8001472:	4618      	mov	r0, r3
 8001474:	f7fe fed4 	bl	8000220 <strcmp>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d107      	bne.n	800148e <main+0x2ee>
			{
				HAL_UART_Transmit(&huart2, powerOff, sizeof(powerOff), HAL_MAX_DELAY);
 800147e:	f04f 33ff 	mov.w	r3, #4294967295
 8001482:	220c      	movs	r2, #12
 8001484:	4921      	ldr	r1, [pc, #132]	; (800150c <main+0x36c>)
 8001486:	480a      	ldr	r0, [pc, #40]	; (80014b0 <main+0x310>)
 8001488:	f004 fe49 	bl	800611e <HAL_UART_Transmit>
 800148c:	e08d      	b.n	80015aa <main+0x40a>
			}

			else if(strncmp(argv[0],"speed=",6)==0 )
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	2206      	movs	r2, #6
 8001492:	491f      	ldr	r1, [pc, #124]	; (8001510 <main+0x370>)
 8001494:	4618      	mov	r0, r3
 8001496:	f007 fb29 	bl	8008aec <strncmp>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d17d      	bne.n	800159c <main+0x3fc>
			{

				int i;
				int speed_value;
				for (i=0;i<6;i++){
 80014a0:	2300      	movs	r3, #0
 80014a2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80014a4:	e043      	b.n	800152e <main+0x38e>
 80014a6:	bf00      	nop
 80014a8:	200003ec 	.word	0x200003ec
 80014ac:	200003f0 	.word	0x200003f0
 80014b0:	20000484 	.word	0x20000484
 80014b4:	20000018 	.word	0x20000018
 80014b8:	20000000 	.word	0x20000000
 80014bc:	20000438 	.word	0x20000438
 80014c0:	48000800 	.word	0x48000800
 80014c4:	20000314 	.word	0x20000314
 80014c8:	200003e8 	.word	0x200003e8
 80014cc:	20000080 	.word	0x20000080
 80014d0:	0800b1b0 	.word	0x0800b1b0
 80014d4:	0800b1b4 	.word	0x0800b1b4
 80014d8:	0800b1b8 	.word	0x0800b1b8
 80014dc:	0800b1bc 	.word	0x0800b1bc
 80014e0:	20000084 	.word	0x20000084
 80014e4:	0800b1d8 	.word	0x0800b1d8
 80014e8:	0800b1dc 	.word	0x0800b1dc
 80014ec:	20000098 	.word	0x20000098
 80014f0:	0800b1e4 	.word	0x0800b1e4
 80014f4:	200000d4 	.word	0x200000d4
 80014f8:	0800b1ec 	.word	0x0800b1ec
 80014fc:	20000104 	.word	0x20000104
 8001500:	0800b1f4 	.word	0x0800b1f4
 8001504:	0800b1f8 	.word	0x0800b1f8
 8001508:	0800b218 	.word	0x0800b218
 800150c:	20000110 	.word	0x20000110
 8001510:	0800b220 	.word	0x0800b220
					valeur_vitesse[i]=argv[0][6+i];
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001518:	3206      	adds	r2, #6
 800151a:	4413      	add	r3, r2
 800151c:	7819      	ldrb	r1, [r3, #0]
 800151e:	4a2b      	ldr	r2, [pc, #172]	; (80015cc <main+0x42c>)
 8001520:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001522:	4413      	add	r3, r2
 8001524:	460a      	mov	r2, r1
 8001526:	701a      	strb	r2, [r3, #0]
				for (i=0;i<6;i++){
 8001528:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800152a:	3301      	adds	r3, #1
 800152c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800152e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001530:	2b05      	cmp	r3, #5
 8001532:	ddef      	ble.n	8001514 <main+0x374>
				}
				speed_value= atoi(valeur_vitesse);
 8001534:	4825      	ldr	r0, [pc, #148]	; (80015cc <main+0x42c>)
 8001536:	f006 fe19 	bl	800816c <atoi>
 800153a:	66b8      	str	r0, [r7, #104]	; 0x68
				if(speed_value>Max_Pulse_Motor){
 800153c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800153e:	f5b3 5fa6 	cmp.w	r3, #5312	; 0x14c0
 8001542:	dd02      	ble.n	800154a <main+0x3aa>
					speed_value=Max_Pulse_Motor;
 8001544:	f44f 53a6 	mov.w	r3, #5312	; 0x14c0
 8001548:	66bb      	str	r3, [r7, #104]	; 0x68
				}
				TIM1->CCR1=speed_value*Max_Pulse_Motor/100;
 800154a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800154c:	f44f 52a6 	mov.w	r2, #5312	; 0x14c0
 8001550:	fb02 f303 	mul.w	r3, r2, r3
 8001554:	4a1e      	ldr	r2, [pc, #120]	; (80015d0 <main+0x430>)
 8001556:	fb82 1203 	smull	r1, r2, r2, r3
 800155a:	1152      	asrs	r2, r2, #5
 800155c:	17db      	asrs	r3, r3, #31
 800155e:	1ad2      	subs	r2, r2, r3
 8001560:	4b1c      	ldr	r3, [pc, #112]	; (80015d4 <main+0x434>)
 8001562:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR2=(100-speed_value)*Max_Pulse_Motor/100;
 8001564:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001566:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 800156a:	f44f 52a6 	mov.w	r2, #5312	; 0x14c0
 800156e:	fb02 f303 	mul.w	r3, r2, r3
 8001572:	4a17      	ldr	r2, [pc, #92]	; (80015d0 <main+0x430>)
 8001574:	fb82 1203 	smull	r1, r2, r2, r3
 8001578:	1152      	asrs	r2, r2, #5
 800157a:	17db      	asrs	r3, r3, #31
 800157c:	1ad2      	subs	r2, r2, r3
 800157e:	4b15      	ldr	r3, [pc, #84]	; (80015d4 <main+0x434>)
 8001580:	639a      	str	r2, [r3, #56]	; 0x38



				sprintf(buffer_affichage_vitesse,"La valeur de la vitesse est : %d \r\n",speed_value);
 8001582:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001584:	4914      	ldr	r1, [pc, #80]	; (80015d8 <main+0x438>)
 8001586:	4815      	ldr	r0, [pc, #84]	; (80015dc <main+0x43c>)
 8001588:	f007 fa90 	bl	8008aac <siprintf>
				HAL_UART_Transmit(&huart2, buffer_affichage_vitesse, sizeof(buffer_affichage_vitesse), HAL_MAX_DELAY);
 800158c:	f04f 33ff 	mov.w	r3, #4294967295
 8001590:	2264      	movs	r2, #100	; 0x64
 8001592:	4912      	ldr	r1, [pc, #72]	; (80015dc <main+0x43c>)
 8001594:	4812      	ldr	r0, [pc, #72]	; (80015e0 <main+0x440>)
 8001596:	f004 fdc2 	bl	800611e <HAL_UART_Transmit>
 800159a:	e006      	b.n	80015aa <main+0x40a>


			}

			else{
				HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 800159c:	f04f 33ff 	mov.w	r3, #4294967295
 80015a0:	2214      	movs	r2, #20
 80015a2:	4910      	ldr	r1, [pc, #64]	; (80015e4 <main+0x444>)
 80015a4:	480e      	ldr	r0, [pc, #56]	; (80015e0 <main+0x440>)
 80015a6:	f004 fdba 	bl	800611e <HAL_UART_Transmit>
			}
			HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 80015aa:	f04f 33ff 	mov.w	r3, #4294967295
 80015ae:	2218      	movs	r2, #24
 80015b0:	490d      	ldr	r1, [pc, #52]	; (80015e8 <main+0x448>)
 80015b2:	480b      	ldr	r0, [pc, #44]	; (80015e0 <main+0x440>)
 80015b4:	f004 fdb3 	bl	800611e <HAL_UART_Transmit>
			newCmdReady = 0;
 80015b8:	2300      	movs	r3, #0
 80015ba:	673b      	str	r3, [r7, #112]	; 0x70

			memset(argv,NULL,MAX_ARGS*sizeof(char*));
 80015bc:	463b      	mov	r3, r7
 80015be:	2224      	movs	r2, #36	; 0x24
 80015c0:	2100      	movs	r1, #0
 80015c2:	4618      	mov	r0, r3
 80015c4:	f006 fe00 	bl	80081c8 <memset>
		if(uartRxReceived){
 80015c8:	e641      	b.n	800124e <main+0xae>
 80015ca:	bf00      	nop
 80015cc:	20000380 	.word	0x20000380
 80015d0:	51eb851f 	.word	0x51eb851f
 80015d4:	40012c00 	.word	0x40012c00
 80015d8:	0800b228 	.word	0x0800b228
 80015dc:	20000384 	.word	0x20000384
 80015e0:	20000484 	.word	0x20000484
 80015e4:	20000084 	.word	0x20000084
 80015e8:	20000000 	.word	0x20000000

080015ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b094      	sub	sp, #80	; 0x50
 80015f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015f2:	f107 0318 	add.w	r3, r7, #24
 80015f6:	2238      	movs	r2, #56	; 0x38
 80015f8:	2100      	movs	r1, #0
 80015fa:	4618      	mov	r0, r3
 80015fc:	f006 fde4 	bl	80081c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001600:	1d3b      	adds	r3, r7, #4
 8001602:	2200      	movs	r2, #0
 8001604:	601a      	str	r2, [r3, #0]
 8001606:	605a      	str	r2, [r3, #4]
 8001608:	609a      	str	r2, [r3, #8]
 800160a:	60da      	str	r2, [r3, #12]
 800160c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800160e:	2000      	movs	r0, #0
 8001610:	f002 fc5a 	bl	8003ec8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001614:	2302      	movs	r3, #2
 8001616:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001618:	f44f 7380 	mov.w	r3, #256	; 0x100
 800161c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800161e:	2340      	movs	r3, #64	; 0x40
 8001620:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001622:	2302      	movs	r3, #2
 8001624:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001626:	2302      	movs	r3, #2
 8001628:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800162a:	2304      	movs	r3, #4
 800162c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800162e:	2355      	movs	r3, #85	; 0x55
 8001630:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001632:	2302      	movs	r3, #2
 8001634:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001636:	2302      	movs	r3, #2
 8001638:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800163a:	2302      	movs	r3, #2
 800163c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800163e:	f107 0318 	add.w	r3, r7, #24
 8001642:	4618      	mov	r0, r3
 8001644:	f002 fcf4 	bl	8004030 <HAL_RCC_OscConfig>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800164e:	f000 f82f 	bl	80016b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001652:	230f      	movs	r3, #15
 8001654:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001656:	2303      	movs	r3, #3
 8001658:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800165a:	2300      	movs	r3, #0
 800165c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800165e:	2300      	movs	r3, #0
 8001660:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001662:	2300      	movs	r3, #0
 8001664:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001666:	1d3b      	adds	r3, r7, #4
 8001668:	2104      	movs	r1, #4
 800166a:	4618      	mov	r0, r3
 800166c:	f002 fff8 	bl	8004660 <HAL_RCC_ClockConfig>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001676:	f000 f81b 	bl	80016b0 <Error_Handler>
  }
}
 800167a:	bf00      	nop
 800167c:	3750      	adds	r7, #80	; 0x50
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
	...

08001684 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
	uartRxReceived=1;
 800168c:	4b05      	ldr	r3, [pc, #20]	; (80016a4 <HAL_UART_RxCpltCallback+0x20>)
 800168e:	2201      	movs	r2, #1
 8001690:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2,uartRxBuffer,UART_RX_BUFFER_SIZE);
 8001692:	2201      	movs	r2, #1
 8001694:	4904      	ldr	r1, [pc, #16]	; (80016a8 <HAL_UART_RxCpltCallback+0x24>)
 8001696:	4805      	ldr	r0, [pc, #20]	; (80016ac <HAL_UART_RxCpltCallback+0x28>)
 8001698:	f004 fdd8 	bl	800624c <HAL_UART_Receive_IT>
}
 800169c:	bf00      	nop
 800169e:	3708      	adds	r7, #8
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	200003e8 	.word	0x200003e8
 80016a8:	200003ec 	.word	0x200003ec
 80016ac:	20000484 	.word	0x20000484

080016b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016b4:	b672      	cpsid	i
}
 80016b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80016b8:	e7fe      	b.n	80016b8 <Error_Handler+0x8>
	...

080016bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016c2:	4b0f      	ldr	r3, [pc, #60]	; (8001700 <HAL_MspInit+0x44>)
 80016c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016c6:	4a0e      	ldr	r2, [pc, #56]	; (8001700 <HAL_MspInit+0x44>)
 80016c8:	f043 0301 	orr.w	r3, r3, #1
 80016cc:	6613      	str	r3, [r2, #96]	; 0x60
 80016ce:	4b0c      	ldr	r3, [pc, #48]	; (8001700 <HAL_MspInit+0x44>)
 80016d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016d2:	f003 0301 	and.w	r3, r3, #1
 80016d6:	607b      	str	r3, [r7, #4]
 80016d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016da:	4b09      	ldr	r3, [pc, #36]	; (8001700 <HAL_MspInit+0x44>)
 80016dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016de:	4a08      	ldr	r2, [pc, #32]	; (8001700 <HAL_MspInit+0x44>)
 80016e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016e4:	6593      	str	r3, [r2, #88]	; 0x58
 80016e6:	4b06      	ldr	r3, [pc, #24]	; (8001700 <HAL_MspInit+0x44>)
 80016e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ee:	603b      	str	r3, [r7, #0]
 80016f0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80016f2:	f002 fc8d 	bl	8004010 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016f6:	bf00      	nop
 80016f8:	3708      	adds	r7, #8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	40021000 	.word	0x40021000

08001704 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001708:	e7fe      	b.n	8001708 <NMI_Handler+0x4>

0800170a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800170a:	b480      	push	{r7}
 800170c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800170e:	e7fe      	b.n	800170e <HardFault_Handler+0x4>

08001710 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001714:	e7fe      	b.n	8001714 <MemManage_Handler+0x4>

08001716 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001716:	b480      	push	{r7}
 8001718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800171a:	e7fe      	b.n	800171a <BusFault_Handler+0x4>

0800171c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001720:	e7fe      	b.n	8001720 <UsageFault_Handler+0x4>

08001722 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001722:	b480      	push	{r7}
 8001724:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001726:	bf00      	nop
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr

08001730 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001734:	bf00      	nop
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr

0800173e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800173e:	b480      	push	{r7}
 8001740:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001742:	bf00      	nop
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr

0800174c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001750:	f000 fb1e 	bl	8001d90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001754:	bf00      	nop
 8001756:	bd80      	pop	{r7, pc}

08001758 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800175c:	4802      	ldr	r0, [pc, #8]	; (8001768 <USART2_IRQHandler+0x10>)
 800175e:	f004 fdcb 	bl	80062f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001762:	bf00      	nop
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	20000484 	.word	0x20000484

0800176c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 8001770:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001774:	f002 fb84 	bl	8003e80 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
 	 PinState=1-PinState;
 8001778:	4b07      	ldr	r3, [pc, #28]	; (8001798 <EXTI15_10_IRQHandler+0x2c>)
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	f1c3 0301 	rsb	r3, r3, #1
 8001780:	b2da      	uxtb	r2, r3
 8001782:	4b05      	ldr	r3, [pc, #20]	; (8001798 <EXTI15_10_IRQHandler+0x2c>)
 8001784:	701a      	strb	r2, [r3, #0]
// 	 HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, PinState);
 	 HAL_GPIO_WritePin(ISO_RESET_GPIO_Port, ISO_RESET_Pin, PinState);
 8001786:	4b04      	ldr	r3, [pc, #16]	; (8001798 <EXTI15_10_IRQHandler+0x2c>)
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	461a      	mov	r2, r3
 800178c:	2104      	movs	r1, #4
 800178e:	4803      	ldr	r0, [pc, #12]	; (800179c <EXTI15_10_IRQHandler+0x30>)
 8001790:	f002 fb5e 	bl	8003e50 <HAL_GPIO_WritePin>
 	 //HAL_Delay(200);

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001794:	bf00      	nop
 8001796:	bd80      	pop	{r7, pc}
 8001798:	20000430 	.word	0x20000430
 800179c:	48000800 	.word	0x48000800

080017a0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
	return 1;
 80017a4:	2301      	movs	r3, #1
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr

080017b0 <_kill>:

int _kill(int pid, int sig)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80017ba:	f006 fcdb 	bl	8008174 <__errno>
 80017be:	4603      	mov	r3, r0
 80017c0:	2216      	movs	r2, #22
 80017c2:	601a      	str	r2, [r3, #0]
	return -1;
 80017c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3708      	adds	r7, #8
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}

080017d0 <_exit>:

void _exit (int status)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80017d8:	f04f 31ff 	mov.w	r1, #4294967295
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	f7ff ffe7 	bl	80017b0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80017e2:	e7fe      	b.n	80017e2 <_exit+0x12>

080017e4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b086      	sub	sp, #24
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	60f8      	str	r0, [r7, #12]
 80017ec:	60b9      	str	r1, [r7, #8]
 80017ee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017f0:	2300      	movs	r3, #0
 80017f2:	617b      	str	r3, [r7, #20]
 80017f4:	e00a      	b.n	800180c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80017f6:	f3af 8000 	nop.w
 80017fa:	4601      	mov	r1, r0
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	1c5a      	adds	r2, r3, #1
 8001800:	60ba      	str	r2, [r7, #8]
 8001802:	b2ca      	uxtb	r2, r1
 8001804:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	3301      	adds	r3, #1
 800180a:	617b      	str	r3, [r7, #20]
 800180c:	697a      	ldr	r2, [r7, #20]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	429a      	cmp	r2, r3
 8001812:	dbf0      	blt.n	80017f6 <_read+0x12>
	}

return len;
 8001814:	687b      	ldr	r3, [r7, #4]
}
 8001816:	4618      	mov	r0, r3
 8001818:	3718      	adds	r7, #24
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}

0800181e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800181e:	b580      	push	{r7, lr}
 8001820:	b086      	sub	sp, #24
 8001822:	af00      	add	r7, sp, #0
 8001824:	60f8      	str	r0, [r7, #12]
 8001826:	60b9      	str	r1, [r7, #8]
 8001828:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800182a:	2300      	movs	r3, #0
 800182c:	617b      	str	r3, [r7, #20]
 800182e:	e009      	b.n	8001844 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	1c5a      	adds	r2, r3, #1
 8001834:	60ba      	str	r2, [r7, #8]
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	4618      	mov	r0, r3
 800183a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	3301      	adds	r3, #1
 8001842:	617b      	str	r3, [r7, #20]
 8001844:	697a      	ldr	r2, [r7, #20]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	429a      	cmp	r2, r3
 800184a:	dbf1      	blt.n	8001830 <_write+0x12>
	}
	return len;
 800184c:	687b      	ldr	r3, [r7, #4]
}
 800184e:	4618      	mov	r0, r3
 8001850:	3718      	adds	r7, #24
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}

08001856 <_close>:

int _close(int file)
{
 8001856:	b480      	push	{r7}
 8001858:	b083      	sub	sp, #12
 800185a:	af00      	add	r7, sp, #0
 800185c:	6078      	str	r0, [r7, #4]
	return -1;
 800185e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001862:	4618      	mov	r0, r3
 8001864:	370c      	adds	r7, #12
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr

0800186e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800186e:	b480      	push	{r7}
 8001870:	b083      	sub	sp, #12
 8001872:	af00      	add	r7, sp, #0
 8001874:	6078      	str	r0, [r7, #4]
 8001876:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800187e:	605a      	str	r2, [r3, #4]
	return 0;
 8001880:	2300      	movs	r3, #0
}
 8001882:	4618      	mov	r0, r3
 8001884:	370c      	adds	r7, #12
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr

0800188e <_isatty>:

int _isatty(int file)
{
 800188e:	b480      	push	{r7}
 8001890:	b083      	sub	sp, #12
 8001892:	af00      	add	r7, sp, #0
 8001894:	6078      	str	r0, [r7, #4]
	return 1;
 8001896:	2301      	movs	r3, #1
}
 8001898:	4618      	mov	r0, r3
 800189a:	370c      	adds	r7, #12
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr

080018a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b085      	sub	sp, #20
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	60f8      	str	r0, [r7, #12]
 80018ac:	60b9      	str	r1, [r7, #8]
 80018ae:	607a      	str	r2, [r7, #4]
	return 0;
 80018b0:	2300      	movs	r3, #0
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3714      	adds	r7, #20
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
	...

080018c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b086      	sub	sp, #24
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018c8:	4a14      	ldr	r2, [pc, #80]	; (800191c <_sbrk+0x5c>)
 80018ca:	4b15      	ldr	r3, [pc, #84]	; (8001920 <_sbrk+0x60>)
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018d4:	4b13      	ldr	r3, [pc, #76]	; (8001924 <_sbrk+0x64>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d102      	bne.n	80018e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018dc:	4b11      	ldr	r3, [pc, #68]	; (8001924 <_sbrk+0x64>)
 80018de:	4a12      	ldr	r2, [pc, #72]	; (8001928 <_sbrk+0x68>)
 80018e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018e2:	4b10      	ldr	r3, [pc, #64]	; (8001924 <_sbrk+0x64>)
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4413      	add	r3, r2
 80018ea:	693a      	ldr	r2, [r7, #16]
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d207      	bcs.n	8001900 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018f0:	f006 fc40 	bl	8008174 <__errno>
 80018f4:	4603      	mov	r3, r0
 80018f6:	220c      	movs	r2, #12
 80018f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018fa:	f04f 33ff 	mov.w	r3, #4294967295
 80018fe:	e009      	b.n	8001914 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001900:	4b08      	ldr	r3, [pc, #32]	; (8001924 <_sbrk+0x64>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001906:	4b07      	ldr	r3, [pc, #28]	; (8001924 <_sbrk+0x64>)
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4413      	add	r3, r2
 800190e:	4a05      	ldr	r2, [pc, #20]	; (8001924 <_sbrk+0x64>)
 8001910:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001912:	68fb      	ldr	r3, [r7, #12]
}
 8001914:	4618      	mov	r0, r3
 8001916:	3718      	adds	r7, #24
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	20020000 	.word	0x20020000
 8001920:	00000400 	.word	0x00000400
 8001924:	20000434 	.word	0x20000434
 8001928:	20000528 	.word	0x20000528

0800192c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001930:	4b06      	ldr	r3, [pc, #24]	; (800194c <SystemInit+0x20>)
 8001932:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001936:	4a05      	ldr	r2, [pc, #20]	; (800194c <SystemInit+0x20>)
 8001938:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800193c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001940:	bf00      	nop
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	e000ed00 	.word	0xe000ed00

08001950 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b098      	sub	sp, #96	; 0x60
 8001954:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001956:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800195a:	2200      	movs	r2, #0
 800195c:	601a      	str	r2, [r3, #0]
 800195e:	605a      	str	r2, [r3, #4]
 8001960:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001962:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001966:	2200      	movs	r2, #0
 8001968:	601a      	str	r2, [r3, #0]
 800196a:	605a      	str	r2, [r3, #4]
 800196c:	609a      	str	r2, [r3, #8]
 800196e:	60da      	str	r2, [r3, #12]
 8001970:	611a      	str	r2, [r3, #16]
 8001972:	615a      	str	r2, [r3, #20]
 8001974:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001976:	1d3b      	adds	r3, r7, #4
 8001978:	2234      	movs	r2, #52	; 0x34
 800197a:	2100      	movs	r1, #0
 800197c:	4618      	mov	r0, r3
 800197e:	f006 fc23 	bl	80081c8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001982:	4b41      	ldr	r3, [pc, #260]	; (8001a88 <MX_TIM1_Init+0x138>)
 8001984:	4a41      	ldr	r2, [pc, #260]	; (8001a8c <MX_TIM1_Init+0x13c>)
 8001986:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001988:	4b3f      	ldr	r3, [pc, #252]	; (8001a88 <MX_TIM1_Init+0x138>)
 800198a:	2200      	movs	r2, #0
 800198c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 800198e:	4b3e      	ldr	r3, [pc, #248]	; (8001a88 <MX_TIM1_Init+0x138>)
 8001990:	2220      	movs	r2, #32
 8001992:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5312;
 8001994:	4b3c      	ldr	r3, [pc, #240]	; (8001a88 <MX_TIM1_Init+0x138>)
 8001996:	f44f 52a6 	mov.w	r2, #5312	; 0x14c0
 800199a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800199c:	4b3a      	ldr	r3, [pc, #232]	; (8001a88 <MX_TIM1_Init+0x138>)
 800199e:	2200      	movs	r2, #0
 80019a0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80019a2:	4b39      	ldr	r3, [pc, #228]	; (8001a88 <MX_TIM1_Init+0x138>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019a8:	4b37      	ldr	r3, [pc, #220]	; (8001a88 <MX_TIM1_Init+0x138>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80019ae:	4836      	ldr	r0, [pc, #216]	; (8001a88 <MX_TIM1_Init+0x138>)
 80019b0:	f003 fac0 	bl	8004f34 <HAL_TIM_PWM_Init>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80019ba:	f7ff fe79 	bl	80016b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019be:	2300      	movs	r3, #0
 80019c0:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80019c2:	2300      	movs	r3, #0
 80019c4:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019c6:	2300      	movs	r3, #0
 80019c8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80019ca:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80019ce:	4619      	mov	r1, r3
 80019d0:	482d      	ldr	r0, [pc, #180]	; (8001a88 <MX_TIM1_Init+0x138>)
 80019d2:	f004 f9e7 	bl	8005da4 <HAL_TIMEx_MasterConfigSynchronization>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d001      	beq.n	80019e0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80019dc:	f7ff fe68 	bl	80016b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019e0:	2360      	movs	r3, #96	; 0x60
 80019e2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 2656;
 80019e4:	f44f 6326 	mov.w	r3, #2656	; 0xa60
 80019e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019ea:	2300      	movs	r3, #0
 80019ec:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80019ee:	2300      	movs	r3, #0
 80019f0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019f2:	2300      	movs	r3, #0
 80019f4:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80019f6:	2300      	movs	r3, #0
 80019f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80019fa:	2300      	movs	r3, #0
 80019fc:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019fe:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001a02:	2200      	movs	r2, #0
 8001a04:	4619      	mov	r1, r3
 8001a06:	4820      	ldr	r0, [pc, #128]	; (8001a88 <MX_TIM1_Init+0x138>)
 8001a08:	f003 fbfe 	bl	8005208 <HAL_TIM_PWM_ConfigChannel>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8001a12:	f7ff fe4d 	bl	80016b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a16:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001a1a:	2204      	movs	r2, #4
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	481a      	ldr	r0, [pc, #104]	; (8001a88 <MX_TIM1_Init+0x138>)
 8001a20:	f003 fbf2 	bl	8005208 <HAL_TIM_PWM_ConfigChannel>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <MX_TIM1_Init+0xde>
  {
    Error_Handler();
 8001a2a:	f7ff fe41 	bl	80016b0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001a32:	2300      	movs	r3, #0
 8001a34:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a36:	2300      	movs	r3, #0
 8001a38:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 210;
 8001a3a:	23d2      	movs	r3, #210	; 0xd2
 8001a3c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a42:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a46:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001a50:	2300      	movs	r3, #0
 8001a52:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001a54:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a58:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a62:	2300      	movs	r3, #0
 8001a64:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001a66:	1d3b      	adds	r3, r7, #4
 8001a68:	4619      	mov	r1, r3
 8001a6a:	4807      	ldr	r0, [pc, #28]	; (8001a88 <MX_TIM1_Init+0x138>)
 8001a6c:	f004 fa30 	bl	8005ed0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8001a76:	f7ff fe1b 	bl	80016b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001a7a:	4803      	ldr	r0, [pc, #12]	; (8001a88 <MX_TIM1_Init+0x138>)
 8001a7c:	f000 f828 	bl	8001ad0 <HAL_TIM_MspPostInit>

}
 8001a80:	bf00      	nop
 8001a82:	3760      	adds	r7, #96	; 0x60
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	20000438 	.word	0x20000438
 8001a8c:	40012c00 	.word	0x40012c00

08001a90 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b085      	sub	sp, #20
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a0a      	ldr	r2, [pc, #40]	; (8001ac8 <HAL_TIM_PWM_MspInit+0x38>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d10b      	bne.n	8001aba <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001aa2:	4b0a      	ldr	r3, [pc, #40]	; (8001acc <HAL_TIM_PWM_MspInit+0x3c>)
 8001aa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aa6:	4a09      	ldr	r2, [pc, #36]	; (8001acc <HAL_TIM_PWM_MspInit+0x3c>)
 8001aa8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001aac:	6613      	str	r3, [r2, #96]	; 0x60
 8001aae:	4b07      	ldr	r3, [pc, #28]	; (8001acc <HAL_TIM_PWM_MspInit+0x3c>)
 8001ab0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ab2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ab6:	60fb      	str	r3, [r7, #12]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001aba:	bf00      	nop
 8001abc:	3714      	adds	r7, #20
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	40012c00 	.word	0x40012c00
 8001acc:	40021000 	.word	0x40021000

08001ad0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b088      	sub	sp, #32
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad8:	f107 030c 	add.w	r3, r7, #12
 8001adc:	2200      	movs	r2, #0
 8001ade:	601a      	str	r2, [r3, #0]
 8001ae0:	605a      	str	r2, [r3, #4]
 8001ae2:	609a      	str	r2, [r3, #8]
 8001ae4:	60da      	str	r2, [r3, #12]
 8001ae6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a12      	ldr	r2, [pc, #72]	; (8001b38 <HAL_TIM_MspPostInit+0x68>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d11d      	bne.n	8001b2e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001af2:	4b12      	ldr	r3, [pc, #72]	; (8001b3c <HAL_TIM_MspPostInit+0x6c>)
 8001af4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001af6:	4a11      	ldr	r2, [pc, #68]	; (8001b3c <HAL_TIM_MspPostInit+0x6c>)
 8001af8:	f043 0301 	orr.w	r3, r3, #1
 8001afc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001afe:	4b0f      	ldr	r3, [pc, #60]	; (8001b3c <HAL_TIM_MspPostInit+0x6c>)
 8001b00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b02:	f003 0301 	and.w	r3, r3, #1
 8001b06:	60bb      	str	r3, [r7, #8]
 8001b08:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA11     ------> TIM1_CH1N
    PA12     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_12;
 8001b0a:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
 8001b0e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b10:	2302      	movs	r3, #2
 8001b12:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b14:	2300      	movs	r3, #0
 8001b16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001b1c:	2306      	movs	r3, #6
 8001b1e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b20:	f107 030c 	add.w	r3, r7, #12
 8001b24:	4619      	mov	r1, r3
 8001b26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b2a:	f002 f80f 	bl	8003b4c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001b2e:	bf00      	nop
 8001b30:	3720      	adds	r7, #32
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	40012c00 	.word	0x40012c00
 8001b3c:	40021000 	.word	0x40021000

08001b40 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b44:	4b22      	ldr	r3, [pc, #136]	; (8001bd0 <MX_USART2_UART_Init+0x90>)
 8001b46:	4a23      	ldr	r2, [pc, #140]	; (8001bd4 <MX_USART2_UART_Init+0x94>)
 8001b48:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b4a:	4b21      	ldr	r3, [pc, #132]	; (8001bd0 <MX_USART2_UART_Init+0x90>)
 8001b4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b50:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b52:	4b1f      	ldr	r3, [pc, #124]	; (8001bd0 <MX_USART2_UART_Init+0x90>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b58:	4b1d      	ldr	r3, [pc, #116]	; (8001bd0 <MX_USART2_UART_Init+0x90>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b5e:	4b1c      	ldr	r3, [pc, #112]	; (8001bd0 <MX_USART2_UART_Init+0x90>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b64:	4b1a      	ldr	r3, [pc, #104]	; (8001bd0 <MX_USART2_UART_Init+0x90>)
 8001b66:	220c      	movs	r2, #12
 8001b68:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b6a:	4b19      	ldr	r3, [pc, #100]	; (8001bd0 <MX_USART2_UART_Init+0x90>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b70:	4b17      	ldr	r3, [pc, #92]	; (8001bd0 <MX_USART2_UART_Init+0x90>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b76:	4b16      	ldr	r3, [pc, #88]	; (8001bd0 <MX_USART2_UART_Init+0x90>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001b7c:	4b14      	ldr	r3, [pc, #80]	; (8001bd0 <MX_USART2_UART_Init+0x90>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b82:	4b13      	ldr	r3, [pc, #76]	; (8001bd0 <MX_USART2_UART_Init+0x90>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b88:	4811      	ldr	r0, [pc, #68]	; (8001bd0 <MX_USART2_UART_Init+0x90>)
 8001b8a:	f004 fa78 	bl	800607e <HAL_UART_Init>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d001      	beq.n	8001b98 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001b94:	f7ff fd8c 	bl	80016b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b98:	2100      	movs	r1, #0
 8001b9a:	480d      	ldr	r0, [pc, #52]	; (8001bd0 <MX_USART2_UART_Init+0x90>)
 8001b9c:	f006 fa1b 	bl	8007fd6 <HAL_UARTEx_SetTxFifoThreshold>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d001      	beq.n	8001baa <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001ba6:	f7ff fd83 	bl	80016b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001baa:	2100      	movs	r1, #0
 8001bac:	4808      	ldr	r0, [pc, #32]	; (8001bd0 <MX_USART2_UART_Init+0x90>)
 8001bae:	f006 fa50 	bl	8008052 <HAL_UARTEx_SetRxFifoThreshold>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d001      	beq.n	8001bbc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001bb8:	f7ff fd7a 	bl	80016b0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001bbc:	4804      	ldr	r0, [pc, #16]	; (8001bd0 <MX_USART2_UART_Init+0x90>)
 8001bbe:	f006 f9d1 	bl	8007f64 <HAL_UARTEx_DisableFifoMode>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d001      	beq.n	8001bcc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001bc8:	f7ff fd72 	bl	80016b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001bcc:	bf00      	nop
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	20000484 	.word	0x20000484
 8001bd4:	40004400 	.word	0x40004400

08001bd8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b09e      	sub	sp, #120	; 0x78
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001be4:	2200      	movs	r2, #0
 8001be6:	601a      	str	r2, [r3, #0]
 8001be8:	605a      	str	r2, [r3, #4]
 8001bea:	609a      	str	r2, [r3, #8]
 8001bec:	60da      	str	r2, [r3, #12]
 8001bee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001bf0:	f107 0310 	add.w	r3, r7, #16
 8001bf4:	2254      	movs	r2, #84	; 0x54
 8001bf6:	2100      	movs	r1, #0
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f006 fae5 	bl	80081c8 <memset>
  if(uartHandle->Instance==USART2)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a23      	ldr	r2, [pc, #140]	; (8001c90 <HAL_UART_MspInit+0xb8>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d13e      	bne.n	8001c86 <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001c08:	2302      	movs	r3, #2
 8001c0a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c10:	f107 0310 	add.w	r3, r7, #16
 8001c14:	4618      	mov	r0, r3
 8001c16:	f002 ff3f 	bl	8004a98 <HAL_RCCEx_PeriphCLKConfig>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d001      	beq.n	8001c24 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001c20:	f7ff fd46 	bl	80016b0 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c24:	4b1b      	ldr	r3, [pc, #108]	; (8001c94 <HAL_UART_MspInit+0xbc>)
 8001c26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c28:	4a1a      	ldr	r2, [pc, #104]	; (8001c94 <HAL_UART_MspInit+0xbc>)
 8001c2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c2e:	6593      	str	r3, [r2, #88]	; 0x58
 8001c30:	4b18      	ldr	r3, [pc, #96]	; (8001c94 <HAL_UART_MspInit+0xbc>)
 8001c32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c38:	60fb      	str	r3, [r7, #12]
 8001c3a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c3c:	4b15      	ldr	r3, [pc, #84]	; (8001c94 <HAL_UART_MspInit+0xbc>)
 8001c3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c40:	4a14      	ldr	r2, [pc, #80]	; (8001c94 <HAL_UART_MspInit+0xbc>)
 8001c42:	f043 0301 	orr.w	r3, r3, #1
 8001c46:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c48:	4b12      	ldr	r3, [pc, #72]	; (8001c94 <HAL_UART_MspInit+0xbc>)
 8001c4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c4c:	f003 0301 	and.w	r3, r3, #1
 8001c50:	60bb      	str	r3, [r7, #8]
 8001c52:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001c54:	230c      	movs	r3, #12
 8001c56:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c58:	2302      	movs	r3, #2
 8001c5a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c60:	2300      	movs	r3, #0
 8001c62:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c64:	2307      	movs	r3, #7
 8001c66:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c68:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c72:	f001 ff6b 	bl	8003b4c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001c76:	2200      	movs	r2, #0
 8001c78:	2100      	movs	r1, #0
 8001c7a:	2026      	movs	r0, #38	; 0x26
 8001c7c:	f001 fe71 	bl	8003962 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001c80:	2026      	movs	r0, #38	; 0x26
 8001c82:	f001 fe88 	bl	8003996 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001c86:	bf00      	nop
 8001c88:	3778      	adds	r7, #120	; 0x78
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	40004400 	.word	0x40004400
 8001c94:	40021000 	.word	0x40021000

08001c98 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001c98:	480d      	ldr	r0, [pc, #52]	; (8001cd0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001c9a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c9c:	480d      	ldr	r0, [pc, #52]	; (8001cd4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001c9e:	490e      	ldr	r1, [pc, #56]	; (8001cd8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ca0:	4a0e      	ldr	r2, [pc, #56]	; (8001cdc <LoopForever+0xe>)
  movs r3, #0
 8001ca2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001ca4:	e002      	b.n	8001cac <LoopCopyDataInit>

08001ca6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ca6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ca8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001caa:	3304      	adds	r3, #4

08001cac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cb0:	d3f9      	bcc.n	8001ca6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cb2:	4a0b      	ldr	r2, [pc, #44]	; (8001ce0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001cb4:	4c0b      	ldr	r4, [pc, #44]	; (8001ce4 <LoopForever+0x16>)
  movs r3, #0
 8001cb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cb8:	e001      	b.n	8001cbe <LoopFillZerobss>

08001cba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cbc:	3204      	adds	r2, #4

08001cbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cc0:	d3fb      	bcc.n	8001cba <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001cc2:	f7ff fe33 	bl	800192c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001cc6:	f006 fa5b 	bl	8008180 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001cca:	f7ff fa69 	bl	80011a0 <main>

08001cce <LoopForever>:

LoopForever:
    b LoopForever
 8001cce:	e7fe      	b.n	8001cce <LoopForever>
  ldr   r0, =_estack
 8001cd0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001cd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cd8:	200002f8 	.word	0x200002f8
  ldr r2, =_sidata
 8001cdc:	0800b6dc 	.word	0x0800b6dc
  ldr r2, =_sbss
 8001ce0:	200002f8 	.word	0x200002f8
  ldr r4, =_ebss
 8001ce4:	20000528 	.word	0x20000528

08001ce8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ce8:	e7fe      	b.n	8001ce8 <ADC1_2_IRQHandler>

08001cea <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cea:	b580      	push	{r7, lr}
 8001cec:	b082      	sub	sp, #8
 8001cee:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cf4:	2003      	movs	r0, #3
 8001cf6:	f001 fe29 	bl	800394c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001cfa:	2000      	movs	r0, #0
 8001cfc:	f000 f80e 	bl	8001d1c <HAL_InitTick>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d002      	beq.n	8001d0c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	71fb      	strb	r3, [r7, #7]
 8001d0a:	e001      	b.n	8001d10 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d0c:	f7ff fcd6 	bl	80016bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d10:	79fb      	ldrb	r3, [r7, #7]

}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3708      	adds	r7, #8
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
	...

08001d1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d24:	2300      	movs	r3, #0
 8001d26:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001d28:	4b16      	ldr	r3, [pc, #88]	; (8001d84 <HAL_InitTick+0x68>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d022      	beq.n	8001d76 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001d30:	4b15      	ldr	r3, [pc, #84]	; (8001d88 <HAL_InitTick+0x6c>)
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	4b13      	ldr	r3, [pc, #76]	; (8001d84 <HAL_InitTick+0x68>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001d3c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d40:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d44:	4618      	mov	r0, r3
 8001d46:	f001 fe34 	bl	80039b2 <HAL_SYSTICK_Config>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d10f      	bne.n	8001d70 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2b0f      	cmp	r3, #15
 8001d54:	d809      	bhi.n	8001d6a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d56:	2200      	movs	r2, #0
 8001d58:	6879      	ldr	r1, [r7, #4]
 8001d5a:	f04f 30ff 	mov.w	r0, #4294967295
 8001d5e:	f001 fe00 	bl	8003962 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d62:	4a0a      	ldr	r2, [pc, #40]	; (8001d8c <HAL_InitTick+0x70>)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6013      	str	r3, [r2, #0]
 8001d68:	e007      	b.n	8001d7a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	73fb      	strb	r3, [r7, #15]
 8001d6e:	e004      	b.n	8001d7a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	73fb      	strb	r3, [r7, #15]
 8001d74:	e001      	b.n	8001d7a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001d7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3710      	adds	r7, #16
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	20000124 	.word	0x20000124
 8001d88:	2000011c 	.word	0x2000011c
 8001d8c:	20000120 	.word	0x20000120

08001d90 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d94:	4b05      	ldr	r3, [pc, #20]	; (8001dac <HAL_IncTick+0x1c>)
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	4b05      	ldr	r3, [pc, #20]	; (8001db0 <HAL_IncTick+0x20>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4413      	add	r3, r2
 8001d9e:	4a03      	ldr	r2, [pc, #12]	; (8001dac <HAL_IncTick+0x1c>)
 8001da0:	6013      	str	r3, [r2, #0]
}
 8001da2:	bf00      	nop
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr
 8001dac:	20000514 	.word	0x20000514
 8001db0:	20000124 	.word	0x20000124

08001db4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
  return uwTick;
 8001db8:	4b03      	ldr	r3, [pc, #12]	; (8001dc8 <HAL_GetTick+0x14>)
 8001dba:	681b      	ldr	r3, [r3, #0]
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	20000514 	.word	0x20000514

08001dcc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001dd4:	f7ff ffee 	bl	8001db4 <HAL_GetTick>
 8001dd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001de4:	d004      	beq.n	8001df0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001de6:	4b09      	ldr	r3, [pc, #36]	; (8001e0c <HAL_Delay+0x40>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	68fa      	ldr	r2, [r7, #12]
 8001dec:	4413      	add	r3, r2
 8001dee:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001df0:	bf00      	nop
 8001df2:	f7ff ffdf 	bl	8001db4 <HAL_GetTick>
 8001df6:	4602      	mov	r2, r0
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	68fa      	ldr	r2, [r7, #12]
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	d8f7      	bhi.n	8001df2 <HAL_Delay+0x26>
  {
  }
}
 8001e02:	bf00      	nop
 8001e04:	bf00      	nop
 8001e06:	3710      	adds	r7, #16
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	20000124 	.word	0x20000124

08001e10 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	431a      	orrs	r2, r3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	609a      	str	r2, [r3, #8]
}
 8001e2a:	bf00      	nop
 8001e2c:	370c      	adds	r7, #12
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr

08001e36 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001e36:	b480      	push	{r7}
 8001e38:	b083      	sub	sp, #12
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	6078      	str	r0, [r7, #4]
 8001e3e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	431a      	orrs	r2, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	609a      	str	r2, [r3, #8]
}
 8001e50:	bf00      	nop
 8001e52:	370c      	adds	r7, #12
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr

08001e5c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	370c      	adds	r7, #12
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr

08001e78 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b087      	sub	sp, #28
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	60f8      	str	r0, [r7, #12]
 8001e80:	60b9      	str	r1, [r7, #8]
 8001e82:	607a      	str	r2, [r7, #4]
 8001e84:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	3360      	adds	r3, #96	; 0x60
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	4413      	add	r3, r2
 8001e92:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	4b08      	ldr	r3, [pc, #32]	; (8001ebc <LL_ADC_SetOffset+0x44>)
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	687a      	ldr	r2, [r7, #4]
 8001e9e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001ea2:	683a      	ldr	r2, [r7, #0]
 8001ea4:	430a      	orrs	r2, r1
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001eb0:	bf00      	nop
 8001eb2:	371c      	adds	r7, #28
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr
 8001ebc:	03fff000 	.word	0x03fff000

08001ec0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b085      	sub	sp, #20
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	3360      	adds	r3, #96	; 0x60
 8001ece:	461a      	mov	r2, r3
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	4413      	add	r3, r2
 8001ed6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3714      	adds	r7, #20
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr

08001eec <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b087      	sub	sp, #28
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	60f8      	str	r0, [r7, #12]
 8001ef4:	60b9      	str	r1, [r7, #8]
 8001ef6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	3360      	adds	r3, #96	; 0x60
 8001efc:	461a      	mov	r2, r3
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	009b      	lsls	r3, r3, #2
 8001f02:	4413      	add	r3, r2
 8001f04:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	431a      	orrs	r2, r3
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001f16:	bf00      	nop
 8001f18:	371c      	adds	r7, #28
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr

08001f22 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001f22:	b480      	push	{r7}
 8001f24:	b087      	sub	sp, #28
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	60f8      	str	r0, [r7, #12]
 8001f2a:	60b9      	str	r1, [r7, #8]
 8001f2c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	3360      	adds	r3, #96	; 0x60
 8001f32:	461a      	mov	r2, r3
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	4413      	add	r3, r2
 8001f3a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	431a      	orrs	r2, r3
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001f4c:	bf00      	nop
 8001f4e:	371c      	adds	r7, #28
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr

08001f58 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b087      	sub	sp, #28
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	60f8      	str	r0, [r7, #12]
 8001f60:	60b9      	str	r1, [r7, #8]
 8001f62:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	3360      	adds	r3, #96	; 0x60
 8001f68:	461a      	mov	r2, r3
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	4413      	add	r3, r2
 8001f70:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	431a      	orrs	r2, r3
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001f82:	bf00      	nop
 8001f84:	371c      	adds	r7, #28
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr

08001f8e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001f8e:	b480      	push	{r7}
 8001f90:	b083      	sub	sp, #12
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	6078      	str	r0, [r7, #4]
 8001f96:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	695b      	ldr	r3, [r3, #20]
 8001f9c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	431a      	orrs	r2, r3
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	615a      	str	r2, [r3, #20]
}
 8001fa8:	bf00      	nop
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d101      	bne.n	8001fcc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e000      	b.n	8001fce <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001fcc:	2300      	movs	r3, #0
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	370c      	adds	r7, #12
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr

08001fda <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001fda:	b480      	push	{r7}
 8001fdc:	b087      	sub	sp, #28
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	60f8      	str	r0, [r7, #12]
 8001fe2:	60b9      	str	r1, [r7, #8]
 8001fe4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	3330      	adds	r3, #48	; 0x30
 8001fea:	461a      	mov	r2, r3
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	0a1b      	lsrs	r3, r3, #8
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	f003 030c 	and.w	r3, r3, #12
 8001ff6:	4413      	add	r3, r2
 8001ff8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	f003 031f 	and.w	r3, r3, #31
 8002004:	211f      	movs	r1, #31
 8002006:	fa01 f303 	lsl.w	r3, r1, r3
 800200a:	43db      	mvns	r3, r3
 800200c:	401a      	ands	r2, r3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	0e9b      	lsrs	r3, r3, #26
 8002012:	f003 011f 	and.w	r1, r3, #31
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	f003 031f 	and.w	r3, r3, #31
 800201c:	fa01 f303 	lsl.w	r3, r1, r3
 8002020:	431a      	orrs	r2, r3
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002026:	bf00      	nop
 8002028:	371c      	adds	r7, #28
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr

08002032 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002032:	b480      	push	{r7}
 8002034:	b087      	sub	sp, #28
 8002036:	af00      	add	r7, sp, #0
 8002038:	60f8      	str	r0, [r7, #12]
 800203a:	60b9      	str	r1, [r7, #8]
 800203c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	3314      	adds	r3, #20
 8002042:	461a      	mov	r2, r3
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	0e5b      	lsrs	r3, r3, #25
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	f003 0304 	and.w	r3, r3, #4
 800204e:	4413      	add	r3, r2
 8002050:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	0d1b      	lsrs	r3, r3, #20
 800205a:	f003 031f 	and.w	r3, r3, #31
 800205e:	2107      	movs	r1, #7
 8002060:	fa01 f303 	lsl.w	r3, r1, r3
 8002064:	43db      	mvns	r3, r3
 8002066:	401a      	ands	r2, r3
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	0d1b      	lsrs	r3, r3, #20
 800206c:	f003 031f 	and.w	r3, r3, #31
 8002070:	6879      	ldr	r1, [r7, #4]
 8002072:	fa01 f303 	lsl.w	r3, r1, r3
 8002076:	431a      	orrs	r2, r3
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800207c:	bf00      	nop
 800207e:	371c      	adds	r7, #28
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr

08002088 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002088:	b480      	push	{r7}
 800208a:	b085      	sub	sp, #20
 800208c:	af00      	add	r7, sp, #0
 800208e:	60f8      	str	r0, [r7, #12]
 8002090:	60b9      	str	r1, [r7, #8]
 8002092:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	4a0f      	ldr	r2, [pc, #60]	; (80020d4 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d10a      	bne.n	80020b2 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020a8:	431a      	orrs	r2, r3
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 80020b0:	e00a      	b.n	80020c8 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020be:	43db      	mvns	r3, r3
 80020c0:	401a      	ands	r2, r3
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 80020c8:	bf00      	nop
 80020ca:	3714      	adds	r7, #20
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr
 80020d4:	407f0000 	.word	0x407f0000

080020d8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	f003 031f 	and.w	r3, r3, #31
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	370c      	adds	r7, #12
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr

080020f4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002104:	4618      	mov	r0, r3
 8002106:	370c      	adds	r7, #12
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr

08002110 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002120:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002124:	687a      	ldr	r2, [r7, #4]
 8002126:	6093      	str	r3, [r2, #8]
}
 8002128:	bf00      	nop
 800212a:	370c      	adds	r7, #12
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002144:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002148:	d101      	bne.n	800214e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800214a:	2301      	movs	r3, #1
 800214c:	e000      	b.n	8002150 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800214e:	2300      	movs	r3, #0
}
 8002150:	4618      	mov	r0, r3
 8002152:	370c      	adds	r7, #12
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr

0800215c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800216c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002170:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002178:	bf00      	nop
 800217a:	370c      	adds	r7, #12
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr

08002184 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002194:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002198:	d101      	bne.n	800219e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800219a:	2301      	movs	r3, #1
 800219c:	e000      	b.n	80021a0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800219e:	2300      	movs	r3, #0
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	370c      	adds	r7, #12
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr

080021ac <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80021bc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80021c0:	f043 0201 	orr.w	r2, r3, #1
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80021c8:	bf00      	nop
 80021ca:	370c      	adds	r7, #12
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr

080021d4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80021e4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80021e8:	f043 0202 	orr.w	r2, r3, #2
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80021f0:	bf00      	nop
 80021f2:	370c      	adds	r7, #12
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr

080021fc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	f003 0301 	and.w	r3, r3, #1
 800220c:	2b01      	cmp	r3, #1
 800220e:	d101      	bne.n	8002214 <LL_ADC_IsEnabled+0x18>
 8002210:	2301      	movs	r3, #1
 8002212:	e000      	b.n	8002216 <LL_ADC_IsEnabled+0x1a>
 8002214:	2300      	movs	r3, #0
}
 8002216:	4618      	mov	r0, r3
 8002218:	370c      	adds	r7, #12
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr

08002222 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002222:	b480      	push	{r7}
 8002224:	b083      	sub	sp, #12
 8002226:	af00      	add	r7, sp, #0
 8002228:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	f003 0302 	and.w	r3, r3, #2
 8002232:	2b02      	cmp	r3, #2
 8002234:	d101      	bne.n	800223a <LL_ADC_IsDisableOngoing+0x18>
 8002236:	2301      	movs	r3, #1
 8002238:	e000      	b.n	800223c <LL_ADC_IsDisableOngoing+0x1a>
 800223a:	2300      	movs	r3, #0
}
 800223c:	4618      	mov	r0, r3
 800223e:	370c      	adds	r7, #12
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr

08002248 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002258:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800225c:	f043 0204 	orr.w	r2, r3, #4
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002264:	bf00      	nop
 8002266:	370c      	adds	r7, #12
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr

08002270 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	f003 0304 	and.w	r3, r3, #4
 8002280:	2b04      	cmp	r3, #4
 8002282:	d101      	bne.n	8002288 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002284:	2301      	movs	r3, #1
 8002286:	e000      	b.n	800228a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002288:	2300      	movs	r3, #0
}
 800228a:	4618      	mov	r0, r3
 800228c:	370c      	adds	r7, #12
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr

08002296 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002296:	b480      	push	{r7}
 8002298:	b083      	sub	sp, #12
 800229a:	af00      	add	r7, sp, #0
 800229c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	f003 0308 	and.w	r3, r3, #8
 80022a6:	2b08      	cmp	r3, #8
 80022a8:	d101      	bne.n	80022ae <LL_ADC_INJ_IsConversionOngoing+0x18>
 80022aa:	2301      	movs	r3, #1
 80022ac:	e000      	b.n	80022b0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80022ae:	2300      	movs	r3, #0
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	370c      	adds	r7, #12
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr

080022bc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80022bc:	b590      	push	{r4, r7, lr}
 80022be:	b089      	sub	sp, #36	; 0x24
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022c4:	2300      	movs	r3, #0
 80022c6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80022c8:	2300      	movs	r3, #0
 80022ca:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d101      	bne.n	80022d6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e1af      	b.n	8002636 <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	695b      	ldr	r3, [r3, #20]
 80022da:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d109      	bne.n	80022f8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80022e4:	6878      	ldr	r0, [r7, #4]
 80022e6:	f7fe fe91 	bl	800100c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2200      	movs	r2, #0
 80022ee:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2200      	movs	r2, #0
 80022f4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4618      	mov	r0, r3
 80022fe:	f7ff ff19 	bl	8002134 <LL_ADC_IsDeepPowerDownEnabled>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d004      	beq.n	8002312 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4618      	mov	r0, r3
 800230e:	f7ff feff 	bl	8002110 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4618      	mov	r0, r3
 8002318:	f7ff ff34 	bl	8002184 <LL_ADC_IsInternalRegulatorEnabled>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d115      	bne.n	800234e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4618      	mov	r0, r3
 8002328:	f7ff ff18 	bl	800215c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800232c:	4b9f      	ldr	r3, [pc, #636]	; (80025ac <HAL_ADC_Init+0x2f0>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	099b      	lsrs	r3, r3, #6
 8002332:	4a9f      	ldr	r2, [pc, #636]	; (80025b0 <HAL_ADC_Init+0x2f4>)
 8002334:	fba2 2303 	umull	r2, r3, r2, r3
 8002338:	099b      	lsrs	r3, r3, #6
 800233a:	3301      	adds	r3, #1
 800233c:	005b      	lsls	r3, r3, #1
 800233e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002340:	e002      	b.n	8002348 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	3b01      	subs	r3, #1
 8002346:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d1f9      	bne.n	8002342 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4618      	mov	r0, r3
 8002354:	f7ff ff16 	bl	8002184 <LL_ADC_IsInternalRegulatorEnabled>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d10d      	bne.n	800237a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002362:	f043 0210 	orr.w	r2, r3, #16
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800236e:	f043 0201 	orr.w	r2, r3, #1
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4618      	mov	r0, r3
 8002380:	f7ff ff76 	bl	8002270 <LL_ADC_REG_IsConversionOngoing>
 8002384:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800238a:	f003 0310 	and.w	r3, r3, #16
 800238e:	2b00      	cmp	r3, #0
 8002390:	f040 8148 	bne.w	8002624 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	2b00      	cmp	r3, #0
 8002398:	f040 8144 	bne.w	8002624 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023a0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80023a4:	f043 0202 	orr.w	r2, r3, #2
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4618      	mov	r0, r3
 80023b2:	f7ff ff23 	bl	80021fc <LL_ADC_IsEnabled>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d141      	bne.n	8002440 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80023c4:	d004      	beq.n	80023d0 <HAL_ADC_Init+0x114>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a7a      	ldr	r2, [pc, #488]	; (80025b4 <HAL_ADC_Init+0x2f8>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d10f      	bne.n	80023f0 <HAL_ADC_Init+0x134>
 80023d0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80023d4:	f7ff ff12 	bl	80021fc <LL_ADC_IsEnabled>
 80023d8:	4604      	mov	r4, r0
 80023da:	4876      	ldr	r0, [pc, #472]	; (80025b4 <HAL_ADC_Init+0x2f8>)
 80023dc:	f7ff ff0e 	bl	80021fc <LL_ADC_IsEnabled>
 80023e0:	4603      	mov	r3, r0
 80023e2:	4323      	orrs	r3, r4
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	bf0c      	ite	eq
 80023e8:	2301      	moveq	r3, #1
 80023ea:	2300      	movne	r3, #0
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	e012      	b.n	8002416 <HAL_ADC_Init+0x15a>
 80023f0:	4871      	ldr	r0, [pc, #452]	; (80025b8 <HAL_ADC_Init+0x2fc>)
 80023f2:	f7ff ff03 	bl	80021fc <LL_ADC_IsEnabled>
 80023f6:	4604      	mov	r4, r0
 80023f8:	4870      	ldr	r0, [pc, #448]	; (80025bc <HAL_ADC_Init+0x300>)
 80023fa:	f7ff feff 	bl	80021fc <LL_ADC_IsEnabled>
 80023fe:	4603      	mov	r3, r0
 8002400:	431c      	orrs	r4, r3
 8002402:	486f      	ldr	r0, [pc, #444]	; (80025c0 <HAL_ADC_Init+0x304>)
 8002404:	f7ff fefa 	bl	80021fc <LL_ADC_IsEnabled>
 8002408:	4603      	mov	r3, r0
 800240a:	4323      	orrs	r3, r4
 800240c:	2b00      	cmp	r3, #0
 800240e:	bf0c      	ite	eq
 8002410:	2301      	moveq	r3, #1
 8002412:	2300      	movne	r3, #0
 8002414:	b2db      	uxtb	r3, r3
 8002416:	2b00      	cmp	r3, #0
 8002418:	d012      	beq.n	8002440 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002422:	d004      	beq.n	800242e <HAL_ADC_Init+0x172>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a62      	ldr	r2, [pc, #392]	; (80025b4 <HAL_ADC_Init+0x2f8>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d101      	bne.n	8002432 <HAL_ADC_Init+0x176>
 800242e:	4a65      	ldr	r2, [pc, #404]	; (80025c4 <HAL_ADC_Init+0x308>)
 8002430:	e000      	b.n	8002434 <HAL_ADC_Init+0x178>
 8002432:	4a65      	ldr	r2, [pc, #404]	; (80025c8 <HAL_ADC_Init+0x30c>)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	4619      	mov	r1, r3
 800243a:	4610      	mov	r0, r2
 800243c:	f7ff fce8 	bl	8001e10 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	7f5b      	ldrb	r3, [r3, #29]
 8002444:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800244a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002450:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002456:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800245e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002460:	4313      	orrs	r3, r2
 8002462:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800246a:	2b01      	cmp	r3, #1
 800246c:	d106      	bne.n	800247c <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002472:	3b01      	subs	r3, #1
 8002474:	045b      	lsls	r3, r3, #17
 8002476:	69ba      	ldr	r2, [r7, #24]
 8002478:	4313      	orrs	r3, r2
 800247a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002480:	2b00      	cmp	r3, #0
 8002482:	d009      	beq.n	8002498 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002488:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002490:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002492:	69ba      	ldr	r2, [r7, #24]
 8002494:	4313      	orrs	r3, r2
 8002496:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	68da      	ldr	r2, [r3, #12]
 800249e:	4b4b      	ldr	r3, [pc, #300]	; (80025cc <HAL_ADC_Init+0x310>)
 80024a0:	4013      	ands	r3, r2
 80024a2:	687a      	ldr	r2, [r7, #4]
 80024a4:	6812      	ldr	r2, [r2, #0]
 80024a6:	69b9      	ldr	r1, [r7, #24]
 80024a8:	430b      	orrs	r3, r1
 80024aa:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	691b      	ldr	r3, [r3, #16]
 80024b2:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	430a      	orrs	r2, r1
 80024c0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7ff fed2 	bl	8002270 <LL_ADC_REG_IsConversionOngoing>
 80024cc:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7ff fedf 	bl	8002296 <LL_ADC_INJ_IsConversionOngoing>
 80024d8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d17f      	bne.n	80025e0 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d17c      	bne.n	80025e0 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80024ea:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80024f2:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80024f4:	4313      	orrs	r3, r2
 80024f6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002502:	f023 0302 	bic.w	r3, r3, #2
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	6812      	ldr	r2, [r2, #0]
 800250a:	69b9      	ldr	r1, [r7, #24]
 800250c:	430b      	orrs	r3, r1
 800250e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	691b      	ldr	r3, [r3, #16]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d017      	beq.n	8002548 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	691a      	ldr	r2, [r3, #16]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002526:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002530:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002534:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002538:	687a      	ldr	r2, [r7, #4]
 800253a:	6911      	ldr	r1, [r2, #16]
 800253c:	687a      	ldr	r2, [r7, #4]
 800253e:	6812      	ldr	r2, [r2, #0]
 8002540:	430b      	orrs	r3, r1
 8002542:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002546:	e013      	b.n	8002570 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	691a      	ldr	r2, [r3, #16]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002556:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	6812      	ldr	r2, [r2, #0]
 8002564:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002568:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800256c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002576:	2b01      	cmp	r3, #1
 8002578:	d12a      	bne.n	80025d0 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	691b      	ldr	r3, [r3, #16]
 8002580:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002584:	f023 0304 	bic.w	r3, r3, #4
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002590:	4311      	orrs	r1, r2
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002596:	4311      	orrs	r1, r2
 8002598:	687a      	ldr	r2, [r7, #4]
 800259a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800259c:	430a      	orrs	r2, r1
 800259e:	431a      	orrs	r2, r3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f042 0201 	orr.w	r2, r2, #1
 80025a8:	611a      	str	r2, [r3, #16]
 80025aa:	e019      	b.n	80025e0 <HAL_ADC_Init+0x324>
 80025ac:	2000011c 	.word	0x2000011c
 80025b0:	053e2d63 	.word	0x053e2d63
 80025b4:	50000100 	.word	0x50000100
 80025b8:	50000400 	.word	0x50000400
 80025bc:	50000500 	.word	0x50000500
 80025c0:	50000600 	.word	0x50000600
 80025c4:	50000300 	.word	0x50000300
 80025c8:	50000700 	.word	0x50000700
 80025cc:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	691a      	ldr	r2, [r3, #16]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f022 0201 	bic.w	r2, r2, #1
 80025de:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	695b      	ldr	r3, [r3, #20]
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d10c      	bne.n	8002602 <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ee:	f023 010f 	bic.w	r1, r3, #15
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6a1b      	ldr	r3, [r3, #32]
 80025f6:	1e5a      	subs	r2, r3, #1
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	430a      	orrs	r2, r1
 80025fe:	631a      	str	r2, [r3, #48]	; 0x30
 8002600:	e007      	b.n	8002612 <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f022 020f 	bic.w	r2, r2, #15
 8002610:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002616:	f023 0303 	bic.w	r3, r3, #3
 800261a:	f043 0201 	orr.w	r2, r3, #1
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	65da      	str	r2, [r3, #92]	; 0x5c
 8002622:	e007      	b.n	8002634 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002628:	f043 0210 	orr.w	r2, r3, #16
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002634:	7ffb      	ldrb	r3, [r7, #31]
}
 8002636:	4618      	mov	r0, r3
 8002638:	3724      	adds	r7, #36	; 0x24
 800263a:	46bd      	mov	sp, r7
 800263c:	bd90      	pop	{r4, r7, pc}
 800263e:	bf00      	nop

08002640 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b086      	sub	sp, #24
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002650:	d004      	beq.n	800265c <HAL_ADC_Start+0x1c>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a67      	ldr	r2, [pc, #412]	; (80027f4 <HAL_ADC_Start+0x1b4>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d101      	bne.n	8002660 <HAL_ADC_Start+0x20>
 800265c:	4b66      	ldr	r3, [pc, #408]	; (80027f8 <HAL_ADC_Start+0x1b8>)
 800265e:	e000      	b.n	8002662 <HAL_ADC_Start+0x22>
 8002660:	4b66      	ldr	r3, [pc, #408]	; (80027fc <HAL_ADC_Start+0x1bc>)
 8002662:	4618      	mov	r0, r3
 8002664:	f7ff fd38 	bl	80020d8 <LL_ADC_GetMultimode>
 8002668:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4618      	mov	r0, r3
 8002670:	f7ff fdfe 	bl	8002270 <LL_ADC_REG_IsConversionOngoing>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	f040 80b4 	bne.w	80027e4 <HAL_ADC_Start+0x1a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002682:	2b01      	cmp	r3, #1
 8002684:	d101      	bne.n	800268a <HAL_ADC_Start+0x4a>
 8002686:	2302      	movs	r3, #2
 8002688:	e0af      	b.n	80027ea <HAL_ADC_Start+0x1aa>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2201      	movs	r2, #1
 800268e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f000 fe0c 	bl	80032b0 <ADC_Enable>
 8002698:	4603      	mov	r3, r0
 800269a:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800269c:	7dfb      	ldrb	r3, [r7, #23]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	f040 809b 	bne.w	80027da <HAL_ADC_Start+0x19a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026a8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80026ac:	f023 0301 	bic.w	r3, r3, #1
 80026b0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a4d      	ldr	r2, [pc, #308]	; (80027f4 <HAL_ADC_Start+0x1b4>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d009      	beq.n	80026d6 <HAL_ADC_Start+0x96>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a4e      	ldr	r2, [pc, #312]	; (8002800 <HAL_ADC_Start+0x1c0>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d002      	beq.n	80026d2 <HAL_ADC_Start+0x92>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	e003      	b.n	80026da <HAL_ADC_Start+0x9a>
 80026d2:	4b4c      	ldr	r3, [pc, #304]	; (8002804 <HAL_ADC_Start+0x1c4>)
 80026d4:	e001      	b.n	80026da <HAL_ADC_Start+0x9a>
 80026d6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	6812      	ldr	r2, [r2, #0]
 80026de:	4293      	cmp	r3, r2
 80026e0:	d002      	beq.n	80026e8 <HAL_ADC_Start+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d105      	bne.n	80026f4 <HAL_ADC_Start+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026ec:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002700:	d106      	bne.n	8002710 <HAL_ADC_Start+0xd0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002706:	f023 0206 	bic.w	r2, r3, #6
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	661a      	str	r2, [r3, #96]	; 0x60
 800270e:	e002      	b.n	8002716 <HAL_ADC_Start+0xd6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2200      	movs	r2, #0
 8002714:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	221c      	movs	r2, #28
 800271c:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2200      	movs	r2, #0
 8002722:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a32      	ldr	r2, [pc, #200]	; (80027f4 <HAL_ADC_Start+0x1b4>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d009      	beq.n	8002744 <HAL_ADC_Start+0x104>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a32      	ldr	r2, [pc, #200]	; (8002800 <HAL_ADC_Start+0x1c0>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d002      	beq.n	8002740 <HAL_ADC_Start+0x100>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	e003      	b.n	8002748 <HAL_ADC_Start+0x108>
 8002740:	4b30      	ldr	r3, [pc, #192]	; (8002804 <HAL_ADC_Start+0x1c4>)
 8002742:	e001      	b.n	8002748 <HAL_ADC_Start+0x108>
 8002744:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002748:	687a      	ldr	r2, [r7, #4]
 800274a:	6812      	ldr	r2, [r2, #0]
 800274c:	4293      	cmp	r3, r2
 800274e:	d008      	beq.n	8002762 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d005      	beq.n	8002762 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	2b05      	cmp	r3, #5
 800275a:	d002      	beq.n	8002762 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	2b09      	cmp	r3, #9
 8002760:	d114      	bne.n	800278c <HAL_ADC_Start+0x14c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d007      	beq.n	8002780 <HAL_ADC_Start+0x140>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002774:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002778:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4618      	mov	r0, r3
 8002786:	f7ff fd5f 	bl	8002248 <LL_ADC_REG_StartConversion>
 800278a:	e02d      	b.n	80027e8 <HAL_ADC_Start+0x1a8>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002790:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a15      	ldr	r2, [pc, #84]	; (80027f4 <HAL_ADC_Start+0x1b4>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d009      	beq.n	80027b6 <HAL_ADC_Start+0x176>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a16      	ldr	r2, [pc, #88]	; (8002800 <HAL_ADC_Start+0x1c0>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d002      	beq.n	80027b2 <HAL_ADC_Start+0x172>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	e003      	b.n	80027ba <HAL_ADC_Start+0x17a>
 80027b2:	4b14      	ldr	r3, [pc, #80]	; (8002804 <HAL_ADC_Start+0x1c4>)
 80027b4:	e001      	b.n	80027ba <HAL_ADC_Start+0x17a>
 80027b6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80027ba:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d00f      	beq.n	80027e8 <HAL_ADC_Start+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027cc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80027d0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	65da      	str	r2, [r3, #92]	; 0x5c
 80027d8:	e006      	b.n	80027e8 <HAL_ADC_Start+0x1a8>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2200      	movs	r2, #0
 80027de:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80027e2:	e001      	b.n	80027e8 <HAL_ADC_Start+0x1a8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80027e4:	2302      	movs	r3, #2
 80027e6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80027e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3718      	adds	r7, #24
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	50000100 	.word	0x50000100
 80027f8:	50000300 	.word	0x50000300
 80027fc:	50000700 	.word	0x50000700
 8002800:	50000500 	.word	0x50000500
 8002804:	50000400 	.word	0x50000400

08002808 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b088      	sub	sp, #32
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800281a:	d004      	beq.n	8002826 <HAL_ADC_PollForConversion+0x1e>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a77      	ldr	r2, [pc, #476]	; (8002a00 <HAL_ADC_PollForConversion+0x1f8>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d101      	bne.n	800282a <HAL_ADC_PollForConversion+0x22>
 8002826:	4b77      	ldr	r3, [pc, #476]	; (8002a04 <HAL_ADC_PollForConversion+0x1fc>)
 8002828:	e000      	b.n	800282c <HAL_ADC_PollForConversion+0x24>
 800282a:	4b77      	ldr	r3, [pc, #476]	; (8002a08 <HAL_ADC_PollForConversion+0x200>)
 800282c:	4618      	mov	r0, r3
 800282e:	f7ff fc53 	bl	80020d8 <LL_ADC_GetMultimode>
 8002832:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	699b      	ldr	r3, [r3, #24]
 8002838:	2b08      	cmp	r3, #8
 800283a:	d102      	bne.n	8002842 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800283c:	2308      	movs	r3, #8
 800283e:	61fb      	str	r3, [r7, #28]
 8002840:	e037      	b.n	80028b2 <HAL_ADC_PollForConversion+0xaa>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d005      	beq.n	8002854 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	2b05      	cmp	r3, #5
 800284c:	d002      	beq.n	8002854 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	2b09      	cmp	r3, #9
 8002852:	d111      	bne.n	8002878 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	68db      	ldr	r3, [r3, #12]
 800285a:	f003 0301 	and.w	r3, r3, #1
 800285e:	2b00      	cmp	r3, #0
 8002860:	d007      	beq.n	8002872 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002866:	f043 0220 	orr.w	r2, r3, #32
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e0c1      	b.n	80029f6 <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002872:	2304      	movs	r3, #4
 8002874:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002876:	e01c      	b.n	80028b2 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002880:	d004      	beq.n	800288c <HAL_ADC_PollForConversion+0x84>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a5e      	ldr	r2, [pc, #376]	; (8002a00 <HAL_ADC_PollForConversion+0x1f8>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d101      	bne.n	8002890 <HAL_ADC_PollForConversion+0x88>
 800288c:	4b5d      	ldr	r3, [pc, #372]	; (8002a04 <HAL_ADC_PollForConversion+0x1fc>)
 800288e:	e000      	b.n	8002892 <HAL_ADC_PollForConversion+0x8a>
 8002890:	4b5d      	ldr	r3, [pc, #372]	; (8002a08 <HAL_ADC_PollForConversion+0x200>)
 8002892:	4618      	mov	r0, r3
 8002894:	f7ff fc2e 	bl	80020f4 <LL_ADC_GetMultiDMATransfer>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d007      	beq.n	80028ae <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028a2:	f043 0220 	orr.w	r2, r3, #32
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e0a3      	b.n	80029f6 <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80028ae:	2304      	movs	r3, #4
 80028b0:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80028b2:	f7ff fa7f 	bl	8001db4 <HAL_GetTick>
 80028b6:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80028b8:	e021      	b.n	80028fe <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028c0:	d01d      	beq.n	80028fe <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80028c2:	f7ff fa77 	bl	8001db4 <HAL_GetTick>
 80028c6:	4602      	mov	r2, r0
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	1ad3      	subs	r3, r2, r3
 80028cc:	683a      	ldr	r2, [r7, #0]
 80028ce:	429a      	cmp	r2, r3
 80028d0:	d302      	bcc.n	80028d8 <HAL_ADC_PollForConversion+0xd0>
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d112      	bne.n	80028fe <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	4013      	ands	r3, r2
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d10b      	bne.n	80028fe <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028ea:	f043 0204 	orr.w	r2, r3, #4
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2200      	movs	r2, #0
 80028f6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

          return HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	e07b      	b.n	80029f6 <HAL_ADC_PollForConversion+0x1ee>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	4013      	ands	r3, r2
 8002908:	2b00      	cmp	r3, #0
 800290a:	d0d6      	beq.n	80028ba <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002910:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4618      	mov	r0, r3
 800291e:	f7ff fb49 	bl	8001fb4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d01c      	beq.n	8002962 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	7f5b      	ldrb	r3, [r3, #29]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d118      	bne.n	8002962 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0308 	and.w	r3, r3, #8
 800293a:	2b08      	cmp	r3, #8
 800293c:	d111      	bne.n	8002962 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002942:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	65da      	str	r2, [r3, #92]	; 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800294e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002952:	2b00      	cmp	r3, #0
 8002954:	d105      	bne.n	8002962 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800295a:	f043 0201 	orr.w	r2, r3, #1
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a26      	ldr	r2, [pc, #152]	; (8002a00 <HAL_ADC_PollForConversion+0x1f8>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d009      	beq.n	8002980 <HAL_ADC_PollForConversion+0x178>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a26      	ldr	r2, [pc, #152]	; (8002a0c <HAL_ADC_PollForConversion+0x204>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d002      	beq.n	800297c <HAL_ADC_PollForConversion+0x174>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	e003      	b.n	8002984 <HAL_ADC_PollForConversion+0x17c>
 800297c:	4b24      	ldr	r3, [pc, #144]	; (8002a10 <HAL_ADC_PollForConversion+0x208>)
 800297e:	e001      	b.n	8002984 <HAL_ADC_PollForConversion+0x17c>
 8002980:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002984:	687a      	ldr	r2, [r7, #4]
 8002986:	6812      	ldr	r2, [r2, #0]
 8002988:	4293      	cmp	r3, r2
 800298a:	d008      	beq.n	800299e <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d005      	beq.n	800299e <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	2b05      	cmp	r3, #5
 8002996:	d002      	beq.n	800299e <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	2b09      	cmp	r3, #9
 800299c:	d104      	bne.n	80029a8 <HAL_ADC_PollForConversion+0x1a0>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	61bb      	str	r3, [r7, #24]
 80029a6:	e014      	b.n	80029d2 <HAL_ADC_PollForConversion+0x1ca>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a14      	ldr	r2, [pc, #80]	; (8002a00 <HAL_ADC_PollForConversion+0x1f8>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d009      	beq.n	80029c6 <HAL_ADC_PollForConversion+0x1be>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a15      	ldr	r2, [pc, #84]	; (8002a0c <HAL_ADC_PollForConversion+0x204>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d002      	beq.n	80029c2 <HAL_ADC_PollForConversion+0x1ba>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	e003      	b.n	80029ca <HAL_ADC_PollForConversion+0x1c2>
 80029c2:	4b13      	ldr	r3, [pc, #76]	; (8002a10 <HAL_ADC_PollForConversion+0x208>)
 80029c4:	e001      	b.n	80029ca <HAL_ADC_PollForConversion+0x1c2>
 80029c6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80029ca:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	2b08      	cmp	r3, #8
 80029d6:	d104      	bne.n	80029e2 <HAL_ADC_PollForConversion+0x1da>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	2208      	movs	r2, #8
 80029de:	601a      	str	r2, [r3, #0]
 80029e0:	e008      	b.n	80029f4 <HAL_ADC_PollForConversion+0x1ec>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80029e2:	69bb      	ldr	r3, [r7, #24]
 80029e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d103      	bne.n	80029f4 <HAL_ADC_PollForConversion+0x1ec>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	220c      	movs	r2, #12
 80029f2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80029f4:	2300      	movs	r3, #0
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3720      	adds	r7, #32
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	50000100 	.word	0x50000100
 8002a04:	50000300 	.word	0x50000300
 8002a08:	50000700 	.word	0x50000700
 8002a0c:	50000500 	.word	0x50000500
 8002a10:	50000400 	.word	0x50000400

08002a14 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	370c      	adds	r7, #12
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr
	...

08002a30 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b0b6      	sub	sp, #216	; 0xd8
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
 8002a38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002a40:	2300      	movs	r3, #0
 8002a42:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d102      	bne.n	8002a54 <HAL_ADC_ConfigChannel+0x24>
 8002a4e:	2302      	movs	r3, #2
 8002a50:	f000 bc13 	b.w	800327a <HAL_ADC_ConfigChannel+0x84a>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2201      	movs	r2, #1
 8002a58:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4618      	mov	r0, r3
 8002a62:	f7ff fc05 	bl	8002270 <LL_ADC_REG_IsConversionOngoing>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	f040 83f3 	bne.w	8003254 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6818      	ldr	r0, [r3, #0]
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	6859      	ldr	r1, [r3, #4]
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	f7ff faad 	bl	8001fda <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4618      	mov	r0, r3
 8002a86:	f7ff fbf3 	bl	8002270 <LL_ADC_REG_IsConversionOngoing>
 8002a8a:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4618      	mov	r0, r3
 8002a94:	f7ff fbff 	bl	8002296 <LL_ADC_INJ_IsConversionOngoing>
 8002a98:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002a9c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	f040 81d9 	bne.w	8002e58 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002aa6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	f040 81d4 	bne.w	8002e58 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002ab8:	d10f      	bne.n	8002ada <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6818      	ldr	r0, [r3, #0]
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	f7ff fab4 	bl	8002032 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f7ff fa5b 	bl	8001f8e <LL_ADC_SetSamplingTimeCommonConfig>
 8002ad8:	e00e      	b.n	8002af8 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6818      	ldr	r0, [r3, #0]
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	6819      	ldr	r1, [r3, #0]
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	461a      	mov	r2, r3
 8002ae8:	f7ff faa3 	bl	8002032 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2100      	movs	r1, #0
 8002af2:	4618      	mov	r0, r3
 8002af4:	f7ff fa4b 	bl	8001f8e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	695a      	ldr	r2, [r3, #20]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	08db      	lsrs	r3, r3, #3
 8002b04:	f003 0303 	and.w	r3, r3, #3
 8002b08:	005b      	lsls	r3, r3, #1
 8002b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	691b      	ldr	r3, [r3, #16]
 8002b16:	2b04      	cmp	r3, #4
 8002b18:	d022      	beq.n	8002b60 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6818      	ldr	r0, [r3, #0]
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	6919      	ldr	r1, [r3, #16]
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002b2a:	f7ff f9a5 	bl	8001e78 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6818      	ldr	r0, [r3, #0]
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	6919      	ldr	r1, [r3, #16]
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	699b      	ldr	r3, [r3, #24]
 8002b3a:	461a      	mov	r2, r3
 8002b3c:	f7ff f9f1 	bl	8001f22 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6818      	ldr	r0, [r3, #0]
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	6919      	ldr	r1, [r3, #16]
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	7f1b      	ldrb	r3, [r3, #28]
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d102      	bne.n	8002b56 <HAL_ADC_ConfigChannel+0x126>
 8002b50:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b54:	e000      	b.n	8002b58 <HAL_ADC_ConfigChannel+0x128>
 8002b56:	2300      	movs	r3, #0
 8002b58:	461a      	mov	r2, r3
 8002b5a:	f7ff f9fd 	bl	8001f58 <LL_ADC_SetOffsetSaturation>
 8002b5e:	e17b      	b.n	8002e58 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	2100      	movs	r1, #0
 8002b66:	4618      	mov	r0, r3
 8002b68:	f7ff f9aa 	bl	8001ec0 <LL_ADC_GetOffsetChannel>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d10a      	bne.n	8002b8c <HAL_ADC_ConfigChannel+0x15c>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	2100      	movs	r1, #0
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f7ff f99f 	bl	8001ec0 <LL_ADC_GetOffsetChannel>
 8002b82:	4603      	mov	r3, r0
 8002b84:	0e9b      	lsrs	r3, r3, #26
 8002b86:	f003 021f 	and.w	r2, r3, #31
 8002b8a:	e01e      	b.n	8002bca <HAL_ADC_ConfigChannel+0x19a>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	2100      	movs	r1, #0
 8002b92:	4618      	mov	r0, r3
 8002b94:	f7ff f994 	bl	8001ec0 <LL_ADC_GetOffsetChannel>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b9e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002ba2:	fa93 f3a3 	rbit	r3, r3
 8002ba6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002baa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002bae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002bb2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d101      	bne.n	8002bbe <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002bba:	2320      	movs	r3, #32
 8002bbc:	e004      	b.n	8002bc8 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002bbe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002bc2:	fab3 f383 	clz	r3, r3
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d105      	bne.n	8002be2 <HAL_ADC_ConfigChannel+0x1b2>
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	0e9b      	lsrs	r3, r3, #26
 8002bdc:	f003 031f 	and.w	r3, r3, #31
 8002be0:	e018      	b.n	8002c14 <HAL_ADC_ConfigChannel+0x1e4>
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bea:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002bee:	fa93 f3a3 	rbit	r3, r3
 8002bf2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002bf6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002bfa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002bfe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d101      	bne.n	8002c0a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002c06:	2320      	movs	r3, #32
 8002c08:	e004      	b.n	8002c14 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002c0a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002c0e:	fab3 f383 	clz	r3, r3
 8002c12:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d106      	bne.n	8002c26 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	2100      	movs	r1, #0
 8002c20:	4618      	mov	r0, r3
 8002c22:	f7ff f963 	bl	8001eec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	2101      	movs	r1, #1
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f7ff f947 	bl	8001ec0 <LL_ADC_GetOffsetChannel>
 8002c32:	4603      	mov	r3, r0
 8002c34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d10a      	bne.n	8002c52 <HAL_ADC_ConfigChannel+0x222>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	2101      	movs	r1, #1
 8002c42:	4618      	mov	r0, r3
 8002c44:	f7ff f93c 	bl	8001ec0 <LL_ADC_GetOffsetChannel>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	0e9b      	lsrs	r3, r3, #26
 8002c4c:	f003 021f 	and.w	r2, r3, #31
 8002c50:	e01e      	b.n	8002c90 <HAL_ADC_ConfigChannel+0x260>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	2101      	movs	r1, #1
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f7ff f931 	bl	8001ec0 <LL_ADC_GetOffsetChannel>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c64:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002c68:	fa93 f3a3 	rbit	r3, r3
 8002c6c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002c70:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002c74:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002c78:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d101      	bne.n	8002c84 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002c80:	2320      	movs	r3, #32
 8002c82:	e004      	b.n	8002c8e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002c84:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002c88:	fab3 f383 	clz	r3, r3
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d105      	bne.n	8002ca8 <HAL_ADC_ConfigChannel+0x278>
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	0e9b      	lsrs	r3, r3, #26
 8002ca2:	f003 031f 	and.w	r3, r3, #31
 8002ca6:	e018      	b.n	8002cda <HAL_ADC_ConfigChannel+0x2aa>
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cb0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002cb4:	fa93 f3a3 	rbit	r3, r3
 8002cb8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002cbc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002cc0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002cc4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d101      	bne.n	8002cd0 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002ccc:	2320      	movs	r3, #32
 8002cce:	e004      	b.n	8002cda <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002cd0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002cd4:	fab3 f383 	clz	r3, r3
 8002cd8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d106      	bne.n	8002cec <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	2101      	movs	r1, #1
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f7ff f900 	bl	8001eec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2102      	movs	r1, #2
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f7ff f8e4 	bl	8001ec0 <LL_ADC_GetOffsetChannel>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d10a      	bne.n	8002d18 <HAL_ADC_ConfigChannel+0x2e8>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	2102      	movs	r1, #2
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f7ff f8d9 	bl	8001ec0 <LL_ADC_GetOffsetChannel>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	0e9b      	lsrs	r3, r3, #26
 8002d12:	f003 021f 	and.w	r2, r3, #31
 8002d16:	e01e      	b.n	8002d56 <HAL_ADC_ConfigChannel+0x326>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	2102      	movs	r1, #2
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f7ff f8ce 	bl	8001ec0 <LL_ADC_GetOffsetChannel>
 8002d24:	4603      	mov	r3, r0
 8002d26:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d2e:	fa93 f3a3 	rbit	r3, r3
 8002d32:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002d36:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002d3a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002d3e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d101      	bne.n	8002d4a <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002d46:	2320      	movs	r3, #32
 8002d48:	e004      	b.n	8002d54 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002d4a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002d4e:	fab3 f383 	clz	r3, r3
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d105      	bne.n	8002d6e <HAL_ADC_ConfigChannel+0x33e>
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	0e9b      	lsrs	r3, r3, #26
 8002d68:	f003 031f 	and.w	r3, r3, #31
 8002d6c:	e016      	b.n	8002d9c <HAL_ADC_ConfigChannel+0x36c>
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d76:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002d7a:	fa93 f3a3 	rbit	r3, r3
 8002d7e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002d80:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002d82:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002d86:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d101      	bne.n	8002d92 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002d8e:	2320      	movs	r3, #32
 8002d90:	e004      	b.n	8002d9c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002d92:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d96:	fab3 f383 	clz	r3, r3
 8002d9a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d106      	bne.n	8002dae <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	2200      	movs	r2, #0
 8002da6:	2102      	movs	r1, #2
 8002da8:	4618      	mov	r0, r3
 8002daa:	f7ff f89f 	bl	8001eec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	2103      	movs	r1, #3
 8002db4:	4618      	mov	r0, r3
 8002db6:	f7ff f883 	bl	8001ec0 <LL_ADC_GetOffsetChannel>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d10a      	bne.n	8002dda <HAL_ADC_ConfigChannel+0x3aa>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	2103      	movs	r1, #3
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f7ff f878 	bl	8001ec0 <LL_ADC_GetOffsetChannel>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	0e9b      	lsrs	r3, r3, #26
 8002dd4:	f003 021f 	and.w	r2, r3, #31
 8002dd8:	e017      	b.n	8002e0a <HAL_ADC_ConfigChannel+0x3da>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	2103      	movs	r1, #3
 8002de0:	4618      	mov	r0, r3
 8002de2:	f7ff f86d 	bl	8001ec0 <LL_ADC_GetOffsetChannel>
 8002de6:	4603      	mov	r3, r0
 8002de8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002dec:	fa93 f3a3 	rbit	r3, r3
 8002df0:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002df2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002df4:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002df6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d101      	bne.n	8002e00 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002dfc:	2320      	movs	r3, #32
 8002dfe:	e003      	b.n	8002e08 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002e00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e02:	fab3 f383 	clz	r3, r3
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d105      	bne.n	8002e22 <HAL_ADC_ConfigChannel+0x3f2>
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	0e9b      	lsrs	r3, r3, #26
 8002e1c:	f003 031f 	and.w	r3, r3, #31
 8002e20:	e011      	b.n	8002e46 <HAL_ADC_ConfigChannel+0x416>
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e28:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e2a:	fa93 f3a3 	rbit	r3, r3
 8002e2e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002e30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e32:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002e34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d101      	bne.n	8002e3e <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002e3a:	2320      	movs	r3, #32
 8002e3c:	e003      	b.n	8002e46 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002e3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e40:	fab3 f383 	clz	r3, r3
 8002e44:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d106      	bne.n	8002e58 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	2103      	movs	r1, #3
 8002e52:	4618      	mov	r0, r3
 8002e54:	f7ff f84a 	bl	8001eec <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f7ff f9cd 	bl	80021fc <LL_ADC_IsEnabled>
 8002e62:	4603      	mov	r3, r0
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	f040 813d 	bne.w	80030e4 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6818      	ldr	r0, [r3, #0]
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	6819      	ldr	r1, [r3, #0]
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	68db      	ldr	r3, [r3, #12]
 8002e76:	461a      	mov	r2, r3
 8002e78:	f7ff f906 	bl	8002088 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	4aa2      	ldr	r2, [pc, #648]	; (800310c <HAL_ADC_ConfigChannel+0x6dc>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	f040 812e 	bne.w	80030e4 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d10b      	bne.n	8002eb0 <HAL_ADC_ConfigChannel+0x480>
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	0e9b      	lsrs	r3, r3, #26
 8002e9e:	3301      	adds	r3, #1
 8002ea0:	f003 031f 	and.w	r3, r3, #31
 8002ea4:	2b09      	cmp	r3, #9
 8002ea6:	bf94      	ite	ls
 8002ea8:	2301      	movls	r3, #1
 8002eaa:	2300      	movhi	r3, #0
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	e019      	b.n	8002ee4 <HAL_ADC_ConfigChannel+0x4b4>
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002eb8:	fa93 f3a3 	rbit	r3, r3
 8002ebc:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002ebe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ec0:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002ec2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d101      	bne.n	8002ecc <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002ec8:	2320      	movs	r3, #32
 8002eca:	e003      	b.n	8002ed4 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002ecc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ece:	fab3 f383 	clz	r3, r3
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	3301      	adds	r3, #1
 8002ed6:	f003 031f 	and.w	r3, r3, #31
 8002eda:	2b09      	cmp	r3, #9
 8002edc:	bf94      	ite	ls
 8002ede:	2301      	movls	r3, #1
 8002ee0:	2300      	movhi	r3, #0
 8002ee2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d079      	beq.n	8002fdc <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d107      	bne.n	8002f04 <HAL_ADC_ConfigChannel+0x4d4>
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	0e9b      	lsrs	r3, r3, #26
 8002efa:	3301      	adds	r3, #1
 8002efc:	069b      	lsls	r3, r3, #26
 8002efe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f02:	e015      	b.n	8002f30 <HAL_ADC_ConfigChannel+0x500>
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f0c:	fa93 f3a3 	rbit	r3, r3
 8002f10:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002f12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f14:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002f16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d101      	bne.n	8002f20 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002f1c:	2320      	movs	r3, #32
 8002f1e:	e003      	b.n	8002f28 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002f20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f22:	fab3 f383 	clz	r3, r3
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	3301      	adds	r3, #1
 8002f2a:	069b      	lsls	r3, r3, #26
 8002f2c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d109      	bne.n	8002f50 <HAL_ADC_ConfigChannel+0x520>
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	0e9b      	lsrs	r3, r3, #26
 8002f42:	3301      	adds	r3, #1
 8002f44:	f003 031f 	and.w	r3, r3, #31
 8002f48:	2101      	movs	r1, #1
 8002f4a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f4e:	e017      	b.n	8002f80 <HAL_ADC_ConfigChannel+0x550>
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f58:	fa93 f3a3 	rbit	r3, r3
 8002f5c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002f5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f60:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002f62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d101      	bne.n	8002f6c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002f68:	2320      	movs	r3, #32
 8002f6a:	e003      	b.n	8002f74 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002f6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f6e:	fab3 f383 	clz	r3, r3
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	3301      	adds	r3, #1
 8002f76:	f003 031f 	and.w	r3, r3, #31
 8002f7a:	2101      	movs	r1, #1
 8002f7c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f80:	ea42 0103 	orr.w	r1, r2, r3
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d10a      	bne.n	8002fa6 <HAL_ADC_ConfigChannel+0x576>
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	0e9b      	lsrs	r3, r3, #26
 8002f96:	3301      	adds	r3, #1
 8002f98:	f003 021f 	and.w	r2, r3, #31
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	005b      	lsls	r3, r3, #1
 8002fa0:	4413      	add	r3, r2
 8002fa2:	051b      	lsls	r3, r3, #20
 8002fa4:	e018      	b.n	8002fd8 <HAL_ADC_ConfigChannel+0x5a8>
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fae:	fa93 f3a3 	rbit	r3, r3
 8002fb2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002fb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002fb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d101      	bne.n	8002fc2 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002fbe:	2320      	movs	r3, #32
 8002fc0:	e003      	b.n	8002fca <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002fc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fc4:	fab3 f383 	clz	r3, r3
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	3301      	adds	r3, #1
 8002fcc:	f003 021f 	and.w	r2, r3, #31
 8002fd0:	4613      	mov	r3, r2
 8002fd2:	005b      	lsls	r3, r3, #1
 8002fd4:	4413      	add	r3, r2
 8002fd6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002fd8:	430b      	orrs	r3, r1
 8002fda:	e07e      	b.n	80030da <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d107      	bne.n	8002ff8 <HAL_ADC_ConfigChannel+0x5c8>
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	0e9b      	lsrs	r3, r3, #26
 8002fee:	3301      	adds	r3, #1
 8002ff0:	069b      	lsls	r3, r3, #26
 8002ff2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ff6:	e015      	b.n	8003024 <HAL_ADC_ConfigChannel+0x5f4>
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003000:	fa93 f3a3 	rbit	r3, r3
 8003004:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003008:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800300a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800300c:	2b00      	cmp	r3, #0
 800300e:	d101      	bne.n	8003014 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003010:	2320      	movs	r3, #32
 8003012:	e003      	b.n	800301c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003016:	fab3 f383 	clz	r3, r3
 800301a:	b2db      	uxtb	r3, r3
 800301c:	3301      	adds	r3, #1
 800301e:	069b      	lsls	r3, r3, #26
 8003020:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800302c:	2b00      	cmp	r3, #0
 800302e:	d109      	bne.n	8003044 <HAL_ADC_ConfigChannel+0x614>
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	0e9b      	lsrs	r3, r3, #26
 8003036:	3301      	adds	r3, #1
 8003038:	f003 031f 	and.w	r3, r3, #31
 800303c:	2101      	movs	r1, #1
 800303e:	fa01 f303 	lsl.w	r3, r1, r3
 8003042:	e017      	b.n	8003074 <HAL_ADC_ConfigChannel+0x644>
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800304a:	6a3b      	ldr	r3, [r7, #32]
 800304c:	fa93 f3a3 	rbit	r3, r3
 8003050:	61fb      	str	r3, [r7, #28]
  return result;
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003058:	2b00      	cmp	r3, #0
 800305a:	d101      	bne.n	8003060 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 800305c:	2320      	movs	r3, #32
 800305e:	e003      	b.n	8003068 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003062:	fab3 f383 	clz	r3, r3
 8003066:	b2db      	uxtb	r3, r3
 8003068:	3301      	adds	r3, #1
 800306a:	f003 031f 	and.w	r3, r3, #31
 800306e:	2101      	movs	r1, #1
 8003070:	fa01 f303 	lsl.w	r3, r1, r3
 8003074:	ea42 0103 	orr.w	r1, r2, r3
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003080:	2b00      	cmp	r3, #0
 8003082:	d10d      	bne.n	80030a0 <HAL_ADC_ConfigChannel+0x670>
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	0e9b      	lsrs	r3, r3, #26
 800308a:	3301      	adds	r3, #1
 800308c:	f003 021f 	and.w	r2, r3, #31
 8003090:	4613      	mov	r3, r2
 8003092:	005b      	lsls	r3, r3, #1
 8003094:	4413      	add	r3, r2
 8003096:	3b1e      	subs	r3, #30
 8003098:	051b      	lsls	r3, r3, #20
 800309a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800309e:	e01b      	b.n	80030d8 <HAL_ADC_ConfigChannel+0x6a8>
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	fa93 f3a3 	rbit	r3, r3
 80030ac:	613b      	str	r3, [r7, #16]
  return result;
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80030b2:	69bb      	ldr	r3, [r7, #24]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d101      	bne.n	80030bc <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80030b8:	2320      	movs	r3, #32
 80030ba:	e003      	b.n	80030c4 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80030bc:	69bb      	ldr	r3, [r7, #24]
 80030be:	fab3 f383 	clz	r3, r3
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	3301      	adds	r3, #1
 80030c6:	f003 021f 	and.w	r2, r3, #31
 80030ca:	4613      	mov	r3, r2
 80030cc:	005b      	lsls	r3, r3, #1
 80030ce:	4413      	add	r3, r2
 80030d0:	3b1e      	subs	r3, #30
 80030d2:	051b      	lsls	r3, r3, #20
 80030d4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80030d8:	430b      	orrs	r3, r1
 80030da:	683a      	ldr	r2, [r7, #0]
 80030dc:	6892      	ldr	r2, [r2, #8]
 80030de:	4619      	mov	r1, r3
 80030e0:	f7fe ffa7 	bl	8002032 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	4b09      	ldr	r3, [pc, #36]	; (8003110 <HAL_ADC_ConfigChannel+0x6e0>)
 80030ea:	4013      	ands	r3, r2
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	f000 80be 	beq.w	800326e <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030fa:	d004      	beq.n	8003106 <HAL_ADC_ConfigChannel+0x6d6>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a04      	ldr	r2, [pc, #16]	; (8003114 <HAL_ADC_ConfigChannel+0x6e4>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d10a      	bne.n	800311c <HAL_ADC_ConfigChannel+0x6ec>
 8003106:	4b04      	ldr	r3, [pc, #16]	; (8003118 <HAL_ADC_ConfigChannel+0x6e8>)
 8003108:	e009      	b.n	800311e <HAL_ADC_ConfigChannel+0x6ee>
 800310a:	bf00      	nop
 800310c:	407f0000 	.word	0x407f0000
 8003110:	80080000 	.word	0x80080000
 8003114:	50000100 	.word	0x50000100
 8003118:	50000300 	.word	0x50000300
 800311c:	4b59      	ldr	r3, [pc, #356]	; (8003284 <HAL_ADC_ConfigChannel+0x854>)
 800311e:	4618      	mov	r0, r3
 8003120:	f7fe fe9c 	bl	8001e5c <LL_ADC_GetCommonPathInternalCh>
 8003124:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a56      	ldr	r2, [pc, #344]	; (8003288 <HAL_ADC_ConfigChannel+0x858>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d004      	beq.n	800313c <HAL_ADC_ConfigChannel+0x70c>
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a55      	ldr	r2, [pc, #340]	; (800328c <HAL_ADC_ConfigChannel+0x85c>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d13a      	bne.n	80031b2 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800313c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003140:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003144:	2b00      	cmp	r3, #0
 8003146:	d134      	bne.n	80031b2 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003150:	d005      	beq.n	800315e <HAL_ADC_ConfigChannel+0x72e>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a4e      	ldr	r2, [pc, #312]	; (8003290 <HAL_ADC_ConfigChannel+0x860>)
 8003158:	4293      	cmp	r3, r2
 800315a:	f040 8085 	bne.w	8003268 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003166:	d004      	beq.n	8003172 <HAL_ADC_ConfigChannel+0x742>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a49      	ldr	r2, [pc, #292]	; (8003294 <HAL_ADC_ConfigChannel+0x864>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d101      	bne.n	8003176 <HAL_ADC_ConfigChannel+0x746>
 8003172:	4a49      	ldr	r2, [pc, #292]	; (8003298 <HAL_ADC_ConfigChannel+0x868>)
 8003174:	e000      	b.n	8003178 <HAL_ADC_ConfigChannel+0x748>
 8003176:	4a43      	ldr	r2, [pc, #268]	; (8003284 <HAL_ADC_ConfigChannel+0x854>)
 8003178:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800317c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003180:	4619      	mov	r1, r3
 8003182:	4610      	mov	r0, r2
 8003184:	f7fe fe57 	bl	8001e36 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003188:	4b44      	ldr	r3, [pc, #272]	; (800329c <HAL_ADC_ConfigChannel+0x86c>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	099b      	lsrs	r3, r3, #6
 800318e:	4a44      	ldr	r2, [pc, #272]	; (80032a0 <HAL_ADC_ConfigChannel+0x870>)
 8003190:	fba2 2303 	umull	r2, r3, r2, r3
 8003194:	099b      	lsrs	r3, r3, #6
 8003196:	1c5a      	adds	r2, r3, #1
 8003198:	4613      	mov	r3, r2
 800319a:	005b      	lsls	r3, r3, #1
 800319c:	4413      	add	r3, r2
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80031a2:	e002      	b.n	80031aa <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	3b01      	subs	r3, #1
 80031a8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d1f9      	bne.n	80031a4 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80031b0:	e05a      	b.n	8003268 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a3b      	ldr	r2, [pc, #236]	; (80032a4 <HAL_ADC_ConfigChannel+0x874>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d125      	bne.n	8003208 <HAL_ADC_ConfigChannel+0x7d8>
 80031bc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80031c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d11f      	bne.n	8003208 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a31      	ldr	r2, [pc, #196]	; (8003294 <HAL_ADC_ConfigChannel+0x864>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d104      	bne.n	80031dc <HAL_ADC_ConfigChannel+0x7ac>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a34      	ldr	r2, [pc, #208]	; (80032a8 <HAL_ADC_ConfigChannel+0x878>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d047      	beq.n	800326c <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031e4:	d004      	beq.n	80031f0 <HAL_ADC_ConfigChannel+0x7c0>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a2a      	ldr	r2, [pc, #168]	; (8003294 <HAL_ADC_ConfigChannel+0x864>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d101      	bne.n	80031f4 <HAL_ADC_ConfigChannel+0x7c4>
 80031f0:	4a29      	ldr	r2, [pc, #164]	; (8003298 <HAL_ADC_ConfigChannel+0x868>)
 80031f2:	e000      	b.n	80031f6 <HAL_ADC_ConfigChannel+0x7c6>
 80031f4:	4a23      	ldr	r2, [pc, #140]	; (8003284 <HAL_ADC_ConfigChannel+0x854>)
 80031f6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80031fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031fe:	4619      	mov	r1, r3
 8003200:	4610      	mov	r0, r2
 8003202:	f7fe fe18 	bl	8001e36 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003206:	e031      	b.n	800326c <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a27      	ldr	r2, [pc, #156]	; (80032ac <HAL_ADC_ConfigChannel+0x87c>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d12d      	bne.n	800326e <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003212:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003216:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800321a:	2b00      	cmp	r3, #0
 800321c:	d127      	bne.n	800326e <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a1c      	ldr	r2, [pc, #112]	; (8003294 <HAL_ADC_ConfigChannel+0x864>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d022      	beq.n	800326e <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003230:	d004      	beq.n	800323c <HAL_ADC_ConfigChannel+0x80c>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a17      	ldr	r2, [pc, #92]	; (8003294 <HAL_ADC_ConfigChannel+0x864>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d101      	bne.n	8003240 <HAL_ADC_ConfigChannel+0x810>
 800323c:	4a16      	ldr	r2, [pc, #88]	; (8003298 <HAL_ADC_ConfigChannel+0x868>)
 800323e:	e000      	b.n	8003242 <HAL_ADC_ConfigChannel+0x812>
 8003240:	4a10      	ldr	r2, [pc, #64]	; (8003284 <HAL_ADC_ConfigChannel+0x854>)
 8003242:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003246:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800324a:	4619      	mov	r1, r3
 800324c:	4610      	mov	r0, r2
 800324e:	f7fe fdf2 	bl	8001e36 <LL_ADC_SetCommonPathInternalCh>
 8003252:	e00c      	b.n	800326e <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003258:	f043 0220 	orr.w	r2, r3, #32
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003266:	e002      	b.n	800326e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003268:	bf00      	nop
 800326a:	e000      	b.n	800326e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800326c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2200      	movs	r2, #0
 8003272:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003276:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800327a:	4618      	mov	r0, r3
 800327c:	37d8      	adds	r7, #216	; 0xd8
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}
 8003282:	bf00      	nop
 8003284:	50000700 	.word	0x50000700
 8003288:	c3210000 	.word	0xc3210000
 800328c:	90c00010 	.word	0x90c00010
 8003290:	50000600 	.word	0x50000600
 8003294:	50000100 	.word	0x50000100
 8003298:	50000300 	.word	0x50000300
 800329c:	2000011c 	.word	0x2000011c
 80032a0:	053e2d63 	.word	0x053e2d63
 80032a4:	c7520000 	.word	0xc7520000
 80032a8:	50000500 	.word	0x50000500
 80032ac:	cb840000 	.word	0xcb840000

080032b0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b084      	sub	sp, #16
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4618      	mov	r0, r3
 80032be:	f7fe ff9d 	bl	80021fc <LL_ADC_IsEnabled>
 80032c2:	4603      	mov	r3, r0
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d14d      	bne.n	8003364 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	689a      	ldr	r2, [r3, #8]
 80032ce:	4b28      	ldr	r3, [pc, #160]	; (8003370 <ADC_Enable+0xc0>)
 80032d0:	4013      	ands	r3, r2
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d00d      	beq.n	80032f2 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032da:	f043 0210 	orr.w	r2, r3, #16
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032e6:	f043 0201 	orr.w	r2, r3, #1
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e039      	b.n	8003366 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4618      	mov	r0, r3
 80032f8:	f7fe ff58 	bl	80021ac <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80032fc:	f7fe fd5a 	bl	8001db4 <HAL_GetTick>
 8003300:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003302:	e028      	b.n	8003356 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4618      	mov	r0, r3
 800330a:	f7fe ff77 	bl	80021fc <LL_ADC_IsEnabled>
 800330e:	4603      	mov	r3, r0
 8003310:	2b00      	cmp	r3, #0
 8003312:	d104      	bne.n	800331e <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4618      	mov	r0, r3
 800331a:	f7fe ff47 	bl	80021ac <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800331e:	f7fe fd49 	bl	8001db4 <HAL_GetTick>
 8003322:	4602      	mov	r2, r0
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	1ad3      	subs	r3, r2, r3
 8003328:	2b02      	cmp	r3, #2
 800332a:	d914      	bls.n	8003356 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 0301 	and.w	r3, r3, #1
 8003336:	2b01      	cmp	r3, #1
 8003338:	d00d      	beq.n	8003356 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800333e:	f043 0210 	orr.w	r2, r3, #16
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800334a:	f043 0201 	orr.w	r2, r3, #1
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e007      	b.n	8003366 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 0301 	and.w	r3, r3, #1
 8003360:	2b01      	cmp	r3, #1
 8003362:	d1cf      	bne.n	8003304 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003364:	2300      	movs	r3, #0
}
 8003366:	4618      	mov	r0, r3
 8003368:	3710      	adds	r7, #16
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop
 8003370:	8000003f 	.word	0x8000003f

08003374 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b084      	sub	sp, #16
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4618      	mov	r0, r3
 8003382:	f7fe ff4e 	bl	8002222 <LL_ADC_IsDisableOngoing>
 8003386:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4618      	mov	r0, r3
 800338e:	f7fe ff35 	bl	80021fc <LL_ADC_IsEnabled>
 8003392:	4603      	mov	r3, r0
 8003394:	2b00      	cmp	r3, #0
 8003396:	d047      	beq.n	8003428 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d144      	bne.n	8003428 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	f003 030d 	and.w	r3, r3, #13
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d10c      	bne.n	80033c6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4618      	mov	r0, r3
 80033b2:	f7fe ff0f 	bl	80021d4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	2203      	movs	r2, #3
 80033bc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80033be:	f7fe fcf9 	bl	8001db4 <HAL_GetTick>
 80033c2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80033c4:	e029      	b.n	800341a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033ca:	f043 0210 	orr.w	r2, r3, #16
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033d6:	f043 0201 	orr.w	r2, r3, #1
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e023      	b.n	800342a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80033e2:	f7fe fce7 	bl	8001db4 <HAL_GetTick>
 80033e6:	4602      	mov	r2, r0
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	1ad3      	subs	r3, r2, r3
 80033ec:	2b02      	cmp	r3, #2
 80033ee:	d914      	bls.n	800341a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	f003 0301 	and.w	r3, r3, #1
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d00d      	beq.n	800341a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003402:	f043 0210 	orr.w	r2, r3, #16
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800340e:	f043 0201 	orr.w	r2, r3, #1
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e007      	b.n	800342a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	f003 0301 	and.w	r3, r3, #1
 8003424:	2b00      	cmp	r3, #0
 8003426:	d1dc      	bne.n	80033e2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003428:	2300      	movs	r3, #0
}
 800342a:	4618      	mov	r0, r3
 800342c:	3710      	adds	r7, #16
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}

08003432 <LL_ADC_IsEnabled>:
{
 8003432:	b480      	push	{r7}
 8003434:	b083      	sub	sp, #12
 8003436:	af00      	add	r7, sp, #0
 8003438:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	f003 0301 	and.w	r3, r3, #1
 8003442:	2b01      	cmp	r3, #1
 8003444:	d101      	bne.n	800344a <LL_ADC_IsEnabled+0x18>
 8003446:	2301      	movs	r3, #1
 8003448:	e000      	b.n	800344c <LL_ADC_IsEnabled+0x1a>
 800344a:	2300      	movs	r3, #0
}
 800344c:	4618      	mov	r0, r3
 800344e:	370c      	adds	r7, #12
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr

08003458 <LL_ADC_StartCalibration>:
{
 8003458:	b480      	push	{r7}
 800345a:	b083      	sub	sp, #12
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
 8003460:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800346a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800346e:	683a      	ldr	r2, [r7, #0]
 8003470:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003474:	4313      	orrs	r3, r2
 8003476:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	609a      	str	r2, [r3, #8]
}
 800347e:	bf00      	nop
 8003480:	370c      	adds	r7, #12
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr

0800348a <LL_ADC_IsCalibrationOnGoing>:
{
 800348a:	b480      	push	{r7}
 800348c:	b083      	sub	sp, #12
 800348e:	af00      	add	r7, sp, #0
 8003490:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800349a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800349e:	d101      	bne.n	80034a4 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80034a0:	2301      	movs	r3, #1
 80034a2:	e000      	b.n	80034a6 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80034a4:	2300      	movs	r3, #0
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	370c      	adds	r7, #12
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr

080034b2 <LL_ADC_REG_IsConversionOngoing>:
{
 80034b2:	b480      	push	{r7}
 80034b4:	b083      	sub	sp, #12
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	f003 0304 	and.w	r3, r3, #4
 80034c2:	2b04      	cmp	r3, #4
 80034c4:	d101      	bne.n	80034ca <LL_ADC_REG_IsConversionOngoing+0x18>
 80034c6:	2301      	movs	r3, #1
 80034c8:	e000      	b.n	80034cc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80034ca:	2300      	movs	r3, #0
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	370c      	adds	r7, #12
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr

080034d8 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b084      	sub	sp, #16
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80034e2:	2300      	movs	r3, #0
 80034e4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d101      	bne.n	80034f4 <HAL_ADCEx_Calibration_Start+0x1c>
 80034f0:	2302      	movs	r3, #2
 80034f2:	e04d      	b.n	8003590 <HAL_ADCEx_Calibration_Start+0xb8>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2201      	movs	r2, #1
 80034f8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	f7ff ff39 	bl	8003374 <ADC_Disable>
 8003502:	4603      	mov	r3, r0
 8003504:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003506:	7bfb      	ldrb	r3, [r7, #15]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d136      	bne.n	800357a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003510:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003514:	f023 0302 	bic.w	r3, r3, #2
 8003518:	f043 0202 	orr.w	r2, r3, #2
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	6839      	ldr	r1, [r7, #0]
 8003526:	4618      	mov	r0, r3
 8003528:	f7ff ff96 	bl	8003458 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800352c:	e014      	b.n	8003558 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	3301      	adds	r3, #1
 8003532:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	4a18      	ldr	r2, [pc, #96]	; (8003598 <HAL_ADCEx_Calibration_Start+0xc0>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d90d      	bls.n	8003558 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003540:	f023 0312 	bic.w	r3, r3, #18
 8003544:	f043 0210 	orr.w	r2, r3, #16
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2200      	movs	r2, #0
 8003550:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e01b      	b.n	8003590 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4618      	mov	r0, r3
 800355e:	f7ff ff94 	bl	800348a <LL_ADC_IsCalibrationOnGoing>
 8003562:	4603      	mov	r3, r0
 8003564:	2b00      	cmp	r3, #0
 8003566:	d1e2      	bne.n	800352e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800356c:	f023 0303 	bic.w	r3, r3, #3
 8003570:	f043 0201 	orr.w	r2, r3, #1
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	65da      	str	r2, [r3, #92]	; 0x5c
 8003578:	e005      	b.n	8003586 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800357e:	f043 0210 	orr.w	r2, r3, #16
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2200      	movs	r2, #0
 800358a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800358e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003590:	4618      	mov	r0, r3
 8003592:	3710      	adds	r7, #16
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}
 8003598:	0004de01 	.word	0x0004de01

0800359c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800359c:	b590      	push	{r4, r7, lr}
 800359e:	b0a1      	sub	sp, #132	; 0x84
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035a6:	2300      	movs	r3, #0
 80035a8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d101      	bne.n	80035ba <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80035b6:	2302      	movs	r3, #2
 80035b8:	e0e7      	b.n	800378a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2201      	movs	r2, #1
 80035be:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80035c2:	2300      	movs	r3, #0
 80035c4:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80035c6:	2300      	movs	r3, #0
 80035c8:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80035d2:	d102      	bne.n	80035da <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80035d4:	4b6f      	ldr	r3, [pc, #444]	; (8003794 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80035d6:	60bb      	str	r3, [r7, #8]
 80035d8:	e009      	b.n	80035ee <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a6e      	ldr	r2, [pc, #440]	; (8003798 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d102      	bne.n	80035ea <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80035e4:	4b6d      	ldr	r3, [pc, #436]	; (800379c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80035e6:	60bb      	str	r3, [r7, #8]
 80035e8:	e001      	b.n	80035ee <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80035ea:	2300      	movs	r3, #0
 80035ec:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d10b      	bne.n	800360c <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035f8:	f043 0220 	orr.w	r2, r3, #32
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2200      	movs	r2, #0
 8003604:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	e0be      	b.n	800378a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	4618      	mov	r0, r3
 8003610:	f7ff ff4f 	bl	80034b2 <LL_ADC_REG_IsConversionOngoing>
 8003614:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4618      	mov	r0, r3
 800361c:	f7ff ff49 	bl	80034b2 <LL_ADC_REG_IsConversionOngoing>
 8003620:	4603      	mov	r3, r0
 8003622:	2b00      	cmp	r3, #0
 8003624:	f040 80a0 	bne.w	8003768 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003628:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800362a:	2b00      	cmp	r3, #0
 800362c:	f040 809c 	bne.w	8003768 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003638:	d004      	beq.n	8003644 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a55      	ldr	r2, [pc, #340]	; (8003794 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d101      	bne.n	8003648 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003644:	4b56      	ldr	r3, [pc, #344]	; (80037a0 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8003646:	e000      	b.n	800364a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003648:	4b56      	ldr	r3, [pc, #344]	; (80037a4 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800364a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d04b      	beq.n	80036ec <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003654:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	6859      	ldr	r1, [r3, #4]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003666:	035b      	lsls	r3, r3, #13
 8003668:	430b      	orrs	r3, r1
 800366a:	431a      	orrs	r2, r3
 800366c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800366e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003678:	d004      	beq.n	8003684 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a45      	ldr	r2, [pc, #276]	; (8003794 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d10f      	bne.n	80036a4 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8003684:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003688:	f7ff fed3 	bl	8003432 <LL_ADC_IsEnabled>
 800368c:	4604      	mov	r4, r0
 800368e:	4841      	ldr	r0, [pc, #260]	; (8003794 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003690:	f7ff fecf 	bl	8003432 <LL_ADC_IsEnabled>
 8003694:	4603      	mov	r3, r0
 8003696:	4323      	orrs	r3, r4
 8003698:	2b00      	cmp	r3, #0
 800369a:	bf0c      	ite	eq
 800369c:	2301      	moveq	r3, #1
 800369e:	2300      	movne	r3, #0
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	e012      	b.n	80036ca <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80036a4:	483c      	ldr	r0, [pc, #240]	; (8003798 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80036a6:	f7ff fec4 	bl	8003432 <LL_ADC_IsEnabled>
 80036aa:	4604      	mov	r4, r0
 80036ac:	483b      	ldr	r0, [pc, #236]	; (800379c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80036ae:	f7ff fec0 	bl	8003432 <LL_ADC_IsEnabled>
 80036b2:	4603      	mov	r3, r0
 80036b4:	431c      	orrs	r4, r3
 80036b6:	483c      	ldr	r0, [pc, #240]	; (80037a8 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80036b8:	f7ff febb 	bl	8003432 <LL_ADC_IsEnabled>
 80036bc:	4603      	mov	r3, r0
 80036be:	4323      	orrs	r3, r4
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	bf0c      	ite	eq
 80036c4:	2301      	moveq	r3, #1
 80036c6:	2300      	movne	r3, #0
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d056      	beq.n	800377c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80036ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80036d6:	f023 030f 	bic.w	r3, r3, #15
 80036da:	683a      	ldr	r2, [r7, #0]
 80036dc:	6811      	ldr	r1, [r2, #0]
 80036de:	683a      	ldr	r2, [r7, #0]
 80036e0:	6892      	ldr	r2, [r2, #8]
 80036e2:	430a      	orrs	r2, r1
 80036e4:	431a      	orrs	r2, r3
 80036e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036e8:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80036ea:	e047      	b.n	800377c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80036ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80036f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036f6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003700:	d004      	beq.n	800370c <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a23      	ldr	r2, [pc, #140]	; (8003794 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d10f      	bne.n	800372c <HAL_ADCEx_MultiModeConfigChannel+0x190>
 800370c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003710:	f7ff fe8f 	bl	8003432 <LL_ADC_IsEnabled>
 8003714:	4604      	mov	r4, r0
 8003716:	481f      	ldr	r0, [pc, #124]	; (8003794 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003718:	f7ff fe8b 	bl	8003432 <LL_ADC_IsEnabled>
 800371c:	4603      	mov	r3, r0
 800371e:	4323      	orrs	r3, r4
 8003720:	2b00      	cmp	r3, #0
 8003722:	bf0c      	ite	eq
 8003724:	2301      	moveq	r3, #1
 8003726:	2300      	movne	r3, #0
 8003728:	b2db      	uxtb	r3, r3
 800372a:	e012      	b.n	8003752 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 800372c:	481a      	ldr	r0, [pc, #104]	; (8003798 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800372e:	f7ff fe80 	bl	8003432 <LL_ADC_IsEnabled>
 8003732:	4604      	mov	r4, r0
 8003734:	4819      	ldr	r0, [pc, #100]	; (800379c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003736:	f7ff fe7c 	bl	8003432 <LL_ADC_IsEnabled>
 800373a:	4603      	mov	r3, r0
 800373c:	431c      	orrs	r4, r3
 800373e:	481a      	ldr	r0, [pc, #104]	; (80037a8 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003740:	f7ff fe77 	bl	8003432 <LL_ADC_IsEnabled>
 8003744:	4603      	mov	r3, r0
 8003746:	4323      	orrs	r3, r4
 8003748:	2b00      	cmp	r3, #0
 800374a:	bf0c      	ite	eq
 800374c:	2301      	moveq	r3, #1
 800374e:	2300      	movne	r3, #0
 8003750:	b2db      	uxtb	r3, r3
 8003752:	2b00      	cmp	r3, #0
 8003754:	d012      	beq.n	800377c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003756:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800375e:	f023 030f 	bic.w	r3, r3, #15
 8003762:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003764:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003766:	e009      	b.n	800377c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800376c:	f043 0220 	orr.w	r2, r3, #32
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800377a:	e000      	b.n	800377e <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800377c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003786:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800378a:	4618      	mov	r0, r3
 800378c:	3784      	adds	r7, #132	; 0x84
 800378e:	46bd      	mov	sp, r7
 8003790:	bd90      	pop	{r4, r7, pc}
 8003792:	bf00      	nop
 8003794:	50000100 	.word	0x50000100
 8003798:	50000400 	.word	0x50000400
 800379c:	50000500 	.word	0x50000500
 80037a0:	50000300 	.word	0x50000300
 80037a4:	50000700 	.word	0x50000700
 80037a8:	50000600 	.word	0x50000600

080037ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b085      	sub	sp, #20
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	f003 0307 	and.w	r3, r3, #7
 80037ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037bc:	4b0c      	ldr	r3, [pc, #48]	; (80037f0 <__NVIC_SetPriorityGrouping+0x44>)
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037c2:	68ba      	ldr	r2, [r7, #8]
 80037c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80037c8:	4013      	ands	r3, r2
 80037ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80037d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037de:	4a04      	ldr	r2, [pc, #16]	; (80037f0 <__NVIC_SetPriorityGrouping+0x44>)
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	60d3      	str	r3, [r2, #12]
}
 80037e4:	bf00      	nop
 80037e6:	3714      	adds	r7, #20
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr
 80037f0:	e000ed00 	.word	0xe000ed00

080037f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037f4:	b480      	push	{r7}
 80037f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037f8:	4b04      	ldr	r3, [pc, #16]	; (800380c <__NVIC_GetPriorityGrouping+0x18>)
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	0a1b      	lsrs	r3, r3, #8
 80037fe:	f003 0307 	and.w	r3, r3, #7
}
 8003802:	4618      	mov	r0, r3
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr
 800380c:	e000ed00 	.word	0xe000ed00

08003810 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003810:	b480      	push	{r7}
 8003812:	b083      	sub	sp, #12
 8003814:	af00      	add	r7, sp, #0
 8003816:	4603      	mov	r3, r0
 8003818:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800381a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800381e:	2b00      	cmp	r3, #0
 8003820:	db0b      	blt.n	800383a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003822:	79fb      	ldrb	r3, [r7, #7]
 8003824:	f003 021f 	and.w	r2, r3, #31
 8003828:	4907      	ldr	r1, [pc, #28]	; (8003848 <__NVIC_EnableIRQ+0x38>)
 800382a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800382e:	095b      	lsrs	r3, r3, #5
 8003830:	2001      	movs	r0, #1
 8003832:	fa00 f202 	lsl.w	r2, r0, r2
 8003836:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800383a:	bf00      	nop
 800383c:	370c      	adds	r7, #12
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr
 8003846:	bf00      	nop
 8003848:	e000e100 	.word	0xe000e100

0800384c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800384c:	b480      	push	{r7}
 800384e:	b083      	sub	sp, #12
 8003850:	af00      	add	r7, sp, #0
 8003852:	4603      	mov	r3, r0
 8003854:	6039      	str	r1, [r7, #0]
 8003856:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003858:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800385c:	2b00      	cmp	r3, #0
 800385e:	db0a      	blt.n	8003876 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	b2da      	uxtb	r2, r3
 8003864:	490c      	ldr	r1, [pc, #48]	; (8003898 <__NVIC_SetPriority+0x4c>)
 8003866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800386a:	0112      	lsls	r2, r2, #4
 800386c:	b2d2      	uxtb	r2, r2
 800386e:	440b      	add	r3, r1
 8003870:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003874:	e00a      	b.n	800388c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	b2da      	uxtb	r2, r3
 800387a:	4908      	ldr	r1, [pc, #32]	; (800389c <__NVIC_SetPriority+0x50>)
 800387c:	79fb      	ldrb	r3, [r7, #7]
 800387e:	f003 030f 	and.w	r3, r3, #15
 8003882:	3b04      	subs	r3, #4
 8003884:	0112      	lsls	r2, r2, #4
 8003886:	b2d2      	uxtb	r2, r2
 8003888:	440b      	add	r3, r1
 800388a:	761a      	strb	r2, [r3, #24]
}
 800388c:	bf00      	nop
 800388e:	370c      	adds	r7, #12
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr
 8003898:	e000e100 	.word	0xe000e100
 800389c:	e000ed00 	.word	0xe000ed00

080038a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b089      	sub	sp, #36	; 0x24
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	60f8      	str	r0, [r7, #12]
 80038a8:	60b9      	str	r1, [r7, #8]
 80038aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f003 0307 	and.w	r3, r3, #7
 80038b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038b4:	69fb      	ldr	r3, [r7, #28]
 80038b6:	f1c3 0307 	rsb	r3, r3, #7
 80038ba:	2b04      	cmp	r3, #4
 80038bc:	bf28      	it	cs
 80038be:	2304      	movcs	r3, #4
 80038c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	3304      	adds	r3, #4
 80038c6:	2b06      	cmp	r3, #6
 80038c8:	d902      	bls.n	80038d0 <NVIC_EncodePriority+0x30>
 80038ca:	69fb      	ldr	r3, [r7, #28]
 80038cc:	3b03      	subs	r3, #3
 80038ce:	e000      	b.n	80038d2 <NVIC_EncodePriority+0x32>
 80038d0:	2300      	movs	r3, #0
 80038d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038d4:	f04f 32ff 	mov.w	r2, #4294967295
 80038d8:	69bb      	ldr	r3, [r7, #24]
 80038da:	fa02 f303 	lsl.w	r3, r2, r3
 80038de:	43da      	mvns	r2, r3
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	401a      	ands	r2, r3
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038e8:	f04f 31ff 	mov.w	r1, #4294967295
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	fa01 f303 	lsl.w	r3, r1, r3
 80038f2:	43d9      	mvns	r1, r3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038f8:	4313      	orrs	r3, r2
         );
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3724      	adds	r7, #36	; 0x24
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr
	...

08003908 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b082      	sub	sp, #8
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	3b01      	subs	r3, #1
 8003914:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003918:	d301      	bcc.n	800391e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800391a:	2301      	movs	r3, #1
 800391c:	e00f      	b.n	800393e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800391e:	4a0a      	ldr	r2, [pc, #40]	; (8003948 <SysTick_Config+0x40>)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	3b01      	subs	r3, #1
 8003924:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003926:	210f      	movs	r1, #15
 8003928:	f04f 30ff 	mov.w	r0, #4294967295
 800392c:	f7ff ff8e 	bl	800384c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003930:	4b05      	ldr	r3, [pc, #20]	; (8003948 <SysTick_Config+0x40>)
 8003932:	2200      	movs	r2, #0
 8003934:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003936:	4b04      	ldr	r3, [pc, #16]	; (8003948 <SysTick_Config+0x40>)
 8003938:	2207      	movs	r2, #7
 800393a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800393c:	2300      	movs	r3, #0
}
 800393e:	4618      	mov	r0, r3
 8003940:	3708      	adds	r7, #8
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
 8003946:	bf00      	nop
 8003948:	e000e010 	.word	0xe000e010

0800394c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b082      	sub	sp, #8
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f7ff ff29 	bl	80037ac <__NVIC_SetPriorityGrouping>
}
 800395a:	bf00      	nop
 800395c:	3708      	adds	r7, #8
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}

08003962 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003962:	b580      	push	{r7, lr}
 8003964:	b086      	sub	sp, #24
 8003966:	af00      	add	r7, sp, #0
 8003968:	4603      	mov	r3, r0
 800396a:	60b9      	str	r1, [r7, #8]
 800396c:	607a      	str	r2, [r7, #4]
 800396e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003970:	f7ff ff40 	bl	80037f4 <__NVIC_GetPriorityGrouping>
 8003974:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	68b9      	ldr	r1, [r7, #8]
 800397a:	6978      	ldr	r0, [r7, #20]
 800397c:	f7ff ff90 	bl	80038a0 <NVIC_EncodePriority>
 8003980:	4602      	mov	r2, r0
 8003982:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003986:	4611      	mov	r1, r2
 8003988:	4618      	mov	r0, r3
 800398a:	f7ff ff5f 	bl	800384c <__NVIC_SetPriority>
}
 800398e:	bf00      	nop
 8003990:	3718      	adds	r7, #24
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}

08003996 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003996:	b580      	push	{r7, lr}
 8003998:	b082      	sub	sp, #8
 800399a:	af00      	add	r7, sp, #0
 800399c:	4603      	mov	r3, r0
 800399e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039a4:	4618      	mov	r0, r3
 80039a6:	f7ff ff33 	bl	8003810 <__NVIC_EnableIRQ>
}
 80039aa:	bf00      	nop
 80039ac:	3708      	adds	r7, #8
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}

080039b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80039b2:	b580      	push	{r7, lr}
 80039b4:	b082      	sub	sp, #8
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f7ff ffa4 	bl	8003908 <SysTick_Config>
 80039c0:	4603      	mov	r3, r0
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3708      	adds	r7, #8
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}

080039ca <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80039ca:	b480      	push	{r7}
 80039cc:	b085      	sub	sp, #20
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039d2:	2300      	movs	r3, #0
 80039d4:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	2b02      	cmp	r3, #2
 80039e0:	d005      	beq.n	80039ee <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2204      	movs	r2, #4
 80039e6:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	73fb      	strb	r3, [r7, #15]
 80039ec:	e037      	b.n	8003a5e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f022 020e 	bic.w	r2, r2, #14
 80039fc:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a08:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a0c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f022 0201 	bic.w	r2, r2, #1
 8003a1c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a22:	f003 021f 	and.w	r2, r3, #31
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2a:	2101      	movs	r1, #1
 8003a2c:	fa01 f202 	lsl.w	r2, r1, r2
 8003a30:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003a3a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d00c      	beq.n	8003a5e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a4e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a52:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a58:	687a      	ldr	r2, [r7, #4]
 8003a5a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003a5c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2201      	movs	r2, #1
 8003a62:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8003a6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3714      	adds	r7, #20
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr

08003a7c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b084      	sub	sp, #16
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a84:	2300      	movs	r3, #0
 8003a86:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003a8e:	b2db      	uxtb	r3, r3
 8003a90:	2b02      	cmp	r3, #2
 8003a92:	d00d      	beq.n	8003ab0 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2204      	movs	r2, #4
 8003a98:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	73fb      	strb	r3, [r7, #15]
 8003aae:	e047      	b.n	8003b40 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f022 020e 	bic.w	r2, r2, #14
 8003abe:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f022 0201 	bic.w	r2, r2, #1
 8003ace:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ada:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ade:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ae4:	f003 021f 	and.w	r2, r3, #31
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aec:	2101      	movs	r1, #1
 8003aee:	fa01 f202 	lsl.w	r2, r1, r2
 8003af2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003af8:	687a      	ldr	r2, [r7, #4]
 8003afa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003afc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d00c      	beq.n	8003b20 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b10:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b14:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b1a:	687a      	ldr	r2, [r7, #4]
 8003b1c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003b1e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2201      	movs	r2, #1
 8003b24:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d003      	beq.n	8003b40 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	4798      	blx	r3
    }
  }
  return status;
 8003b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3710      	adds	r7, #16
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
	...

08003b4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b087      	sub	sp, #28
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003b56:	2300      	movs	r3, #0
 8003b58:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003b5a:	e15a      	b.n	8003e12 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	2101      	movs	r1, #1
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	fa01 f303 	lsl.w	r3, r1, r3
 8003b68:	4013      	ands	r3, r2
 8003b6a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	f000 814c 	beq.w	8003e0c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	f003 0303 	and.w	r3, r3, #3
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d005      	beq.n	8003b8c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003b88:	2b02      	cmp	r3, #2
 8003b8a:	d130      	bne.n	8003bee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	005b      	lsls	r3, r3, #1
 8003b96:	2203      	movs	r2, #3
 8003b98:	fa02 f303 	lsl.w	r3, r2, r3
 8003b9c:	43db      	mvns	r3, r3
 8003b9e:	693a      	ldr	r2, [r7, #16]
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	68da      	ldr	r2, [r3, #12]
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	005b      	lsls	r3, r3, #1
 8003bac:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb0:	693a      	ldr	r2, [r7, #16]
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	693a      	ldr	r2, [r7, #16]
 8003bba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bca:	43db      	mvns	r3, r3
 8003bcc:	693a      	ldr	r2, [r7, #16]
 8003bce:	4013      	ands	r3, r2
 8003bd0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	091b      	lsrs	r3, r3, #4
 8003bd8:	f003 0201 	and.w	r2, r3, #1
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	fa02 f303 	lsl.w	r3, r2, r3
 8003be2:	693a      	ldr	r2, [r7, #16]
 8003be4:	4313      	orrs	r3, r2
 8003be6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	693a      	ldr	r2, [r7, #16]
 8003bec:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	f003 0303 	and.w	r3, r3, #3
 8003bf6:	2b03      	cmp	r3, #3
 8003bf8:	d017      	beq.n	8003c2a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	005b      	lsls	r3, r3, #1
 8003c04:	2203      	movs	r2, #3
 8003c06:	fa02 f303 	lsl.w	r3, r2, r3
 8003c0a:	43db      	mvns	r3, r3
 8003c0c:	693a      	ldr	r2, [r7, #16]
 8003c0e:	4013      	ands	r3, r2
 8003c10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	689a      	ldr	r2, [r3, #8]
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	005b      	lsls	r3, r3, #1
 8003c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1e:	693a      	ldr	r2, [r7, #16]
 8003c20:	4313      	orrs	r3, r2
 8003c22:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	693a      	ldr	r2, [r7, #16]
 8003c28:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	f003 0303 	and.w	r3, r3, #3
 8003c32:	2b02      	cmp	r3, #2
 8003c34:	d123      	bne.n	8003c7e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	08da      	lsrs	r2, r3, #3
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	3208      	adds	r2, #8
 8003c3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c42:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	f003 0307 	and.w	r3, r3, #7
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	220f      	movs	r2, #15
 8003c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c52:	43db      	mvns	r3, r3
 8003c54:	693a      	ldr	r2, [r7, #16]
 8003c56:	4013      	ands	r3, r2
 8003c58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	691a      	ldr	r2, [r3, #16]
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	f003 0307 	and.w	r3, r3, #7
 8003c64:	009b      	lsls	r3, r3, #2
 8003c66:	fa02 f303 	lsl.w	r3, r2, r3
 8003c6a:	693a      	ldr	r2, [r7, #16]
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	08da      	lsrs	r2, r3, #3
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	3208      	adds	r2, #8
 8003c78:	6939      	ldr	r1, [r7, #16]
 8003c7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	005b      	lsls	r3, r3, #1
 8003c88:	2203      	movs	r2, #3
 8003c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8e:	43db      	mvns	r3, r3
 8003c90:	693a      	ldr	r2, [r7, #16]
 8003c92:	4013      	ands	r3, r2
 8003c94:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	f003 0203 	and.w	r2, r3, #3
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	005b      	lsls	r3, r3, #1
 8003ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca6:	693a      	ldr	r2, [r7, #16]
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	693a      	ldr	r2, [r7, #16]
 8003cb0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	f000 80a6 	beq.w	8003e0c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cc0:	4b5b      	ldr	r3, [pc, #364]	; (8003e30 <HAL_GPIO_Init+0x2e4>)
 8003cc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cc4:	4a5a      	ldr	r2, [pc, #360]	; (8003e30 <HAL_GPIO_Init+0x2e4>)
 8003cc6:	f043 0301 	orr.w	r3, r3, #1
 8003cca:	6613      	str	r3, [r2, #96]	; 0x60
 8003ccc:	4b58      	ldr	r3, [pc, #352]	; (8003e30 <HAL_GPIO_Init+0x2e4>)
 8003cce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cd0:	f003 0301 	and.w	r3, r3, #1
 8003cd4:	60bb      	str	r3, [r7, #8]
 8003cd6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003cd8:	4a56      	ldr	r2, [pc, #344]	; (8003e34 <HAL_GPIO_Init+0x2e8>)
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	089b      	lsrs	r3, r3, #2
 8003cde:	3302      	adds	r3, #2
 8003ce0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ce4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	f003 0303 	and.w	r3, r3, #3
 8003cec:	009b      	lsls	r3, r3, #2
 8003cee:	220f      	movs	r2, #15
 8003cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf4:	43db      	mvns	r3, r3
 8003cf6:	693a      	ldr	r2, [r7, #16]
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003d02:	d01f      	beq.n	8003d44 <HAL_GPIO_Init+0x1f8>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	4a4c      	ldr	r2, [pc, #304]	; (8003e38 <HAL_GPIO_Init+0x2ec>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d019      	beq.n	8003d40 <HAL_GPIO_Init+0x1f4>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	4a4b      	ldr	r2, [pc, #300]	; (8003e3c <HAL_GPIO_Init+0x2f0>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d013      	beq.n	8003d3c <HAL_GPIO_Init+0x1f0>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	4a4a      	ldr	r2, [pc, #296]	; (8003e40 <HAL_GPIO_Init+0x2f4>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d00d      	beq.n	8003d38 <HAL_GPIO_Init+0x1ec>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	4a49      	ldr	r2, [pc, #292]	; (8003e44 <HAL_GPIO_Init+0x2f8>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d007      	beq.n	8003d34 <HAL_GPIO_Init+0x1e8>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	4a48      	ldr	r2, [pc, #288]	; (8003e48 <HAL_GPIO_Init+0x2fc>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d101      	bne.n	8003d30 <HAL_GPIO_Init+0x1e4>
 8003d2c:	2305      	movs	r3, #5
 8003d2e:	e00a      	b.n	8003d46 <HAL_GPIO_Init+0x1fa>
 8003d30:	2306      	movs	r3, #6
 8003d32:	e008      	b.n	8003d46 <HAL_GPIO_Init+0x1fa>
 8003d34:	2304      	movs	r3, #4
 8003d36:	e006      	b.n	8003d46 <HAL_GPIO_Init+0x1fa>
 8003d38:	2303      	movs	r3, #3
 8003d3a:	e004      	b.n	8003d46 <HAL_GPIO_Init+0x1fa>
 8003d3c:	2302      	movs	r3, #2
 8003d3e:	e002      	b.n	8003d46 <HAL_GPIO_Init+0x1fa>
 8003d40:	2301      	movs	r3, #1
 8003d42:	e000      	b.n	8003d46 <HAL_GPIO_Init+0x1fa>
 8003d44:	2300      	movs	r3, #0
 8003d46:	697a      	ldr	r2, [r7, #20]
 8003d48:	f002 0203 	and.w	r2, r2, #3
 8003d4c:	0092      	lsls	r2, r2, #2
 8003d4e:	4093      	lsls	r3, r2
 8003d50:	693a      	ldr	r2, [r7, #16]
 8003d52:	4313      	orrs	r3, r2
 8003d54:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d56:	4937      	ldr	r1, [pc, #220]	; (8003e34 <HAL_GPIO_Init+0x2e8>)
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	089b      	lsrs	r3, r3, #2
 8003d5c:	3302      	adds	r3, #2
 8003d5e:	693a      	ldr	r2, [r7, #16]
 8003d60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003d64:	4b39      	ldr	r3, [pc, #228]	; (8003e4c <HAL_GPIO_Init+0x300>)
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	43db      	mvns	r3, r3
 8003d6e:	693a      	ldr	r2, [r7, #16]
 8003d70:	4013      	ands	r3, r2
 8003d72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d003      	beq.n	8003d88 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003d80:	693a      	ldr	r2, [r7, #16]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	4313      	orrs	r3, r2
 8003d86:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003d88:	4a30      	ldr	r2, [pc, #192]	; (8003e4c <HAL_GPIO_Init+0x300>)
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003d8e:	4b2f      	ldr	r3, [pc, #188]	; (8003e4c <HAL_GPIO_Init+0x300>)
 8003d90:	68db      	ldr	r3, [r3, #12]
 8003d92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	43db      	mvns	r3, r3
 8003d98:	693a      	ldr	r2, [r7, #16]
 8003d9a:	4013      	ands	r3, r2
 8003d9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d003      	beq.n	8003db2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003daa:	693a      	ldr	r2, [r7, #16]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003db2:	4a26      	ldr	r2, [pc, #152]	; (8003e4c <HAL_GPIO_Init+0x300>)
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003db8:	4b24      	ldr	r3, [pc, #144]	; (8003e4c <HAL_GPIO_Init+0x300>)
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	43db      	mvns	r3, r3
 8003dc2:	693a      	ldr	r2, [r7, #16]
 8003dc4:	4013      	ands	r3, r2
 8003dc6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d003      	beq.n	8003ddc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003dd4:	693a      	ldr	r2, [r7, #16]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003ddc:	4a1b      	ldr	r2, [pc, #108]	; (8003e4c <HAL_GPIO_Init+0x300>)
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003de2:	4b1a      	ldr	r3, [pc, #104]	; (8003e4c <HAL_GPIO_Init+0x300>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	43db      	mvns	r3, r3
 8003dec:	693a      	ldr	r2, [r7, #16]
 8003dee:	4013      	ands	r3, r2
 8003df0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d003      	beq.n	8003e06 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003dfe:	693a      	ldr	r2, [r7, #16]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	4313      	orrs	r3, r2
 8003e04:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003e06:	4a11      	ldr	r2, [pc, #68]	; (8003e4c <HAL_GPIO_Init+0x300>)
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	3301      	adds	r3, #1
 8003e10:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	fa22 f303 	lsr.w	r3, r2, r3
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	f47f ae9d 	bne.w	8003b5c <HAL_GPIO_Init+0x10>
  }
}
 8003e22:	bf00      	nop
 8003e24:	bf00      	nop
 8003e26:	371c      	adds	r7, #28
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr
 8003e30:	40021000 	.word	0x40021000
 8003e34:	40010000 	.word	0x40010000
 8003e38:	48000400 	.word	0x48000400
 8003e3c:	48000800 	.word	0x48000800
 8003e40:	48000c00 	.word	0x48000c00
 8003e44:	48001000 	.word	0x48001000
 8003e48:	48001400 	.word	0x48001400
 8003e4c:	40010400 	.word	0x40010400

08003e50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b083      	sub	sp, #12
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
 8003e58:	460b      	mov	r3, r1
 8003e5a:	807b      	strh	r3, [r7, #2]
 8003e5c:	4613      	mov	r3, r2
 8003e5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003e60:	787b      	ldrb	r3, [r7, #1]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d003      	beq.n	8003e6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003e66:	887a      	ldrh	r2, [r7, #2]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003e6c:	e002      	b.n	8003e74 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003e6e:	887a      	ldrh	r2, [r7, #2]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003e74:	bf00      	nop
 8003e76:	370c      	adds	r7, #12
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr

08003e80 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b082      	sub	sp, #8
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	4603      	mov	r3, r0
 8003e88:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003e8a:	4b08      	ldr	r3, [pc, #32]	; (8003eac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003e8c:	695a      	ldr	r2, [r3, #20]
 8003e8e:	88fb      	ldrh	r3, [r7, #6]
 8003e90:	4013      	ands	r3, r2
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d006      	beq.n	8003ea4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003e96:	4a05      	ldr	r2, [pc, #20]	; (8003eac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003e98:	88fb      	ldrh	r3, [r7, #6]
 8003e9a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003e9c:	88fb      	ldrh	r3, [r7, #6]
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f000 f806 	bl	8003eb0 <HAL_GPIO_EXTI_Callback>
  }
}
 8003ea4:	bf00      	nop
 8003ea6:	3708      	adds	r7, #8
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}
 8003eac:	40010400 	.word	0x40010400

08003eb0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b083      	sub	sp, #12
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003eba:	bf00      	nop
 8003ebc:	370c      	adds	r7, #12
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr
	...

08003ec8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b085      	sub	sp, #20
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d141      	bne.n	8003f5a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003ed6:	4b4b      	ldr	r3, [pc, #300]	; (8004004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003ede:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ee2:	d131      	bne.n	8003f48 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003ee4:	4b47      	ldr	r3, [pc, #284]	; (8004004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ee6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003eea:	4a46      	ldr	r2, [pc, #280]	; (8004004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003eec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ef0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003ef4:	4b43      	ldr	r3, [pc, #268]	; (8004004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003efc:	4a41      	ldr	r2, [pc, #260]	; (8004004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003efe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f02:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003f04:	4b40      	ldr	r3, [pc, #256]	; (8004008 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	2232      	movs	r2, #50	; 0x32
 8003f0a:	fb02 f303 	mul.w	r3, r2, r3
 8003f0e:	4a3f      	ldr	r2, [pc, #252]	; (800400c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003f10:	fba2 2303 	umull	r2, r3, r2, r3
 8003f14:	0c9b      	lsrs	r3, r3, #18
 8003f16:	3301      	adds	r3, #1
 8003f18:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f1a:	e002      	b.n	8003f22 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	3b01      	subs	r3, #1
 8003f20:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f22:	4b38      	ldr	r3, [pc, #224]	; (8004004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f24:	695b      	ldr	r3, [r3, #20]
 8003f26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f2e:	d102      	bne.n	8003f36 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d1f2      	bne.n	8003f1c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003f36:	4b33      	ldr	r3, [pc, #204]	; (8004004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f38:	695b      	ldr	r3, [r3, #20]
 8003f3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f42:	d158      	bne.n	8003ff6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003f44:	2303      	movs	r3, #3
 8003f46:	e057      	b.n	8003ff8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003f48:	4b2e      	ldr	r3, [pc, #184]	; (8004004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f4e:	4a2d      	ldr	r2, [pc, #180]	; (8004004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f54:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003f58:	e04d      	b.n	8003ff6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f60:	d141      	bne.n	8003fe6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003f62:	4b28      	ldr	r3, [pc, #160]	; (8004004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003f6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f6e:	d131      	bne.n	8003fd4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003f70:	4b24      	ldr	r3, [pc, #144]	; (8004004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f76:	4a23      	ldr	r2, [pc, #140]	; (8004004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f7c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f80:	4b20      	ldr	r3, [pc, #128]	; (8004004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003f88:	4a1e      	ldr	r2, [pc, #120]	; (8004004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f8e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003f90:	4b1d      	ldr	r3, [pc, #116]	; (8004008 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	2232      	movs	r2, #50	; 0x32
 8003f96:	fb02 f303 	mul.w	r3, r2, r3
 8003f9a:	4a1c      	ldr	r2, [pc, #112]	; (800400c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003f9c:	fba2 2303 	umull	r2, r3, r2, r3
 8003fa0:	0c9b      	lsrs	r3, r3, #18
 8003fa2:	3301      	adds	r3, #1
 8003fa4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003fa6:	e002      	b.n	8003fae <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	3b01      	subs	r3, #1
 8003fac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003fae:	4b15      	ldr	r3, [pc, #84]	; (8004004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fb0:	695b      	ldr	r3, [r3, #20]
 8003fb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fba:	d102      	bne.n	8003fc2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d1f2      	bne.n	8003fa8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003fc2:	4b10      	ldr	r3, [pc, #64]	; (8004004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fc4:	695b      	ldr	r3, [r3, #20]
 8003fc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fce:	d112      	bne.n	8003ff6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003fd0:	2303      	movs	r3, #3
 8003fd2:	e011      	b.n	8003ff8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003fd4:	4b0b      	ldr	r3, [pc, #44]	; (8004004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003fda:	4a0a      	ldr	r2, [pc, #40]	; (8004004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fe0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003fe4:	e007      	b.n	8003ff6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003fe6:	4b07      	ldr	r3, [pc, #28]	; (8004004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003fee:	4a05      	ldr	r2, [pc, #20]	; (8004004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ff0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ff4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003ff6:	2300      	movs	r3, #0
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	3714      	adds	r7, #20
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004002:	4770      	bx	lr
 8004004:	40007000 	.word	0x40007000
 8004008:	2000011c 	.word	0x2000011c
 800400c:	431bde83 	.word	0x431bde83

08004010 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004010:	b480      	push	{r7}
 8004012:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004014:	4b05      	ldr	r3, [pc, #20]	; (800402c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	4a04      	ldr	r2, [pc, #16]	; (800402c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800401a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800401e:	6093      	str	r3, [r2, #8]
}
 8004020:	bf00      	nop
 8004022:	46bd      	mov	sp, r7
 8004024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004028:	4770      	bx	lr
 800402a:	bf00      	nop
 800402c:	40007000 	.word	0x40007000

08004030 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b088      	sub	sp, #32
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d101      	bne.n	8004042 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e306      	b.n	8004650 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 0301 	and.w	r3, r3, #1
 800404a:	2b00      	cmp	r3, #0
 800404c:	d075      	beq.n	800413a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800404e:	4b97      	ldr	r3, [pc, #604]	; (80042ac <HAL_RCC_OscConfig+0x27c>)
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	f003 030c 	and.w	r3, r3, #12
 8004056:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004058:	4b94      	ldr	r3, [pc, #592]	; (80042ac <HAL_RCC_OscConfig+0x27c>)
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	f003 0303 	and.w	r3, r3, #3
 8004060:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004062:	69bb      	ldr	r3, [r7, #24]
 8004064:	2b0c      	cmp	r3, #12
 8004066:	d102      	bne.n	800406e <HAL_RCC_OscConfig+0x3e>
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	2b03      	cmp	r3, #3
 800406c:	d002      	beq.n	8004074 <HAL_RCC_OscConfig+0x44>
 800406e:	69bb      	ldr	r3, [r7, #24]
 8004070:	2b08      	cmp	r3, #8
 8004072:	d10b      	bne.n	800408c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004074:	4b8d      	ldr	r3, [pc, #564]	; (80042ac <HAL_RCC_OscConfig+0x27c>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800407c:	2b00      	cmp	r3, #0
 800407e:	d05b      	beq.n	8004138 <HAL_RCC_OscConfig+0x108>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d157      	bne.n	8004138 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	e2e1      	b.n	8004650 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004094:	d106      	bne.n	80040a4 <HAL_RCC_OscConfig+0x74>
 8004096:	4b85      	ldr	r3, [pc, #532]	; (80042ac <HAL_RCC_OscConfig+0x27c>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a84      	ldr	r2, [pc, #528]	; (80042ac <HAL_RCC_OscConfig+0x27c>)
 800409c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040a0:	6013      	str	r3, [r2, #0]
 80040a2:	e01d      	b.n	80040e0 <HAL_RCC_OscConfig+0xb0>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040ac:	d10c      	bne.n	80040c8 <HAL_RCC_OscConfig+0x98>
 80040ae:	4b7f      	ldr	r3, [pc, #508]	; (80042ac <HAL_RCC_OscConfig+0x27c>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a7e      	ldr	r2, [pc, #504]	; (80042ac <HAL_RCC_OscConfig+0x27c>)
 80040b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040b8:	6013      	str	r3, [r2, #0]
 80040ba:	4b7c      	ldr	r3, [pc, #496]	; (80042ac <HAL_RCC_OscConfig+0x27c>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a7b      	ldr	r2, [pc, #492]	; (80042ac <HAL_RCC_OscConfig+0x27c>)
 80040c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040c4:	6013      	str	r3, [r2, #0]
 80040c6:	e00b      	b.n	80040e0 <HAL_RCC_OscConfig+0xb0>
 80040c8:	4b78      	ldr	r3, [pc, #480]	; (80042ac <HAL_RCC_OscConfig+0x27c>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a77      	ldr	r2, [pc, #476]	; (80042ac <HAL_RCC_OscConfig+0x27c>)
 80040ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040d2:	6013      	str	r3, [r2, #0]
 80040d4:	4b75      	ldr	r3, [pc, #468]	; (80042ac <HAL_RCC_OscConfig+0x27c>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a74      	ldr	r2, [pc, #464]	; (80042ac <HAL_RCC_OscConfig+0x27c>)
 80040da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d013      	beq.n	8004110 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040e8:	f7fd fe64 	bl	8001db4 <HAL_GetTick>
 80040ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040ee:	e008      	b.n	8004102 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040f0:	f7fd fe60 	bl	8001db4 <HAL_GetTick>
 80040f4:	4602      	mov	r2, r0
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	1ad3      	subs	r3, r2, r3
 80040fa:	2b64      	cmp	r3, #100	; 0x64
 80040fc:	d901      	bls.n	8004102 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80040fe:	2303      	movs	r3, #3
 8004100:	e2a6      	b.n	8004650 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004102:	4b6a      	ldr	r3, [pc, #424]	; (80042ac <HAL_RCC_OscConfig+0x27c>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800410a:	2b00      	cmp	r3, #0
 800410c:	d0f0      	beq.n	80040f0 <HAL_RCC_OscConfig+0xc0>
 800410e:	e014      	b.n	800413a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004110:	f7fd fe50 	bl	8001db4 <HAL_GetTick>
 8004114:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004116:	e008      	b.n	800412a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004118:	f7fd fe4c 	bl	8001db4 <HAL_GetTick>
 800411c:	4602      	mov	r2, r0
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	2b64      	cmp	r3, #100	; 0x64
 8004124:	d901      	bls.n	800412a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004126:	2303      	movs	r3, #3
 8004128:	e292      	b.n	8004650 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800412a:	4b60      	ldr	r3, [pc, #384]	; (80042ac <HAL_RCC_OscConfig+0x27c>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004132:	2b00      	cmp	r3, #0
 8004134:	d1f0      	bne.n	8004118 <HAL_RCC_OscConfig+0xe8>
 8004136:	e000      	b.n	800413a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004138:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 0302 	and.w	r3, r3, #2
 8004142:	2b00      	cmp	r3, #0
 8004144:	d075      	beq.n	8004232 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004146:	4b59      	ldr	r3, [pc, #356]	; (80042ac <HAL_RCC_OscConfig+0x27c>)
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	f003 030c 	and.w	r3, r3, #12
 800414e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004150:	4b56      	ldr	r3, [pc, #344]	; (80042ac <HAL_RCC_OscConfig+0x27c>)
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	f003 0303 	and.w	r3, r3, #3
 8004158:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800415a:	69bb      	ldr	r3, [r7, #24]
 800415c:	2b0c      	cmp	r3, #12
 800415e:	d102      	bne.n	8004166 <HAL_RCC_OscConfig+0x136>
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	2b02      	cmp	r3, #2
 8004164:	d002      	beq.n	800416c <HAL_RCC_OscConfig+0x13c>
 8004166:	69bb      	ldr	r3, [r7, #24]
 8004168:	2b04      	cmp	r3, #4
 800416a:	d11f      	bne.n	80041ac <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800416c:	4b4f      	ldr	r3, [pc, #316]	; (80042ac <HAL_RCC_OscConfig+0x27c>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004174:	2b00      	cmp	r3, #0
 8004176:	d005      	beq.n	8004184 <HAL_RCC_OscConfig+0x154>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	68db      	ldr	r3, [r3, #12]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d101      	bne.n	8004184 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	e265      	b.n	8004650 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004184:	4b49      	ldr	r3, [pc, #292]	; (80042ac <HAL_RCC_OscConfig+0x27c>)
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	691b      	ldr	r3, [r3, #16]
 8004190:	061b      	lsls	r3, r3, #24
 8004192:	4946      	ldr	r1, [pc, #280]	; (80042ac <HAL_RCC_OscConfig+0x27c>)
 8004194:	4313      	orrs	r3, r2
 8004196:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004198:	4b45      	ldr	r3, [pc, #276]	; (80042b0 <HAL_RCC_OscConfig+0x280>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4618      	mov	r0, r3
 800419e:	f7fd fdbd 	bl	8001d1c <HAL_InitTick>
 80041a2:	4603      	mov	r3, r0
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d043      	beq.n	8004230 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	e251      	b.n	8004650 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d023      	beq.n	80041fc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041b4:	4b3d      	ldr	r3, [pc, #244]	; (80042ac <HAL_RCC_OscConfig+0x27c>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a3c      	ldr	r2, [pc, #240]	; (80042ac <HAL_RCC_OscConfig+0x27c>)
 80041ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041c0:	f7fd fdf8 	bl	8001db4 <HAL_GetTick>
 80041c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041c6:	e008      	b.n	80041da <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041c8:	f7fd fdf4 	bl	8001db4 <HAL_GetTick>
 80041cc:	4602      	mov	r2, r0
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	1ad3      	subs	r3, r2, r3
 80041d2:	2b02      	cmp	r3, #2
 80041d4:	d901      	bls.n	80041da <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80041d6:	2303      	movs	r3, #3
 80041d8:	e23a      	b.n	8004650 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041da:	4b34      	ldr	r3, [pc, #208]	; (80042ac <HAL_RCC_OscConfig+0x27c>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d0f0      	beq.n	80041c8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041e6:	4b31      	ldr	r3, [pc, #196]	; (80042ac <HAL_RCC_OscConfig+0x27c>)
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	691b      	ldr	r3, [r3, #16]
 80041f2:	061b      	lsls	r3, r3, #24
 80041f4:	492d      	ldr	r1, [pc, #180]	; (80042ac <HAL_RCC_OscConfig+0x27c>)
 80041f6:	4313      	orrs	r3, r2
 80041f8:	604b      	str	r3, [r1, #4]
 80041fa:	e01a      	b.n	8004232 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041fc:	4b2b      	ldr	r3, [pc, #172]	; (80042ac <HAL_RCC_OscConfig+0x27c>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a2a      	ldr	r2, [pc, #168]	; (80042ac <HAL_RCC_OscConfig+0x27c>)
 8004202:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004206:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004208:	f7fd fdd4 	bl	8001db4 <HAL_GetTick>
 800420c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800420e:	e008      	b.n	8004222 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004210:	f7fd fdd0 	bl	8001db4 <HAL_GetTick>
 8004214:	4602      	mov	r2, r0
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	1ad3      	subs	r3, r2, r3
 800421a:	2b02      	cmp	r3, #2
 800421c:	d901      	bls.n	8004222 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800421e:	2303      	movs	r3, #3
 8004220:	e216      	b.n	8004650 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004222:	4b22      	ldr	r3, [pc, #136]	; (80042ac <HAL_RCC_OscConfig+0x27c>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800422a:	2b00      	cmp	r3, #0
 800422c:	d1f0      	bne.n	8004210 <HAL_RCC_OscConfig+0x1e0>
 800422e:	e000      	b.n	8004232 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004230:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 0308 	and.w	r3, r3, #8
 800423a:	2b00      	cmp	r3, #0
 800423c:	d041      	beq.n	80042c2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	695b      	ldr	r3, [r3, #20]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d01c      	beq.n	8004280 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004246:	4b19      	ldr	r3, [pc, #100]	; (80042ac <HAL_RCC_OscConfig+0x27c>)
 8004248:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800424c:	4a17      	ldr	r2, [pc, #92]	; (80042ac <HAL_RCC_OscConfig+0x27c>)
 800424e:	f043 0301 	orr.w	r3, r3, #1
 8004252:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004256:	f7fd fdad 	bl	8001db4 <HAL_GetTick>
 800425a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800425c:	e008      	b.n	8004270 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800425e:	f7fd fda9 	bl	8001db4 <HAL_GetTick>
 8004262:	4602      	mov	r2, r0
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	1ad3      	subs	r3, r2, r3
 8004268:	2b02      	cmp	r3, #2
 800426a:	d901      	bls.n	8004270 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800426c:	2303      	movs	r3, #3
 800426e:	e1ef      	b.n	8004650 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004270:	4b0e      	ldr	r3, [pc, #56]	; (80042ac <HAL_RCC_OscConfig+0x27c>)
 8004272:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004276:	f003 0302 	and.w	r3, r3, #2
 800427a:	2b00      	cmp	r3, #0
 800427c:	d0ef      	beq.n	800425e <HAL_RCC_OscConfig+0x22e>
 800427e:	e020      	b.n	80042c2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004280:	4b0a      	ldr	r3, [pc, #40]	; (80042ac <HAL_RCC_OscConfig+0x27c>)
 8004282:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004286:	4a09      	ldr	r2, [pc, #36]	; (80042ac <HAL_RCC_OscConfig+0x27c>)
 8004288:	f023 0301 	bic.w	r3, r3, #1
 800428c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004290:	f7fd fd90 	bl	8001db4 <HAL_GetTick>
 8004294:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004296:	e00d      	b.n	80042b4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004298:	f7fd fd8c 	bl	8001db4 <HAL_GetTick>
 800429c:	4602      	mov	r2, r0
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	1ad3      	subs	r3, r2, r3
 80042a2:	2b02      	cmp	r3, #2
 80042a4:	d906      	bls.n	80042b4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80042a6:	2303      	movs	r3, #3
 80042a8:	e1d2      	b.n	8004650 <HAL_RCC_OscConfig+0x620>
 80042aa:	bf00      	nop
 80042ac:	40021000 	.word	0x40021000
 80042b0:	20000120 	.word	0x20000120
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80042b4:	4b8c      	ldr	r3, [pc, #560]	; (80044e8 <HAL_RCC_OscConfig+0x4b8>)
 80042b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042ba:	f003 0302 	and.w	r3, r3, #2
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d1ea      	bne.n	8004298 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 0304 	and.w	r3, r3, #4
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	f000 80a6 	beq.w	800441c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042d0:	2300      	movs	r3, #0
 80042d2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80042d4:	4b84      	ldr	r3, [pc, #528]	; (80044e8 <HAL_RCC_OscConfig+0x4b8>)
 80042d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d101      	bne.n	80042e4 <HAL_RCC_OscConfig+0x2b4>
 80042e0:	2301      	movs	r3, #1
 80042e2:	e000      	b.n	80042e6 <HAL_RCC_OscConfig+0x2b6>
 80042e4:	2300      	movs	r3, #0
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d00d      	beq.n	8004306 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042ea:	4b7f      	ldr	r3, [pc, #508]	; (80044e8 <HAL_RCC_OscConfig+0x4b8>)
 80042ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042ee:	4a7e      	ldr	r2, [pc, #504]	; (80044e8 <HAL_RCC_OscConfig+0x4b8>)
 80042f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042f4:	6593      	str	r3, [r2, #88]	; 0x58
 80042f6:	4b7c      	ldr	r3, [pc, #496]	; (80044e8 <HAL_RCC_OscConfig+0x4b8>)
 80042f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042fe:	60fb      	str	r3, [r7, #12]
 8004300:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004302:	2301      	movs	r3, #1
 8004304:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004306:	4b79      	ldr	r3, [pc, #484]	; (80044ec <HAL_RCC_OscConfig+0x4bc>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800430e:	2b00      	cmp	r3, #0
 8004310:	d118      	bne.n	8004344 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004312:	4b76      	ldr	r3, [pc, #472]	; (80044ec <HAL_RCC_OscConfig+0x4bc>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a75      	ldr	r2, [pc, #468]	; (80044ec <HAL_RCC_OscConfig+0x4bc>)
 8004318:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800431c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800431e:	f7fd fd49 	bl	8001db4 <HAL_GetTick>
 8004322:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004324:	e008      	b.n	8004338 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004326:	f7fd fd45 	bl	8001db4 <HAL_GetTick>
 800432a:	4602      	mov	r2, r0
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	1ad3      	subs	r3, r2, r3
 8004330:	2b02      	cmp	r3, #2
 8004332:	d901      	bls.n	8004338 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004334:	2303      	movs	r3, #3
 8004336:	e18b      	b.n	8004650 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004338:	4b6c      	ldr	r3, [pc, #432]	; (80044ec <HAL_RCC_OscConfig+0x4bc>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004340:	2b00      	cmp	r3, #0
 8004342:	d0f0      	beq.n	8004326 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	2b01      	cmp	r3, #1
 800434a:	d108      	bne.n	800435e <HAL_RCC_OscConfig+0x32e>
 800434c:	4b66      	ldr	r3, [pc, #408]	; (80044e8 <HAL_RCC_OscConfig+0x4b8>)
 800434e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004352:	4a65      	ldr	r2, [pc, #404]	; (80044e8 <HAL_RCC_OscConfig+0x4b8>)
 8004354:	f043 0301 	orr.w	r3, r3, #1
 8004358:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800435c:	e024      	b.n	80043a8 <HAL_RCC_OscConfig+0x378>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	2b05      	cmp	r3, #5
 8004364:	d110      	bne.n	8004388 <HAL_RCC_OscConfig+0x358>
 8004366:	4b60      	ldr	r3, [pc, #384]	; (80044e8 <HAL_RCC_OscConfig+0x4b8>)
 8004368:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800436c:	4a5e      	ldr	r2, [pc, #376]	; (80044e8 <HAL_RCC_OscConfig+0x4b8>)
 800436e:	f043 0304 	orr.w	r3, r3, #4
 8004372:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004376:	4b5c      	ldr	r3, [pc, #368]	; (80044e8 <HAL_RCC_OscConfig+0x4b8>)
 8004378:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800437c:	4a5a      	ldr	r2, [pc, #360]	; (80044e8 <HAL_RCC_OscConfig+0x4b8>)
 800437e:	f043 0301 	orr.w	r3, r3, #1
 8004382:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004386:	e00f      	b.n	80043a8 <HAL_RCC_OscConfig+0x378>
 8004388:	4b57      	ldr	r3, [pc, #348]	; (80044e8 <HAL_RCC_OscConfig+0x4b8>)
 800438a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800438e:	4a56      	ldr	r2, [pc, #344]	; (80044e8 <HAL_RCC_OscConfig+0x4b8>)
 8004390:	f023 0301 	bic.w	r3, r3, #1
 8004394:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004398:	4b53      	ldr	r3, [pc, #332]	; (80044e8 <HAL_RCC_OscConfig+0x4b8>)
 800439a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800439e:	4a52      	ldr	r2, [pc, #328]	; (80044e8 <HAL_RCC_OscConfig+0x4b8>)
 80043a0:	f023 0304 	bic.w	r3, r3, #4
 80043a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d016      	beq.n	80043de <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043b0:	f7fd fd00 	bl	8001db4 <HAL_GetTick>
 80043b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043b6:	e00a      	b.n	80043ce <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043b8:	f7fd fcfc 	bl	8001db4 <HAL_GetTick>
 80043bc:	4602      	mov	r2, r0
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	1ad3      	subs	r3, r2, r3
 80043c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d901      	bls.n	80043ce <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80043ca:	2303      	movs	r3, #3
 80043cc:	e140      	b.n	8004650 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043ce:	4b46      	ldr	r3, [pc, #280]	; (80044e8 <HAL_RCC_OscConfig+0x4b8>)
 80043d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043d4:	f003 0302 	and.w	r3, r3, #2
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d0ed      	beq.n	80043b8 <HAL_RCC_OscConfig+0x388>
 80043dc:	e015      	b.n	800440a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043de:	f7fd fce9 	bl	8001db4 <HAL_GetTick>
 80043e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80043e4:	e00a      	b.n	80043fc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043e6:	f7fd fce5 	bl	8001db4 <HAL_GetTick>
 80043ea:	4602      	mov	r2, r0
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	1ad3      	subs	r3, r2, r3
 80043f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d901      	bls.n	80043fc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80043f8:	2303      	movs	r3, #3
 80043fa:	e129      	b.n	8004650 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80043fc:	4b3a      	ldr	r3, [pc, #232]	; (80044e8 <HAL_RCC_OscConfig+0x4b8>)
 80043fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004402:	f003 0302 	and.w	r3, r3, #2
 8004406:	2b00      	cmp	r3, #0
 8004408:	d1ed      	bne.n	80043e6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800440a:	7ffb      	ldrb	r3, [r7, #31]
 800440c:	2b01      	cmp	r3, #1
 800440e:	d105      	bne.n	800441c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004410:	4b35      	ldr	r3, [pc, #212]	; (80044e8 <HAL_RCC_OscConfig+0x4b8>)
 8004412:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004414:	4a34      	ldr	r2, [pc, #208]	; (80044e8 <HAL_RCC_OscConfig+0x4b8>)
 8004416:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800441a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f003 0320 	and.w	r3, r3, #32
 8004424:	2b00      	cmp	r3, #0
 8004426:	d03c      	beq.n	80044a2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	699b      	ldr	r3, [r3, #24]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d01c      	beq.n	800446a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004430:	4b2d      	ldr	r3, [pc, #180]	; (80044e8 <HAL_RCC_OscConfig+0x4b8>)
 8004432:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004436:	4a2c      	ldr	r2, [pc, #176]	; (80044e8 <HAL_RCC_OscConfig+0x4b8>)
 8004438:	f043 0301 	orr.w	r3, r3, #1
 800443c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004440:	f7fd fcb8 	bl	8001db4 <HAL_GetTick>
 8004444:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004446:	e008      	b.n	800445a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004448:	f7fd fcb4 	bl	8001db4 <HAL_GetTick>
 800444c:	4602      	mov	r2, r0
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	2b02      	cmp	r3, #2
 8004454:	d901      	bls.n	800445a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004456:	2303      	movs	r3, #3
 8004458:	e0fa      	b.n	8004650 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800445a:	4b23      	ldr	r3, [pc, #140]	; (80044e8 <HAL_RCC_OscConfig+0x4b8>)
 800445c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004460:	f003 0302 	and.w	r3, r3, #2
 8004464:	2b00      	cmp	r3, #0
 8004466:	d0ef      	beq.n	8004448 <HAL_RCC_OscConfig+0x418>
 8004468:	e01b      	b.n	80044a2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800446a:	4b1f      	ldr	r3, [pc, #124]	; (80044e8 <HAL_RCC_OscConfig+0x4b8>)
 800446c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004470:	4a1d      	ldr	r2, [pc, #116]	; (80044e8 <HAL_RCC_OscConfig+0x4b8>)
 8004472:	f023 0301 	bic.w	r3, r3, #1
 8004476:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800447a:	f7fd fc9b 	bl	8001db4 <HAL_GetTick>
 800447e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004480:	e008      	b.n	8004494 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004482:	f7fd fc97 	bl	8001db4 <HAL_GetTick>
 8004486:	4602      	mov	r2, r0
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	1ad3      	subs	r3, r2, r3
 800448c:	2b02      	cmp	r3, #2
 800448e:	d901      	bls.n	8004494 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004490:	2303      	movs	r3, #3
 8004492:	e0dd      	b.n	8004650 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004494:	4b14      	ldr	r3, [pc, #80]	; (80044e8 <HAL_RCC_OscConfig+0x4b8>)
 8004496:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800449a:	f003 0302 	and.w	r3, r3, #2
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d1ef      	bne.n	8004482 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	69db      	ldr	r3, [r3, #28]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	f000 80d1 	beq.w	800464e <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80044ac:	4b0e      	ldr	r3, [pc, #56]	; (80044e8 <HAL_RCC_OscConfig+0x4b8>)
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	f003 030c 	and.w	r3, r3, #12
 80044b4:	2b0c      	cmp	r3, #12
 80044b6:	f000 808b 	beq.w	80045d0 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	69db      	ldr	r3, [r3, #28]
 80044be:	2b02      	cmp	r3, #2
 80044c0:	d15e      	bne.n	8004580 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044c2:	4b09      	ldr	r3, [pc, #36]	; (80044e8 <HAL_RCC_OscConfig+0x4b8>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a08      	ldr	r2, [pc, #32]	; (80044e8 <HAL_RCC_OscConfig+0x4b8>)
 80044c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80044cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044ce:	f7fd fc71 	bl	8001db4 <HAL_GetTick>
 80044d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044d4:	e00c      	b.n	80044f0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044d6:	f7fd fc6d 	bl	8001db4 <HAL_GetTick>
 80044da:	4602      	mov	r2, r0
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	1ad3      	subs	r3, r2, r3
 80044e0:	2b02      	cmp	r3, #2
 80044e2:	d905      	bls.n	80044f0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80044e4:	2303      	movs	r3, #3
 80044e6:	e0b3      	b.n	8004650 <HAL_RCC_OscConfig+0x620>
 80044e8:	40021000 	.word	0x40021000
 80044ec:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044f0:	4b59      	ldr	r3, [pc, #356]	; (8004658 <HAL_RCC_OscConfig+0x628>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d1ec      	bne.n	80044d6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80044fc:	4b56      	ldr	r3, [pc, #344]	; (8004658 <HAL_RCC_OscConfig+0x628>)
 80044fe:	68da      	ldr	r2, [r3, #12]
 8004500:	4b56      	ldr	r3, [pc, #344]	; (800465c <HAL_RCC_OscConfig+0x62c>)
 8004502:	4013      	ands	r3, r2
 8004504:	687a      	ldr	r2, [r7, #4]
 8004506:	6a11      	ldr	r1, [r2, #32]
 8004508:	687a      	ldr	r2, [r7, #4]
 800450a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800450c:	3a01      	subs	r2, #1
 800450e:	0112      	lsls	r2, r2, #4
 8004510:	4311      	orrs	r1, r2
 8004512:	687a      	ldr	r2, [r7, #4]
 8004514:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004516:	0212      	lsls	r2, r2, #8
 8004518:	4311      	orrs	r1, r2
 800451a:	687a      	ldr	r2, [r7, #4]
 800451c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800451e:	0852      	lsrs	r2, r2, #1
 8004520:	3a01      	subs	r2, #1
 8004522:	0552      	lsls	r2, r2, #21
 8004524:	4311      	orrs	r1, r2
 8004526:	687a      	ldr	r2, [r7, #4]
 8004528:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800452a:	0852      	lsrs	r2, r2, #1
 800452c:	3a01      	subs	r2, #1
 800452e:	0652      	lsls	r2, r2, #25
 8004530:	4311      	orrs	r1, r2
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004536:	06d2      	lsls	r2, r2, #27
 8004538:	430a      	orrs	r2, r1
 800453a:	4947      	ldr	r1, [pc, #284]	; (8004658 <HAL_RCC_OscConfig+0x628>)
 800453c:	4313      	orrs	r3, r2
 800453e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004540:	4b45      	ldr	r3, [pc, #276]	; (8004658 <HAL_RCC_OscConfig+0x628>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a44      	ldr	r2, [pc, #272]	; (8004658 <HAL_RCC_OscConfig+0x628>)
 8004546:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800454a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800454c:	4b42      	ldr	r3, [pc, #264]	; (8004658 <HAL_RCC_OscConfig+0x628>)
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	4a41      	ldr	r2, [pc, #260]	; (8004658 <HAL_RCC_OscConfig+0x628>)
 8004552:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004556:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004558:	f7fd fc2c 	bl	8001db4 <HAL_GetTick>
 800455c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800455e:	e008      	b.n	8004572 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004560:	f7fd fc28 	bl	8001db4 <HAL_GetTick>
 8004564:	4602      	mov	r2, r0
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	1ad3      	subs	r3, r2, r3
 800456a:	2b02      	cmp	r3, #2
 800456c:	d901      	bls.n	8004572 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800456e:	2303      	movs	r3, #3
 8004570:	e06e      	b.n	8004650 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004572:	4b39      	ldr	r3, [pc, #228]	; (8004658 <HAL_RCC_OscConfig+0x628>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800457a:	2b00      	cmp	r3, #0
 800457c:	d0f0      	beq.n	8004560 <HAL_RCC_OscConfig+0x530>
 800457e:	e066      	b.n	800464e <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004580:	4b35      	ldr	r3, [pc, #212]	; (8004658 <HAL_RCC_OscConfig+0x628>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a34      	ldr	r2, [pc, #208]	; (8004658 <HAL_RCC_OscConfig+0x628>)
 8004586:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800458a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800458c:	4b32      	ldr	r3, [pc, #200]	; (8004658 <HAL_RCC_OscConfig+0x628>)
 800458e:	68db      	ldr	r3, [r3, #12]
 8004590:	4a31      	ldr	r2, [pc, #196]	; (8004658 <HAL_RCC_OscConfig+0x628>)
 8004592:	f023 0303 	bic.w	r3, r3, #3
 8004596:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004598:	4b2f      	ldr	r3, [pc, #188]	; (8004658 <HAL_RCC_OscConfig+0x628>)
 800459a:	68db      	ldr	r3, [r3, #12]
 800459c:	4a2e      	ldr	r2, [pc, #184]	; (8004658 <HAL_RCC_OscConfig+0x628>)
 800459e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80045a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045a6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045a8:	f7fd fc04 	bl	8001db4 <HAL_GetTick>
 80045ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045ae:	e008      	b.n	80045c2 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045b0:	f7fd fc00 	bl	8001db4 <HAL_GetTick>
 80045b4:	4602      	mov	r2, r0
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	1ad3      	subs	r3, r2, r3
 80045ba:	2b02      	cmp	r3, #2
 80045bc:	d901      	bls.n	80045c2 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80045be:	2303      	movs	r3, #3
 80045c0:	e046      	b.n	8004650 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045c2:	4b25      	ldr	r3, [pc, #148]	; (8004658 <HAL_RCC_OscConfig+0x628>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d1f0      	bne.n	80045b0 <HAL_RCC_OscConfig+0x580>
 80045ce:	e03e      	b.n	800464e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	69db      	ldr	r3, [r3, #28]
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d101      	bne.n	80045dc <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	e039      	b.n	8004650 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80045dc:	4b1e      	ldr	r3, [pc, #120]	; (8004658 <HAL_RCC_OscConfig+0x628>)
 80045de:	68db      	ldr	r3, [r3, #12]
 80045e0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	f003 0203 	and.w	r2, r3, #3
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6a1b      	ldr	r3, [r3, #32]
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d12c      	bne.n	800464a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045fa:	3b01      	subs	r3, #1
 80045fc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045fe:	429a      	cmp	r2, r3
 8004600:	d123      	bne.n	800464a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800460c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800460e:	429a      	cmp	r2, r3
 8004610:	d11b      	bne.n	800464a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800461c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800461e:	429a      	cmp	r2, r3
 8004620:	d113      	bne.n	800464a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800462c:	085b      	lsrs	r3, r3, #1
 800462e:	3b01      	subs	r3, #1
 8004630:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004632:	429a      	cmp	r2, r3
 8004634:	d109      	bne.n	800464a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004640:	085b      	lsrs	r3, r3, #1
 8004642:	3b01      	subs	r3, #1
 8004644:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004646:	429a      	cmp	r2, r3
 8004648:	d001      	beq.n	800464e <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	e000      	b.n	8004650 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800464e:	2300      	movs	r3, #0
}
 8004650:	4618      	mov	r0, r3
 8004652:	3720      	adds	r7, #32
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}
 8004658:	40021000 	.word	0x40021000
 800465c:	019f800c 	.word	0x019f800c

08004660 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b086      	sub	sp, #24
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
 8004668:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800466a:	2300      	movs	r3, #0
 800466c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d101      	bne.n	8004678 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	e11e      	b.n	80048b6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004678:	4b91      	ldr	r3, [pc, #580]	; (80048c0 <HAL_RCC_ClockConfig+0x260>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f003 030f 	and.w	r3, r3, #15
 8004680:	683a      	ldr	r2, [r7, #0]
 8004682:	429a      	cmp	r2, r3
 8004684:	d910      	bls.n	80046a8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004686:	4b8e      	ldr	r3, [pc, #568]	; (80048c0 <HAL_RCC_ClockConfig+0x260>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f023 020f 	bic.w	r2, r3, #15
 800468e:	498c      	ldr	r1, [pc, #560]	; (80048c0 <HAL_RCC_ClockConfig+0x260>)
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	4313      	orrs	r3, r2
 8004694:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004696:	4b8a      	ldr	r3, [pc, #552]	; (80048c0 <HAL_RCC_ClockConfig+0x260>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f003 030f 	and.w	r3, r3, #15
 800469e:	683a      	ldr	r2, [r7, #0]
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d001      	beq.n	80046a8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	e106      	b.n	80048b6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f003 0301 	and.w	r3, r3, #1
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d073      	beq.n	800479c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	2b03      	cmp	r3, #3
 80046ba:	d129      	bne.n	8004710 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046bc:	4b81      	ldr	r3, [pc, #516]	; (80048c4 <HAL_RCC_ClockConfig+0x264>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d101      	bne.n	80046cc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	e0f4      	b.n	80048b6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80046cc:	f000 f99e 	bl	8004a0c <RCC_GetSysClockFreqFromPLLSource>
 80046d0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	4a7c      	ldr	r2, [pc, #496]	; (80048c8 <HAL_RCC_ClockConfig+0x268>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d93f      	bls.n	800475a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80046da:	4b7a      	ldr	r3, [pc, #488]	; (80048c4 <HAL_RCC_ClockConfig+0x264>)
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d009      	beq.n	80046fa <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d033      	beq.n	800475a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d12f      	bne.n	800475a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80046fa:	4b72      	ldr	r3, [pc, #456]	; (80048c4 <HAL_RCC_ClockConfig+0x264>)
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004702:	4a70      	ldr	r2, [pc, #448]	; (80048c4 <HAL_RCC_ClockConfig+0x264>)
 8004704:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004708:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800470a:	2380      	movs	r3, #128	; 0x80
 800470c:	617b      	str	r3, [r7, #20]
 800470e:	e024      	b.n	800475a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	2b02      	cmp	r3, #2
 8004716:	d107      	bne.n	8004728 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004718:	4b6a      	ldr	r3, [pc, #424]	; (80048c4 <HAL_RCC_ClockConfig+0x264>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004720:	2b00      	cmp	r3, #0
 8004722:	d109      	bne.n	8004738 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	e0c6      	b.n	80048b6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004728:	4b66      	ldr	r3, [pc, #408]	; (80048c4 <HAL_RCC_ClockConfig+0x264>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004730:	2b00      	cmp	r3, #0
 8004732:	d101      	bne.n	8004738 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	e0be      	b.n	80048b6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004738:	f000 f8ce 	bl	80048d8 <HAL_RCC_GetSysClockFreq>
 800473c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	4a61      	ldr	r2, [pc, #388]	; (80048c8 <HAL_RCC_ClockConfig+0x268>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d909      	bls.n	800475a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004746:	4b5f      	ldr	r3, [pc, #380]	; (80048c4 <HAL_RCC_ClockConfig+0x264>)
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800474e:	4a5d      	ldr	r2, [pc, #372]	; (80048c4 <HAL_RCC_ClockConfig+0x264>)
 8004750:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004754:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004756:	2380      	movs	r3, #128	; 0x80
 8004758:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800475a:	4b5a      	ldr	r3, [pc, #360]	; (80048c4 <HAL_RCC_ClockConfig+0x264>)
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	f023 0203 	bic.w	r2, r3, #3
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	4957      	ldr	r1, [pc, #348]	; (80048c4 <HAL_RCC_ClockConfig+0x264>)
 8004768:	4313      	orrs	r3, r2
 800476a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800476c:	f7fd fb22 	bl	8001db4 <HAL_GetTick>
 8004770:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004772:	e00a      	b.n	800478a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004774:	f7fd fb1e 	bl	8001db4 <HAL_GetTick>
 8004778:	4602      	mov	r2, r0
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	1ad3      	subs	r3, r2, r3
 800477e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004782:	4293      	cmp	r3, r2
 8004784:	d901      	bls.n	800478a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004786:	2303      	movs	r3, #3
 8004788:	e095      	b.n	80048b6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800478a:	4b4e      	ldr	r3, [pc, #312]	; (80048c4 <HAL_RCC_ClockConfig+0x264>)
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	f003 020c 	and.w	r2, r3, #12
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	009b      	lsls	r3, r3, #2
 8004798:	429a      	cmp	r2, r3
 800479a:	d1eb      	bne.n	8004774 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 0302 	and.w	r3, r3, #2
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d023      	beq.n	80047f0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 0304 	and.w	r3, r3, #4
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d005      	beq.n	80047c0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047b4:	4b43      	ldr	r3, [pc, #268]	; (80048c4 <HAL_RCC_ClockConfig+0x264>)
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	4a42      	ldr	r2, [pc, #264]	; (80048c4 <HAL_RCC_ClockConfig+0x264>)
 80047ba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80047be:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 0308 	and.w	r3, r3, #8
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d007      	beq.n	80047dc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80047cc:	4b3d      	ldr	r3, [pc, #244]	; (80048c4 <HAL_RCC_ClockConfig+0x264>)
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80047d4:	4a3b      	ldr	r2, [pc, #236]	; (80048c4 <HAL_RCC_ClockConfig+0x264>)
 80047d6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80047da:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047dc:	4b39      	ldr	r3, [pc, #228]	; (80048c4 <HAL_RCC_ClockConfig+0x264>)
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	4936      	ldr	r1, [pc, #216]	; (80048c4 <HAL_RCC_ClockConfig+0x264>)
 80047ea:	4313      	orrs	r3, r2
 80047ec:	608b      	str	r3, [r1, #8]
 80047ee:	e008      	b.n	8004802 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	2b80      	cmp	r3, #128	; 0x80
 80047f4:	d105      	bne.n	8004802 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80047f6:	4b33      	ldr	r3, [pc, #204]	; (80048c4 <HAL_RCC_ClockConfig+0x264>)
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	4a32      	ldr	r2, [pc, #200]	; (80048c4 <HAL_RCC_ClockConfig+0x264>)
 80047fc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004800:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004802:	4b2f      	ldr	r3, [pc, #188]	; (80048c0 <HAL_RCC_ClockConfig+0x260>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 030f 	and.w	r3, r3, #15
 800480a:	683a      	ldr	r2, [r7, #0]
 800480c:	429a      	cmp	r2, r3
 800480e:	d21d      	bcs.n	800484c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004810:	4b2b      	ldr	r3, [pc, #172]	; (80048c0 <HAL_RCC_ClockConfig+0x260>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f023 020f 	bic.w	r2, r3, #15
 8004818:	4929      	ldr	r1, [pc, #164]	; (80048c0 <HAL_RCC_ClockConfig+0x260>)
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	4313      	orrs	r3, r2
 800481e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004820:	f7fd fac8 	bl	8001db4 <HAL_GetTick>
 8004824:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004826:	e00a      	b.n	800483e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004828:	f7fd fac4 	bl	8001db4 <HAL_GetTick>
 800482c:	4602      	mov	r2, r0
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	1ad3      	subs	r3, r2, r3
 8004832:	f241 3288 	movw	r2, #5000	; 0x1388
 8004836:	4293      	cmp	r3, r2
 8004838:	d901      	bls.n	800483e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800483a:	2303      	movs	r3, #3
 800483c:	e03b      	b.n	80048b6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800483e:	4b20      	ldr	r3, [pc, #128]	; (80048c0 <HAL_RCC_ClockConfig+0x260>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 030f 	and.w	r3, r3, #15
 8004846:	683a      	ldr	r2, [r7, #0]
 8004848:	429a      	cmp	r2, r3
 800484a:	d1ed      	bne.n	8004828 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f003 0304 	and.w	r3, r3, #4
 8004854:	2b00      	cmp	r3, #0
 8004856:	d008      	beq.n	800486a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004858:	4b1a      	ldr	r3, [pc, #104]	; (80048c4 <HAL_RCC_ClockConfig+0x264>)
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	68db      	ldr	r3, [r3, #12]
 8004864:	4917      	ldr	r1, [pc, #92]	; (80048c4 <HAL_RCC_ClockConfig+0x264>)
 8004866:	4313      	orrs	r3, r2
 8004868:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f003 0308 	and.w	r3, r3, #8
 8004872:	2b00      	cmp	r3, #0
 8004874:	d009      	beq.n	800488a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004876:	4b13      	ldr	r3, [pc, #76]	; (80048c4 <HAL_RCC_ClockConfig+0x264>)
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	691b      	ldr	r3, [r3, #16]
 8004882:	00db      	lsls	r3, r3, #3
 8004884:	490f      	ldr	r1, [pc, #60]	; (80048c4 <HAL_RCC_ClockConfig+0x264>)
 8004886:	4313      	orrs	r3, r2
 8004888:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800488a:	f000 f825 	bl	80048d8 <HAL_RCC_GetSysClockFreq>
 800488e:	4602      	mov	r2, r0
 8004890:	4b0c      	ldr	r3, [pc, #48]	; (80048c4 <HAL_RCC_ClockConfig+0x264>)
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	091b      	lsrs	r3, r3, #4
 8004896:	f003 030f 	and.w	r3, r3, #15
 800489a:	490c      	ldr	r1, [pc, #48]	; (80048cc <HAL_RCC_ClockConfig+0x26c>)
 800489c:	5ccb      	ldrb	r3, [r1, r3]
 800489e:	f003 031f 	and.w	r3, r3, #31
 80048a2:	fa22 f303 	lsr.w	r3, r2, r3
 80048a6:	4a0a      	ldr	r2, [pc, #40]	; (80048d0 <HAL_RCC_ClockConfig+0x270>)
 80048a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80048aa:	4b0a      	ldr	r3, [pc, #40]	; (80048d4 <HAL_RCC_ClockConfig+0x274>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4618      	mov	r0, r3
 80048b0:	f7fd fa34 	bl	8001d1c <HAL_InitTick>
 80048b4:	4603      	mov	r3, r0
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3718      	adds	r7, #24
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}
 80048be:	bf00      	nop
 80048c0:	40022000 	.word	0x40022000
 80048c4:	40021000 	.word	0x40021000
 80048c8:	04c4b400 	.word	0x04c4b400
 80048cc:	0800b24c 	.word	0x0800b24c
 80048d0:	2000011c 	.word	0x2000011c
 80048d4:	20000120 	.word	0x20000120

080048d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048d8:	b480      	push	{r7}
 80048da:	b087      	sub	sp, #28
 80048dc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80048de:	4b2c      	ldr	r3, [pc, #176]	; (8004990 <HAL_RCC_GetSysClockFreq+0xb8>)
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	f003 030c 	and.w	r3, r3, #12
 80048e6:	2b04      	cmp	r3, #4
 80048e8:	d102      	bne.n	80048f0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80048ea:	4b2a      	ldr	r3, [pc, #168]	; (8004994 <HAL_RCC_GetSysClockFreq+0xbc>)
 80048ec:	613b      	str	r3, [r7, #16]
 80048ee:	e047      	b.n	8004980 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80048f0:	4b27      	ldr	r3, [pc, #156]	; (8004990 <HAL_RCC_GetSysClockFreq+0xb8>)
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	f003 030c 	and.w	r3, r3, #12
 80048f8:	2b08      	cmp	r3, #8
 80048fa:	d102      	bne.n	8004902 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80048fc:	4b26      	ldr	r3, [pc, #152]	; (8004998 <HAL_RCC_GetSysClockFreq+0xc0>)
 80048fe:	613b      	str	r3, [r7, #16]
 8004900:	e03e      	b.n	8004980 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004902:	4b23      	ldr	r3, [pc, #140]	; (8004990 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	f003 030c 	and.w	r3, r3, #12
 800490a:	2b0c      	cmp	r3, #12
 800490c:	d136      	bne.n	800497c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800490e:	4b20      	ldr	r3, [pc, #128]	; (8004990 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004910:	68db      	ldr	r3, [r3, #12]
 8004912:	f003 0303 	and.w	r3, r3, #3
 8004916:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004918:	4b1d      	ldr	r3, [pc, #116]	; (8004990 <HAL_RCC_GetSysClockFreq+0xb8>)
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	091b      	lsrs	r3, r3, #4
 800491e:	f003 030f 	and.w	r3, r3, #15
 8004922:	3301      	adds	r3, #1
 8004924:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2b03      	cmp	r3, #3
 800492a:	d10c      	bne.n	8004946 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800492c:	4a1a      	ldr	r2, [pc, #104]	; (8004998 <HAL_RCC_GetSysClockFreq+0xc0>)
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	fbb2 f3f3 	udiv	r3, r2, r3
 8004934:	4a16      	ldr	r2, [pc, #88]	; (8004990 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004936:	68d2      	ldr	r2, [r2, #12]
 8004938:	0a12      	lsrs	r2, r2, #8
 800493a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800493e:	fb02 f303 	mul.w	r3, r2, r3
 8004942:	617b      	str	r3, [r7, #20]
      break;
 8004944:	e00c      	b.n	8004960 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004946:	4a13      	ldr	r2, [pc, #76]	; (8004994 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	fbb2 f3f3 	udiv	r3, r2, r3
 800494e:	4a10      	ldr	r2, [pc, #64]	; (8004990 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004950:	68d2      	ldr	r2, [r2, #12]
 8004952:	0a12      	lsrs	r2, r2, #8
 8004954:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004958:	fb02 f303 	mul.w	r3, r2, r3
 800495c:	617b      	str	r3, [r7, #20]
      break;
 800495e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004960:	4b0b      	ldr	r3, [pc, #44]	; (8004990 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004962:	68db      	ldr	r3, [r3, #12]
 8004964:	0e5b      	lsrs	r3, r3, #25
 8004966:	f003 0303 	and.w	r3, r3, #3
 800496a:	3301      	adds	r3, #1
 800496c:	005b      	lsls	r3, r3, #1
 800496e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004970:	697a      	ldr	r2, [r7, #20]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	fbb2 f3f3 	udiv	r3, r2, r3
 8004978:	613b      	str	r3, [r7, #16]
 800497a:	e001      	b.n	8004980 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800497c:	2300      	movs	r3, #0
 800497e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004980:	693b      	ldr	r3, [r7, #16]
}
 8004982:	4618      	mov	r0, r3
 8004984:	371c      	adds	r7, #28
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr
 800498e:	bf00      	nop
 8004990:	40021000 	.word	0x40021000
 8004994:	00f42400 	.word	0x00f42400
 8004998:	016e3600 	.word	0x016e3600

0800499c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800499c:	b480      	push	{r7}
 800499e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049a0:	4b03      	ldr	r3, [pc, #12]	; (80049b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80049a2:	681b      	ldr	r3, [r3, #0]
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr
 80049ae:	bf00      	nop
 80049b0:	2000011c 	.word	0x2000011c

080049b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80049b8:	f7ff fff0 	bl	800499c <HAL_RCC_GetHCLKFreq>
 80049bc:	4602      	mov	r2, r0
 80049be:	4b06      	ldr	r3, [pc, #24]	; (80049d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	0a1b      	lsrs	r3, r3, #8
 80049c4:	f003 0307 	and.w	r3, r3, #7
 80049c8:	4904      	ldr	r1, [pc, #16]	; (80049dc <HAL_RCC_GetPCLK1Freq+0x28>)
 80049ca:	5ccb      	ldrb	r3, [r1, r3]
 80049cc:	f003 031f 	and.w	r3, r3, #31
 80049d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	bd80      	pop	{r7, pc}
 80049d8:	40021000 	.word	0x40021000
 80049dc:	0800b25c 	.word	0x0800b25c

080049e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80049e4:	f7ff ffda 	bl	800499c <HAL_RCC_GetHCLKFreq>
 80049e8:	4602      	mov	r2, r0
 80049ea:	4b06      	ldr	r3, [pc, #24]	; (8004a04 <HAL_RCC_GetPCLK2Freq+0x24>)
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	0adb      	lsrs	r3, r3, #11
 80049f0:	f003 0307 	and.w	r3, r3, #7
 80049f4:	4904      	ldr	r1, [pc, #16]	; (8004a08 <HAL_RCC_GetPCLK2Freq+0x28>)
 80049f6:	5ccb      	ldrb	r3, [r1, r3]
 80049f8:	f003 031f 	and.w	r3, r3, #31
 80049fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	bd80      	pop	{r7, pc}
 8004a04:	40021000 	.word	0x40021000
 8004a08:	0800b25c 	.word	0x0800b25c

08004a0c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b087      	sub	sp, #28
 8004a10:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004a12:	4b1e      	ldr	r3, [pc, #120]	; (8004a8c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004a14:	68db      	ldr	r3, [r3, #12]
 8004a16:	f003 0303 	and.w	r3, r3, #3
 8004a1a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004a1c:	4b1b      	ldr	r3, [pc, #108]	; (8004a8c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004a1e:	68db      	ldr	r3, [r3, #12]
 8004a20:	091b      	lsrs	r3, r3, #4
 8004a22:	f003 030f 	and.w	r3, r3, #15
 8004a26:	3301      	adds	r3, #1
 8004a28:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	2b03      	cmp	r3, #3
 8004a2e:	d10c      	bne.n	8004a4a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004a30:	4a17      	ldr	r2, [pc, #92]	; (8004a90 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a38:	4a14      	ldr	r2, [pc, #80]	; (8004a8c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004a3a:	68d2      	ldr	r2, [r2, #12]
 8004a3c:	0a12      	lsrs	r2, r2, #8
 8004a3e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004a42:	fb02 f303 	mul.w	r3, r2, r3
 8004a46:	617b      	str	r3, [r7, #20]
    break;
 8004a48:	e00c      	b.n	8004a64 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004a4a:	4a12      	ldr	r2, [pc, #72]	; (8004a94 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a52:	4a0e      	ldr	r2, [pc, #56]	; (8004a8c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004a54:	68d2      	ldr	r2, [r2, #12]
 8004a56:	0a12      	lsrs	r2, r2, #8
 8004a58:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004a5c:	fb02 f303 	mul.w	r3, r2, r3
 8004a60:	617b      	str	r3, [r7, #20]
    break;
 8004a62:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004a64:	4b09      	ldr	r3, [pc, #36]	; (8004a8c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004a66:	68db      	ldr	r3, [r3, #12]
 8004a68:	0e5b      	lsrs	r3, r3, #25
 8004a6a:	f003 0303 	and.w	r3, r3, #3
 8004a6e:	3301      	adds	r3, #1
 8004a70:	005b      	lsls	r3, r3, #1
 8004a72:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004a74:	697a      	ldr	r2, [r7, #20]
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a7c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004a7e:	687b      	ldr	r3, [r7, #4]
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	371c      	adds	r7, #28
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr
 8004a8c:	40021000 	.word	0x40021000
 8004a90:	016e3600 	.word	0x016e3600
 8004a94:	00f42400 	.word	0x00f42400

08004a98 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b086      	sub	sp, #24
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	f000 8098 	beq.w	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004aba:	4b43      	ldr	r3, [pc, #268]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004abc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004abe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d10d      	bne.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ac6:	4b40      	ldr	r3, [pc, #256]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aca:	4a3f      	ldr	r2, [pc, #252]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004acc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ad0:	6593      	str	r3, [r2, #88]	; 0x58
 8004ad2:	4b3d      	ldr	r3, [pc, #244]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ada:	60bb      	str	r3, [r7, #8]
 8004adc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ae2:	4b3a      	ldr	r3, [pc, #232]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a39      	ldr	r2, [pc, #228]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004ae8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004aec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004aee:	f7fd f961 	bl	8001db4 <HAL_GetTick>
 8004af2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004af4:	e009      	b.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004af6:	f7fd f95d 	bl	8001db4 <HAL_GetTick>
 8004afa:	4602      	mov	r2, r0
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	1ad3      	subs	r3, r2, r3
 8004b00:	2b02      	cmp	r3, #2
 8004b02:	d902      	bls.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004b04:	2303      	movs	r3, #3
 8004b06:	74fb      	strb	r3, [r7, #19]
        break;
 8004b08:	e005      	b.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004b0a:	4b30      	ldr	r3, [pc, #192]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d0ef      	beq.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004b16:	7cfb      	ldrb	r3, [r7, #19]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d159      	bne.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004b1c:	4b2a      	ldr	r3, [pc, #168]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b26:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d01e      	beq.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b32:	697a      	ldr	r2, [r7, #20]
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d019      	beq.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004b38:	4b23      	ldr	r3, [pc, #140]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b42:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004b44:	4b20      	ldr	r3, [pc, #128]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b4a:	4a1f      	ldr	r2, [pc, #124]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004b54:	4b1c      	ldr	r3, [pc, #112]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b5a:	4a1b      	ldr	r2, [pc, #108]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004b64:	4a18      	ldr	r2, [pc, #96]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	f003 0301 	and.w	r3, r3, #1
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d016      	beq.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b76:	f7fd f91d 	bl	8001db4 <HAL_GetTick>
 8004b7a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b7c:	e00b      	b.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b7e:	f7fd f919 	bl	8001db4 <HAL_GetTick>
 8004b82:	4602      	mov	r2, r0
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	1ad3      	subs	r3, r2, r3
 8004b88:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d902      	bls.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004b90:	2303      	movs	r3, #3
 8004b92:	74fb      	strb	r3, [r7, #19]
            break;
 8004b94:	e006      	b.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b96:	4b0c      	ldr	r3, [pc, #48]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b9c:	f003 0302 	and.w	r3, r3, #2
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d0ec      	beq.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004ba4:	7cfb      	ldrb	r3, [r7, #19]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d10b      	bne.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004baa:	4b07      	ldr	r3, [pc, #28]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bb0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bb8:	4903      	ldr	r1, [pc, #12]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004bc0:	e008      	b.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004bc2:	7cfb      	ldrb	r3, [r7, #19]
 8004bc4:	74bb      	strb	r3, [r7, #18]
 8004bc6:	e005      	b.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004bc8:	40021000 	.word	0x40021000
 8004bcc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bd0:	7cfb      	ldrb	r3, [r7, #19]
 8004bd2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004bd4:	7c7b      	ldrb	r3, [r7, #17]
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	d105      	bne.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bda:	4ba7      	ldr	r3, [pc, #668]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bde:	4aa6      	ldr	r2, [pc, #664]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004be0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004be4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 0301 	and.w	r3, r3, #1
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d00a      	beq.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004bf2:	4ba1      	ldr	r3, [pc, #644]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bf8:	f023 0203 	bic.w	r2, r3, #3
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	499d      	ldr	r1, [pc, #628]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c02:	4313      	orrs	r3, r2
 8004c04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 0302 	and.w	r3, r3, #2
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d00a      	beq.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004c14:	4b98      	ldr	r3, [pc, #608]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c1a:	f023 020c 	bic.w	r2, r3, #12
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	4995      	ldr	r1, [pc, #596]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c24:	4313      	orrs	r3, r2
 8004c26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f003 0304 	and.w	r3, r3, #4
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d00a      	beq.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004c36:	4b90      	ldr	r3, [pc, #576]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c3c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	68db      	ldr	r3, [r3, #12]
 8004c44:	498c      	ldr	r1, [pc, #560]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c46:	4313      	orrs	r3, r2
 8004c48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f003 0308 	and.w	r3, r3, #8
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d00a      	beq.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004c58:	4b87      	ldr	r3, [pc, #540]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c5e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	691b      	ldr	r3, [r3, #16]
 8004c66:	4984      	ldr	r1, [pc, #528]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f003 0310 	and.w	r3, r3, #16
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d00a      	beq.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004c7a:	4b7f      	ldr	r3, [pc, #508]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c80:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	695b      	ldr	r3, [r3, #20]
 8004c88:	497b      	ldr	r1, [pc, #492]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f003 0320 	and.w	r3, r3, #32
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d00a      	beq.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004c9c:	4b76      	ldr	r3, [pc, #472]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ca2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	699b      	ldr	r3, [r3, #24]
 8004caa:	4973      	ldr	r1, [pc, #460]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cac:	4313      	orrs	r3, r2
 8004cae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d00a      	beq.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004cbe:	4b6e      	ldr	r3, [pc, #440]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cc4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	69db      	ldr	r3, [r3, #28]
 8004ccc:	496a      	ldr	r1, [pc, #424]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d00a      	beq.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004ce0:	4b65      	ldr	r3, [pc, #404]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ce6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6a1b      	ldr	r3, [r3, #32]
 8004cee:	4962      	ldr	r1, [pc, #392]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d00a      	beq.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004d02:	4b5d      	ldr	r3, [pc, #372]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d08:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d10:	4959      	ldr	r1, [pc, #356]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d12:	4313      	orrs	r3, r2
 8004d14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d00a      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004d24:	4b54      	ldr	r3, [pc, #336]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d26:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004d2a:	f023 0203 	bic.w	r2, r3, #3
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d32:	4951      	ldr	r1, [pc, #324]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d34:	4313      	orrs	r3, r2
 8004d36:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d00a      	beq.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004d46:	4b4c      	ldr	r3, [pc, #304]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d4c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d54:	4948      	ldr	r1, [pc, #288]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d56:	4313      	orrs	r3, r2
 8004d58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d015      	beq.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004d68:	4b43      	ldr	r3, [pc, #268]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d6e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d76:	4940      	ldr	r1, [pc, #256]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d86:	d105      	bne.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d88:	4b3b      	ldr	r3, [pc, #236]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d8a:	68db      	ldr	r3, [r3, #12]
 8004d8c:	4a3a      	ldr	r2, [pc, #232]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d92:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d015      	beq.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004da0:	4b35      	ldr	r3, [pc, #212]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004da6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dae:	4932      	ldr	r1, [pc, #200]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004db0:	4313      	orrs	r3, r2
 8004db2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004dbe:	d105      	bne.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004dc0:	4b2d      	ldr	r3, [pc, #180]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dc2:	68db      	ldr	r3, [r3, #12]
 8004dc4:	4a2c      	ldr	r2, [pc, #176]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dc6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004dca:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d015      	beq.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004dd8:	4b27      	ldr	r3, [pc, #156]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dde:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004de6:	4924      	ldr	r1, [pc, #144]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004de8:	4313      	orrs	r3, r2
 8004dea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004df2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004df6:	d105      	bne.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004df8:	4b1f      	ldr	r3, [pc, #124]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dfa:	68db      	ldr	r3, [r3, #12]
 8004dfc:	4a1e      	ldr	r2, [pc, #120]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dfe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e02:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d015      	beq.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004e10:	4b19      	ldr	r3, [pc, #100]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e16:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e1e:	4916      	ldr	r1, [pc, #88]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e20:	4313      	orrs	r3, r2
 8004e22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e2a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e2e:	d105      	bne.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e30:	4b11      	ldr	r3, [pc, #68]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e32:	68db      	ldr	r3, [r3, #12]
 8004e34:	4a10      	ldr	r2, [pc, #64]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e3a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d019      	beq.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004e48:	4b0b      	ldr	r3, [pc, #44]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e4e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e56:	4908      	ldr	r1, [pc, #32]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e62:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e66:	d109      	bne.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e68:	4b03      	ldr	r3, [pc, #12]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e6a:	68db      	ldr	r3, [r3, #12]
 8004e6c:	4a02      	ldr	r2, [pc, #8]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e72:	60d3      	str	r3, [r2, #12]
 8004e74:	e002      	b.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004e76:	bf00      	nop
 8004e78:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d015      	beq.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004e88:	4b29      	ldr	r3, [pc, #164]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e8e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e96:	4926      	ldr	r1, [pc, #152]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ea2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004ea6:	d105      	bne.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004ea8:	4b21      	ldr	r3, [pc, #132]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004eaa:	68db      	ldr	r3, [r3, #12]
 8004eac:	4a20      	ldr	r2, [pc, #128]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004eae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004eb2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d015      	beq.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004ec0:	4b1b      	ldr	r3, [pc, #108]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ec6:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ece:	4918      	ldr	r1, [pc, #96]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004eda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ede:	d105      	bne.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004ee0:	4b13      	ldr	r3, [pc, #76]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004ee2:	68db      	ldr	r3, [r3, #12]
 8004ee4:	4a12      	ldr	r2, [pc, #72]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004ee6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004eea:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d015      	beq.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004ef8:	4b0d      	ldr	r3, [pc, #52]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004efa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004efe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f06:	490a      	ldr	r1, [pc, #40]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f12:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004f16:	d105      	bne.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f18:	4b05      	ldr	r3, [pc, #20]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f1a:	68db      	ldr	r3, [r3, #12]
 8004f1c:	4a04      	ldr	r2, [pc, #16]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f22:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004f24:	7cbb      	ldrb	r3, [r7, #18]
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	3718      	adds	r7, #24
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}
 8004f2e:	bf00      	nop
 8004f30:	40021000 	.word	0x40021000

08004f34 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b082      	sub	sp, #8
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d101      	bne.n	8004f46 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	e049      	b.n	8004fda <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f4c:	b2db      	uxtb	r3, r3
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d106      	bne.n	8004f60 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2200      	movs	r2, #0
 8004f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	f7fc fd98 	bl	8001a90 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2202      	movs	r2, #2
 8004f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	3304      	adds	r3, #4
 8004f70:	4619      	mov	r1, r3
 8004f72:	4610      	mov	r0, r2
 8004f74:	f000 fa5c 	bl	8005430 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2201      	movs	r2, #1
 8004f84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2201      	movs	r2, #1
 8004f94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2201      	movs	r2, #1
 8004fac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2201      	movs	r2, #1
 8004fcc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004fd8:	2300      	movs	r3, #0
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3708      	adds	r7, #8
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
	...

08004fe4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b084      	sub	sp, #16
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
 8004fec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d109      	bne.n	8005008 <HAL_TIM_PWM_Start+0x24>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ffa:	b2db      	uxtb	r3, r3
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	bf14      	ite	ne
 8005000:	2301      	movne	r3, #1
 8005002:	2300      	moveq	r3, #0
 8005004:	b2db      	uxtb	r3, r3
 8005006:	e03c      	b.n	8005082 <HAL_TIM_PWM_Start+0x9e>
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	2b04      	cmp	r3, #4
 800500c:	d109      	bne.n	8005022 <HAL_TIM_PWM_Start+0x3e>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005014:	b2db      	uxtb	r3, r3
 8005016:	2b01      	cmp	r3, #1
 8005018:	bf14      	ite	ne
 800501a:	2301      	movne	r3, #1
 800501c:	2300      	moveq	r3, #0
 800501e:	b2db      	uxtb	r3, r3
 8005020:	e02f      	b.n	8005082 <HAL_TIM_PWM_Start+0x9e>
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	2b08      	cmp	r3, #8
 8005026:	d109      	bne.n	800503c <HAL_TIM_PWM_Start+0x58>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800502e:	b2db      	uxtb	r3, r3
 8005030:	2b01      	cmp	r3, #1
 8005032:	bf14      	ite	ne
 8005034:	2301      	movne	r3, #1
 8005036:	2300      	moveq	r3, #0
 8005038:	b2db      	uxtb	r3, r3
 800503a:	e022      	b.n	8005082 <HAL_TIM_PWM_Start+0x9e>
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	2b0c      	cmp	r3, #12
 8005040:	d109      	bne.n	8005056 <HAL_TIM_PWM_Start+0x72>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005048:	b2db      	uxtb	r3, r3
 800504a:	2b01      	cmp	r3, #1
 800504c:	bf14      	ite	ne
 800504e:	2301      	movne	r3, #1
 8005050:	2300      	moveq	r3, #0
 8005052:	b2db      	uxtb	r3, r3
 8005054:	e015      	b.n	8005082 <HAL_TIM_PWM_Start+0x9e>
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	2b10      	cmp	r3, #16
 800505a:	d109      	bne.n	8005070 <HAL_TIM_PWM_Start+0x8c>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005062:	b2db      	uxtb	r3, r3
 8005064:	2b01      	cmp	r3, #1
 8005066:	bf14      	ite	ne
 8005068:	2301      	movne	r3, #1
 800506a:	2300      	moveq	r3, #0
 800506c:	b2db      	uxtb	r3, r3
 800506e:	e008      	b.n	8005082 <HAL_TIM_PWM_Start+0x9e>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005076:	b2db      	uxtb	r3, r3
 8005078:	2b01      	cmp	r3, #1
 800507a:	bf14      	ite	ne
 800507c:	2301      	movne	r3, #1
 800507e:	2300      	moveq	r3, #0
 8005080:	b2db      	uxtb	r3, r3
 8005082:	2b00      	cmp	r3, #0
 8005084:	d001      	beq.n	800508a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	e0a6      	b.n	80051d8 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d104      	bne.n	800509a <HAL_TIM_PWM_Start+0xb6>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2202      	movs	r2, #2
 8005094:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005098:	e023      	b.n	80050e2 <HAL_TIM_PWM_Start+0xfe>
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	2b04      	cmp	r3, #4
 800509e:	d104      	bne.n	80050aa <HAL_TIM_PWM_Start+0xc6>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2202      	movs	r2, #2
 80050a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050a8:	e01b      	b.n	80050e2 <HAL_TIM_PWM_Start+0xfe>
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	2b08      	cmp	r3, #8
 80050ae:	d104      	bne.n	80050ba <HAL_TIM_PWM_Start+0xd6>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2202      	movs	r2, #2
 80050b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050b8:	e013      	b.n	80050e2 <HAL_TIM_PWM_Start+0xfe>
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	2b0c      	cmp	r3, #12
 80050be:	d104      	bne.n	80050ca <HAL_TIM_PWM_Start+0xe6>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2202      	movs	r2, #2
 80050c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80050c8:	e00b      	b.n	80050e2 <HAL_TIM_PWM_Start+0xfe>
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	2b10      	cmp	r3, #16
 80050ce:	d104      	bne.n	80050da <HAL_TIM_PWM_Start+0xf6>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2202      	movs	r2, #2
 80050d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050d8:	e003      	b.n	80050e2 <HAL_TIM_PWM_Start+0xfe>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2202      	movs	r2, #2
 80050de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	2201      	movs	r2, #1
 80050e8:	6839      	ldr	r1, [r7, #0]
 80050ea:	4618      	mov	r0, r3
 80050ec:	f000 fd72 	bl	8005bd4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a3a      	ldr	r2, [pc, #232]	; (80051e0 <HAL_TIM_PWM_Start+0x1fc>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d018      	beq.n	800512c <HAL_TIM_PWM_Start+0x148>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a39      	ldr	r2, [pc, #228]	; (80051e4 <HAL_TIM_PWM_Start+0x200>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d013      	beq.n	800512c <HAL_TIM_PWM_Start+0x148>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a37      	ldr	r2, [pc, #220]	; (80051e8 <HAL_TIM_PWM_Start+0x204>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d00e      	beq.n	800512c <HAL_TIM_PWM_Start+0x148>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a36      	ldr	r2, [pc, #216]	; (80051ec <HAL_TIM_PWM_Start+0x208>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d009      	beq.n	800512c <HAL_TIM_PWM_Start+0x148>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a34      	ldr	r2, [pc, #208]	; (80051f0 <HAL_TIM_PWM_Start+0x20c>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d004      	beq.n	800512c <HAL_TIM_PWM_Start+0x148>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a33      	ldr	r2, [pc, #204]	; (80051f4 <HAL_TIM_PWM_Start+0x210>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d101      	bne.n	8005130 <HAL_TIM_PWM_Start+0x14c>
 800512c:	2301      	movs	r3, #1
 800512e:	e000      	b.n	8005132 <HAL_TIM_PWM_Start+0x14e>
 8005130:	2300      	movs	r3, #0
 8005132:	2b00      	cmp	r3, #0
 8005134:	d007      	beq.n	8005146 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005144:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a25      	ldr	r2, [pc, #148]	; (80051e0 <HAL_TIM_PWM_Start+0x1fc>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d022      	beq.n	8005196 <HAL_TIM_PWM_Start+0x1b2>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005158:	d01d      	beq.n	8005196 <HAL_TIM_PWM_Start+0x1b2>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a26      	ldr	r2, [pc, #152]	; (80051f8 <HAL_TIM_PWM_Start+0x214>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d018      	beq.n	8005196 <HAL_TIM_PWM_Start+0x1b2>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a24      	ldr	r2, [pc, #144]	; (80051fc <HAL_TIM_PWM_Start+0x218>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d013      	beq.n	8005196 <HAL_TIM_PWM_Start+0x1b2>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a23      	ldr	r2, [pc, #140]	; (8005200 <HAL_TIM_PWM_Start+0x21c>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d00e      	beq.n	8005196 <HAL_TIM_PWM_Start+0x1b2>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a19      	ldr	r2, [pc, #100]	; (80051e4 <HAL_TIM_PWM_Start+0x200>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d009      	beq.n	8005196 <HAL_TIM_PWM_Start+0x1b2>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a18      	ldr	r2, [pc, #96]	; (80051e8 <HAL_TIM_PWM_Start+0x204>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d004      	beq.n	8005196 <HAL_TIM_PWM_Start+0x1b2>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a18      	ldr	r2, [pc, #96]	; (80051f4 <HAL_TIM_PWM_Start+0x210>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d115      	bne.n	80051c2 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	689a      	ldr	r2, [r3, #8]
 800519c:	4b19      	ldr	r3, [pc, #100]	; (8005204 <HAL_TIM_PWM_Start+0x220>)
 800519e:	4013      	ands	r3, r2
 80051a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2b06      	cmp	r3, #6
 80051a6:	d015      	beq.n	80051d4 <HAL_TIM_PWM_Start+0x1f0>
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051ae:	d011      	beq.n	80051d4 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	681a      	ldr	r2, [r3, #0]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f042 0201 	orr.w	r2, r2, #1
 80051be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051c0:	e008      	b.n	80051d4 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	681a      	ldr	r2, [r3, #0]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f042 0201 	orr.w	r2, r2, #1
 80051d0:	601a      	str	r2, [r3, #0]
 80051d2:	e000      	b.n	80051d6 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051d4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80051d6:	2300      	movs	r3, #0
}
 80051d8:	4618      	mov	r0, r3
 80051da:	3710      	adds	r7, #16
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}
 80051e0:	40012c00 	.word	0x40012c00
 80051e4:	40013400 	.word	0x40013400
 80051e8:	40014000 	.word	0x40014000
 80051ec:	40014400 	.word	0x40014400
 80051f0:	40014800 	.word	0x40014800
 80051f4:	40015000 	.word	0x40015000
 80051f8:	40000400 	.word	0x40000400
 80051fc:	40000800 	.word	0x40000800
 8005200:	40000c00 	.word	0x40000c00
 8005204:	00010007 	.word	0x00010007

08005208 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b086      	sub	sp, #24
 800520c:	af00      	add	r7, sp, #0
 800520e:	60f8      	str	r0, [r7, #12]
 8005210:	60b9      	str	r1, [r7, #8]
 8005212:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005214:	2300      	movs	r3, #0
 8005216:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800521e:	2b01      	cmp	r3, #1
 8005220:	d101      	bne.n	8005226 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005222:	2302      	movs	r3, #2
 8005224:	e0ff      	b.n	8005426 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2201      	movs	r2, #1
 800522a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2b14      	cmp	r3, #20
 8005232:	f200 80f0 	bhi.w	8005416 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005236:	a201      	add	r2, pc, #4	; (adr r2, 800523c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800523c:	08005291 	.word	0x08005291
 8005240:	08005417 	.word	0x08005417
 8005244:	08005417 	.word	0x08005417
 8005248:	08005417 	.word	0x08005417
 800524c:	080052d1 	.word	0x080052d1
 8005250:	08005417 	.word	0x08005417
 8005254:	08005417 	.word	0x08005417
 8005258:	08005417 	.word	0x08005417
 800525c:	08005313 	.word	0x08005313
 8005260:	08005417 	.word	0x08005417
 8005264:	08005417 	.word	0x08005417
 8005268:	08005417 	.word	0x08005417
 800526c:	08005353 	.word	0x08005353
 8005270:	08005417 	.word	0x08005417
 8005274:	08005417 	.word	0x08005417
 8005278:	08005417 	.word	0x08005417
 800527c:	08005395 	.word	0x08005395
 8005280:	08005417 	.word	0x08005417
 8005284:	08005417 	.word	0x08005417
 8005288:	08005417 	.word	0x08005417
 800528c:	080053d5 	.word	0x080053d5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	68b9      	ldr	r1, [r7, #8]
 8005296:	4618      	mov	r0, r3
 8005298:	f000 f972 	bl	8005580 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	699a      	ldr	r2, [r3, #24]
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f042 0208 	orr.w	r2, r2, #8
 80052aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	699a      	ldr	r2, [r3, #24]
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f022 0204 	bic.w	r2, r2, #4
 80052ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	6999      	ldr	r1, [r3, #24]
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	691a      	ldr	r2, [r3, #16]
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	430a      	orrs	r2, r1
 80052cc:	619a      	str	r2, [r3, #24]
      break;
 80052ce:	e0a5      	b.n	800541c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	68b9      	ldr	r1, [r7, #8]
 80052d6:	4618      	mov	r0, r3
 80052d8:	f000 f9ec 	bl	80056b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	699a      	ldr	r2, [r3, #24]
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	699a      	ldr	r2, [r3, #24]
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	6999      	ldr	r1, [r3, #24]
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	691b      	ldr	r3, [r3, #16]
 8005306:	021a      	lsls	r2, r3, #8
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	430a      	orrs	r2, r1
 800530e:	619a      	str	r2, [r3, #24]
      break;
 8005310:	e084      	b.n	800541c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	68b9      	ldr	r1, [r7, #8]
 8005318:	4618      	mov	r0, r3
 800531a:	f000 fa5f 	bl	80057dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	69da      	ldr	r2, [r3, #28]
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f042 0208 	orr.w	r2, r2, #8
 800532c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	69da      	ldr	r2, [r3, #28]
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f022 0204 	bic.w	r2, r2, #4
 800533c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	69d9      	ldr	r1, [r3, #28]
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	691a      	ldr	r2, [r3, #16]
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	430a      	orrs	r2, r1
 800534e:	61da      	str	r2, [r3, #28]
      break;
 8005350:	e064      	b.n	800541c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	68b9      	ldr	r1, [r7, #8]
 8005358:	4618      	mov	r0, r3
 800535a:	f000 fad1 	bl	8005900 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	69da      	ldr	r2, [r3, #28]
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800536c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	69da      	ldr	r2, [r3, #28]
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800537c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	69d9      	ldr	r1, [r3, #28]
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	691b      	ldr	r3, [r3, #16]
 8005388:	021a      	lsls	r2, r3, #8
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	430a      	orrs	r2, r1
 8005390:	61da      	str	r2, [r3, #28]
      break;
 8005392:	e043      	b.n	800541c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	68b9      	ldr	r1, [r7, #8]
 800539a:	4618      	mov	r0, r3
 800539c:	f000 fb44 	bl	8005a28 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f042 0208 	orr.w	r2, r2, #8
 80053ae:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f022 0204 	bic.w	r2, r2, #4
 80053be:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	691a      	ldr	r2, [r3, #16]
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	430a      	orrs	r2, r1
 80053d0:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80053d2:	e023      	b.n	800541c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	68b9      	ldr	r1, [r7, #8]
 80053da:	4618      	mov	r0, r3
 80053dc:	f000 fb8e 	bl	8005afc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80053ee:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053fe:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	691b      	ldr	r3, [r3, #16]
 800540a:	021a      	lsls	r2, r3, #8
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	430a      	orrs	r2, r1
 8005412:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005414:	e002      	b.n	800541c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005416:	2301      	movs	r3, #1
 8005418:	75fb      	strb	r3, [r7, #23]
      break;
 800541a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2200      	movs	r2, #0
 8005420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005424:	7dfb      	ldrb	r3, [r7, #23]
}
 8005426:	4618      	mov	r0, r3
 8005428:	3718      	adds	r7, #24
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}
 800542e:	bf00      	nop

08005430 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005430:	b480      	push	{r7}
 8005432:	b085      	sub	sp, #20
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
 8005438:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	4a46      	ldr	r2, [pc, #280]	; (800555c <TIM_Base_SetConfig+0x12c>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d017      	beq.n	8005478 <TIM_Base_SetConfig+0x48>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800544e:	d013      	beq.n	8005478 <TIM_Base_SetConfig+0x48>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	4a43      	ldr	r2, [pc, #268]	; (8005560 <TIM_Base_SetConfig+0x130>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d00f      	beq.n	8005478 <TIM_Base_SetConfig+0x48>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	4a42      	ldr	r2, [pc, #264]	; (8005564 <TIM_Base_SetConfig+0x134>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d00b      	beq.n	8005478 <TIM_Base_SetConfig+0x48>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	4a41      	ldr	r2, [pc, #260]	; (8005568 <TIM_Base_SetConfig+0x138>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d007      	beq.n	8005478 <TIM_Base_SetConfig+0x48>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	4a40      	ldr	r2, [pc, #256]	; (800556c <TIM_Base_SetConfig+0x13c>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d003      	beq.n	8005478 <TIM_Base_SetConfig+0x48>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	4a3f      	ldr	r2, [pc, #252]	; (8005570 <TIM_Base_SetConfig+0x140>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d108      	bne.n	800548a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800547e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	68fa      	ldr	r2, [r7, #12]
 8005486:	4313      	orrs	r3, r2
 8005488:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	4a33      	ldr	r2, [pc, #204]	; (800555c <TIM_Base_SetConfig+0x12c>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d023      	beq.n	80054da <TIM_Base_SetConfig+0xaa>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005498:	d01f      	beq.n	80054da <TIM_Base_SetConfig+0xaa>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	4a30      	ldr	r2, [pc, #192]	; (8005560 <TIM_Base_SetConfig+0x130>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d01b      	beq.n	80054da <TIM_Base_SetConfig+0xaa>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	4a2f      	ldr	r2, [pc, #188]	; (8005564 <TIM_Base_SetConfig+0x134>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d017      	beq.n	80054da <TIM_Base_SetConfig+0xaa>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	4a2e      	ldr	r2, [pc, #184]	; (8005568 <TIM_Base_SetConfig+0x138>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d013      	beq.n	80054da <TIM_Base_SetConfig+0xaa>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	4a2d      	ldr	r2, [pc, #180]	; (800556c <TIM_Base_SetConfig+0x13c>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d00f      	beq.n	80054da <TIM_Base_SetConfig+0xaa>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	4a2d      	ldr	r2, [pc, #180]	; (8005574 <TIM_Base_SetConfig+0x144>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d00b      	beq.n	80054da <TIM_Base_SetConfig+0xaa>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	4a2c      	ldr	r2, [pc, #176]	; (8005578 <TIM_Base_SetConfig+0x148>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d007      	beq.n	80054da <TIM_Base_SetConfig+0xaa>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	4a2b      	ldr	r2, [pc, #172]	; (800557c <TIM_Base_SetConfig+0x14c>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d003      	beq.n	80054da <TIM_Base_SetConfig+0xaa>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	4a26      	ldr	r2, [pc, #152]	; (8005570 <TIM_Base_SetConfig+0x140>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d108      	bne.n	80054ec <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	68db      	ldr	r3, [r3, #12]
 80054e6:	68fa      	ldr	r2, [r7, #12]
 80054e8:	4313      	orrs	r3, r2
 80054ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	695b      	ldr	r3, [r3, #20]
 80054f6:	4313      	orrs	r3, r2
 80054f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	68fa      	ldr	r2, [r7, #12]
 80054fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	689a      	ldr	r2, [r3, #8]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	4a12      	ldr	r2, [pc, #72]	; (800555c <TIM_Base_SetConfig+0x12c>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d013      	beq.n	8005540 <TIM_Base_SetConfig+0x110>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	4a14      	ldr	r2, [pc, #80]	; (800556c <TIM_Base_SetConfig+0x13c>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d00f      	beq.n	8005540 <TIM_Base_SetConfig+0x110>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	4a14      	ldr	r2, [pc, #80]	; (8005574 <TIM_Base_SetConfig+0x144>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d00b      	beq.n	8005540 <TIM_Base_SetConfig+0x110>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	4a13      	ldr	r2, [pc, #76]	; (8005578 <TIM_Base_SetConfig+0x148>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d007      	beq.n	8005540 <TIM_Base_SetConfig+0x110>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	4a12      	ldr	r2, [pc, #72]	; (800557c <TIM_Base_SetConfig+0x14c>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d003      	beq.n	8005540 <TIM_Base_SetConfig+0x110>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	4a0d      	ldr	r2, [pc, #52]	; (8005570 <TIM_Base_SetConfig+0x140>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d103      	bne.n	8005548 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	691a      	ldr	r2, [r3, #16]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2201      	movs	r2, #1
 800554c:	615a      	str	r2, [r3, #20]
}
 800554e:	bf00      	nop
 8005550:	3714      	adds	r7, #20
 8005552:	46bd      	mov	sp, r7
 8005554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005558:	4770      	bx	lr
 800555a:	bf00      	nop
 800555c:	40012c00 	.word	0x40012c00
 8005560:	40000400 	.word	0x40000400
 8005564:	40000800 	.word	0x40000800
 8005568:	40000c00 	.word	0x40000c00
 800556c:	40013400 	.word	0x40013400
 8005570:	40015000 	.word	0x40015000
 8005574:	40014000 	.word	0x40014000
 8005578:	40014400 	.word	0x40014400
 800557c:	40014800 	.word	0x40014800

08005580 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005580:	b480      	push	{r7}
 8005582:	b087      	sub	sp, #28
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
 8005588:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6a1b      	ldr	r3, [r3, #32]
 800558e:	f023 0201 	bic.w	r2, r3, #1
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6a1b      	ldr	r3, [r3, #32]
 800559a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	699b      	ldr	r3, [r3, #24]
 80055a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	f023 0303 	bic.w	r3, r3, #3
 80055ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	68fa      	ldr	r2, [r7, #12]
 80055c2:	4313      	orrs	r3, r2
 80055c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	f023 0302 	bic.w	r3, r3, #2
 80055cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	697a      	ldr	r2, [r7, #20]
 80055d4:	4313      	orrs	r3, r2
 80055d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	4a30      	ldr	r2, [pc, #192]	; (800569c <TIM_OC1_SetConfig+0x11c>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d013      	beq.n	8005608 <TIM_OC1_SetConfig+0x88>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	4a2f      	ldr	r2, [pc, #188]	; (80056a0 <TIM_OC1_SetConfig+0x120>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d00f      	beq.n	8005608 <TIM_OC1_SetConfig+0x88>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	4a2e      	ldr	r2, [pc, #184]	; (80056a4 <TIM_OC1_SetConfig+0x124>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d00b      	beq.n	8005608 <TIM_OC1_SetConfig+0x88>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	4a2d      	ldr	r2, [pc, #180]	; (80056a8 <TIM_OC1_SetConfig+0x128>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d007      	beq.n	8005608 <TIM_OC1_SetConfig+0x88>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	4a2c      	ldr	r2, [pc, #176]	; (80056ac <TIM_OC1_SetConfig+0x12c>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d003      	beq.n	8005608 <TIM_OC1_SetConfig+0x88>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	4a2b      	ldr	r2, [pc, #172]	; (80056b0 <TIM_OC1_SetConfig+0x130>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d10c      	bne.n	8005622 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	f023 0308 	bic.w	r3, r3, #8
 800560e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	68db      	ldr	r3, [r3, #12]
 8005614:	697a      	ldr	r2, [r7, #20]
 8005616:	4313      	orrs	r3, r2
 8005618:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	f023 0304 	bic.w	r3, r3, #4
 8005620:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	4a1d      	ldr	r2, [pc, #116]	; (800569c <TIM_OC1_SetConfig+0x11c>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d013      	beq.n	8005652 <TIM_OC1_SetConfig+0xd2>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	4a1c      	ldr	r2, [pc, #112]	; (80056a0 <TIM_OC1_SetConfig+0x120>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d00f      	beq.n	8005652 <TIM_OC1_SetConfig+0xd2>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	4a1b      	ldr	r2, [pc, #108]	; (80056a4 <TIM_OC1_SetConfig+0x124>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d00b      	beq.n	8005652 <TIM_OC1_SetConfig+0xd2>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	4a1a      	ldr	r2, [pc, #104]	; (80056a8 <TIM_OC1_SetConfig+0x128>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d007      	beq.n	8005652 <TIM_OC1_SetConfig+0xd2>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	4a19      	ldr	r2, [pc, #100]	; (80056ac <TIM_OC1_SetConfig+0x12c>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d003      	beq.n	8005652 <TIM_OC1_SetConfig+0xd2>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	4a18      	ldr	r2, [pc, #96]	; (80056b0 <TIM_OC1_SetConfig+0x130>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d111      	bne.n	8005676 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005658:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005660:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	695b      	ldr	r3, [r3, #20]
 8005666:	693a      	ldr	r2, [r7, #16]
 8005668:	4313      	orrs	r3, r2
 800566a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	699b      	ldr	r3, [r3, #24]
 8005670:	693a      	ldr	r2, [r7, #16]
 8005672:	4313      	orrs	r3, r2
 8005674:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	693a      	ldr	r2, [r7, #16]
 800567a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	68fa      	ldr	r2, [r7, #12]
 8005680:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	685a      	ldr	r2, [r3, #4]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	697a      	ldr	r2, [r7, #20]
 800568e:	621a      	str	r2, [r3, #32]
}
 8005690:	bf00      	nop
 8005692:	371c      	adds	r7, #28
 8005694:	46bd      	mov	sp, r7
 8005696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569a:	4770      	bx	lr
 800569c:	40012c00 	.word	0x40012c00
 80056a0:	40013400 	.word	0x40013400
 80056a4:	40014000 	.word	0x40014000
 80056a8:	40014400 	.word	0x40014400
 80056ac:	40014800 	.word	0x40014800
 80056b0:	40015000 	.word	0x40015000

080056b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b087      	sub	sp, #28
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
 80056bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6a1b      	ldr	r3, [r3, #32]
 80056c2:	f023 0210 	bic.w	r2, r3, #16
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6a1b      	ldr	r3, [r3, #32]
 80056ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	699b      	ldr	r3, [r3, #24]
 80056da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80056e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	021b      	lsls	r3, r3, #8
 80056f6:	68fa      	ldr	r2, [r7, #12]
 80056f8:	4313      	orrs	r3, r2
 80056fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	f023 0320 	bic.w	r3, r3, #32
 8005702:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	689b      	ldr	r3, [r3, #8]
 8005708:	011b      	lsls	r3, r3, #4
 800570a:	697a      	ldr	r2, [r7, #20]
 800570c:	4313      	orrs	r3, r2
 800570e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	4a2c      	ldr	r2, [pc, #176]	; (80057c4 <TIM_OC2_SetConfig+0x110>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d007      	beq.n	8005728 <TIM_OC2_SetConfig+0x74>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	4a2b      	ldr	r2, [pc, #172]	; (80057c8 <TIM_OC2_SetConfig+0x114>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d003      	beq.n	8005728 <TIM_OC2_SetConfig+0x74>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	4a2a      	ldr	r2, [pc, #168]	; (80057cc <TIM_OC2_SetConfig+0x118>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d10d      	bne.n	8005744 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800572e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	68db      	ldr	r3, [r3, #12]
 8005734:	011b      	lsls	r3, r3, #4
 8005736:	697a      	ldr	r2, [r7, #20]
 8005738:	4313      	orrs	r3, r2
 800573a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005742:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	4a1f      	ldr	r2, [pc, #124]	; (80057c4 <TIM_OC2_SetConfig+0x110>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d013      	beq.n	8005774 <TIM_OC2_SetConfig+0xc0>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	4a1e      	ldr	r2, [pc, #120]	; (80057c8 <TIM_OC2_SetConfig+0x114>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d00f      	beq.n	8005774 <TIM_OC2_SetConfig+0xc0>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	4a1e      	ldr	r2, [pc, #120]	; (80057d0 <TIM_OC2_SetConfig+0x11c>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d00b      	beq.n	8005774 <TIM_OC2_SetConfig+0xc0>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	4a1d      	ldr	r2, [pc, #116]	; (80057d4 <TIM_OC2_SetConfig+0x120>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d007      	beq.n	8005774 <TIM_OC2_SetConfig+0xc0>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	4a1c      	ldr	r2, [pc, #112]	; (80057d8 <TIM_OC2_SetConfig+0x124>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d003      	beq.n	8005774 <TIM_OC2_SetConfig+0xc0>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	4a17      	ldr	r2, [pc, #92]	; (80057cc <TIM_OC2_SetConfig+0x118>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d113      	bne.n	800579c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800577a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800577c:	693b      	ldr	r3, [r7, #16]
 800577e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005782:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	695b      	ldr	r3, [r3, #20]
 8005788:	009b      	lsls	r3, r3, #2
 800578a:	693a      	ldr	r2, [r7, #16]
 800578c:	4313      	orrs	r3, r2
 800578e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	699b      	ldr	r3, [r3, #24]
 8005794:	009b      	lsls	r3, r3, #2
 8005796:	693a      	ldr	r2, [r7, #16]
 8005798:	4313      	orrs	r3, r2
 800579a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	693a      	ldr	r2, [r7, #16]
 80057a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	68fa      	ldr	r2, [r7, #12]
 80057a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	685a      	ldr	r2, [r3, #4]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	697a      	ldr	r2, [r7, #20]
 80057b4:	621a      	str	r2, [r3, #32]
}
 80057b6:	bf00      	nop
 80057b8:	371c      	adds	r7, #28
 80057ba:	46bd      	mov	sp, r7
 80057bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c0:	4770      	bx	lr
 80057c2:	bf00      	nop
 80057c4:	40012c00 	.word	0x40012c00
 80057c8:	40013400 	.word	0x40013400
 80057cc:	40015000 	.word	0x40015000
 80057d0:	40014000 	.word	0x40014000
 80057d4:	40014400 	.word	0x40014400
 80057d8:	40014800 	.word	0x40014800

080057dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80057dc:	b480      	push	{r7}
 80057de:	b087      	sub	sp, #28
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
 80057e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6a1b      	ldr	r3, [r3, #32]
 80057ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6a1b      	ldr	r3, [r3, #32]
 80057f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	69db      	ldr	r3, [r3, #28]
 8005802:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800580a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800580e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f023 0303 	bic.w	r3, r3, #3
 8005816:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	68fa      	ldr	r2, [r7, #12]
 800581e:	4313      	orrs	r3, r2
 8005820:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005828:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	021b      	lsls	r3, r3, #8
 8005830:	697a      	ldr	r2, [r7, #20]
 8005832:	4313      	orrs	r3, r2
 8005834:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	4a2b      	ldr	r2, [pc, #172]	; (80058e8 <TIM_OC3_SetConfig+0x10c>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d007      	beq.n	800584e <TIM_OC3_SetConfig+0x72>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	4a2a      	ldr	r2, [pc, #168]	; (80058ec <TIM_OC3_SetConfig+0x110>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d003      	beq.n	800584e <TIM_OC3_SetConfig+0x72>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	4a29      	ldr	r2, [pc, #164]	; (80058f0 <TIM_OC3_SetConfig+0x114>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d10d      	bne.n	800586a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005854:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	68db      	ldr	r3, [r3, #12]
 800585a:	021b      	lsls	r3, r3, #8
 800585c:	697a      	ldr	r2, [r7, #20]
 800585e:	4313      	orrs	r3, r2
 8005860:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005868:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	4a1e      	ldr	r2, [pc, #120]	; (80058e8 <TIM_OC3_SetConfig+0x10c>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d013      	beq.n	800589a <TIM_OC3_SetConfig+0xbe>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	4a1d      	ldr	r2, [pc, #116]	; (80058ec <TIM_OC3_SetConfig+0x110>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d00f      	beq.n	800589a <TIM_OC3_SetConfig+0xbe>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	4a1d      	ldr	r2, [pc, #116]	; (80058f4 <TIM_OC3_SetConfig+0x118>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d00b      	beq.n	800589a <TIM_OC3_SetConfig+0xbe>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	4a1c      	ldr	r2, [pc, #112]	; (80058f8 <TIM_OC3_SetConfig+0x11c>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d007      	beq.n	800589a <TIM_OC3_SetConfig+0xbe>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	4a1b      	ldr	r2, [pc, #108]	; (80058fc <TIM_OC3_SetConfig+0x120>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d003      	beq.n	800589a <TIM_OC3_SetConfig+0xbe>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	4a16      	ldr	r2, [pc, #88]	; (80058f0 <TIM_OC3_SetConfig+0x114>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d113      	bne.n	80058c2 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800589a:	693b      	ldr	r3, [r7, #16]
 800589c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80058a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80058a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	695b      	ldr	r3, [r3, #20]
 80058ae:	011b      	lsls	r3, r3, #4
 80058b0:	693a      	ldr	r2, [r7, #16]
 80058b2:	4313      	orrs	r3, r2
 80058b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	699b      	ldr	r3, [r3, #24]
 80058ba:	011b      	lsls	r3, r3, #4
 80058bc:	693a      	ldr	r2, [r7, #16]
 80058be:	4313      	orrs	r3, r2
 80058c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	693a      	ldr	r2, [r7, #16]
 80058c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	68fa      	ldr	r2, [r7, #12]
 80058cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	685a      	ldr	r2, [r3, #4]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	697a      	ldr	r2, [r7, #20]
 80058da:	621a      	str	r2, [r3, #32]
}
 80058dc:	bf00      	nop
 80058de:	371c      	adds	r7, #28
 80058e0:	46bd      	mov	sp, r7
 80058e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e6:	4770      	bx	lr
 80058e8:	40012c00 	.word	0x40012c00
 80058ec:	40013400 	.word	0x40013400
 80058f0:	40015000 	.word	0x40015000
 80058f4:	40014000 	.word	0x40014000
 80058f8:	40014400 	.word	0x40014400
 80058fc:	40014800 	.word	0x40014800

08005900 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005900:	b480      	push	{r7}
 8005902:	b087      	sub	sp, #28
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
 8005908:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6a1b      	ldr	r3, [r3, #32]
 800590e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6a1b      	ldr	r3, [r3, #32]
 800591a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	69db      	ldr	r3, [r3, #28]
 8005926:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800592e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005932:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800593a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	021b      	lsls	r3, r3, #8
 8005942:	68fa      	ldr	r2, [r7, #12]
 8005944:	4313      	orrs	r3, r2
 8005946:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800594e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	689b      	ldr	r3, [r3, #8]
 8005954:	031b      	lsls	r3, r3, #12
 8005956:	697a      	ldr	r2, [r7, #20]
 8005958:	4313      	orrs	r3, r2
 800595a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	4a2c      	ldr	r2, [pc, #176]	; (8005a10 <TIM_OC4_SetConfig+0x110>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d007      	beq.n	8005974 <TIM_OC4_SetConfig+0x74>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	4a2b      	ldr	r2, [pc, #172]	; (8005a14 <TIM_OC4_SetConfig+0x114>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d003      	beq.n	8005974 <TIM_OC4_SetConfig+0x74>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	4a2a      	ldr	r2, [pc, #168]	; (8005a18 <TIM_OC4_SetConfig+0x118>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d10d      	bne.n	8005990 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800597a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	68db      	ldr	r3, [r3, #12]
 8005980:	031b      	lsls	r3, r3, #12
 8005982:	697a      	ldr	r2, [r7, #20]
 8005984:	4313      	orrs	r3, r2
 8005986:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800598e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	4a1f      	ldr	r2, [pc, #124]	; (8005a10 <TIM_OC4_SetConfig+0x110>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d013      	beq.n	80059c0 <TIM_OC4_SetConfig+0xc0>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	4a1e      	ldr	r2, [pc, #120]	; (8005a14 <TIM_OC4_SetConfig+0x114>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d00f      	beq.n	80059c0 <TIM_OC4_SetConfig+0xc0>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	4a1e      	ldr	r2, [pc, #120]	; (8005a1c <TIM_OC4_SetConfig+0x11c>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d00b      	beq.n	80059c0 <TIM_OC4_SetConfig+0xc0>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	4a1d      	ldr	r2, [pc, #116]	; (8005a20 <TIM_OC4_SetConfig+0x120>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d007      	beq.n	80059c0 <TIM_OC4_SetConfig+0xc0>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	4a1c      	ldr	r2, [pc, #112]	; (8005a24 <TIM_OC4_SetConfig+0x124>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d003      	beq.n	80059c0 <TIM_OC4_SetConfig+0xc0>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	4a17      	ldr	r2, [pc, #92]	; (8005a18 <TIM_OC4_SetConfig+0x118>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d113      	bne.n	80059e8 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80059c6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80059ce:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	695b      	ldr	r3, [r3, #20]
 80059d4:	019b      	lsls	r3, r3, #6
 80059d6:	693a      	ldr	r2, [r7, #16]
 80059d8:	4313      	orrs	r3, r2
 80059da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	699b      	ldr	r3, [r3, #24]
 80059e0:	019b      	lsls	r3, r3, #6
 80059e2:	693a      	ldr	r2, [r7, #16]
 80059e4:	4313      	orrs	r3, r2
 80059e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	693a      	ldr	r2, [r7, #16]
 80059ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	68fa      	ldr	r2, [r7, #12]
 80059f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	685a      	ldr	r2, [r3, #4]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	697a      	ldr	r2, [r7, #20]
 8005a00:	621a      	str	r2, [r3, #32]
}
 8005a02:	bf00      	nop
 8005a04:	371c      	adds	r7, #28
 8005a06:	46bd      	mov	sp, r7
 8005a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0c:	4770      	bx	lr
 8005a0e:	bf00      	nop
 8005a10:	40012c00 	.word	0x40012c00
 8005a14:	40013400 	.word	0x40013400
 8005a18:	40015000 	.word	0x40015000
 8005a1c:	40014000 	.word	0x40014000
 8005a20:	40014400 	.word	0x40014400
 8005a24:	40014800 	.word	0x40014800

08005a28 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b087      	sub	sp, #28
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
 8005a30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6a1b      	ldr	r3, [r3, #32]
 8005a36:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6a1b      	ldr	r3, [r3, #32]
 8005a42:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	68fa      	ldr	r2, [r7, #12]
 8005a62:	4313      	orrs	r3, r2
 8005a64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005a6c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	689b      	ldr	r3, [r3, #8]
 8005a72:	041b      	lsls	r3, r3, #16
 8005a74:	693a      	ldr	r2, [r7, #16]
 8005a76:	4313      	orrs	r3, r2
 8005a78:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	4a19      	ldr	r2, [pc, #100]	; (8005ae4 <TIM_OC5_SetConfig+0xbc>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d013      	beq.n	8005aaa <TIM_OC5_SetConfig+0x82>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	4a18      	ldr	r2, [pc, #96]	; (8005ae8 <TIM_OC5_SetConfig+0xc0>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d00f      	beq.n	8005aaa <TIM_OC5_SetConfig+0x82>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	4a17      	ldr	r2, [pc, #92]	; (8005aec <TIM_OC5_SetConfig+0xc4>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d00b      	beq.n	8005aaa <TIM_OC5_SetConfig+0x82>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	4a16      	ldr	r2, [pc, #88]	; (8005af0 <TIM_OC5_SetConfig+0xc8>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d007      	beq.n	8005aaa <TIM_OC5_SetConfig+0x82>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	4a15      	ldr	r2, [pc, #84]	; (8005af4 <TIM_OC5_SetConfig+0xcc>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d003      	beq.n	8005aaa <TIM_OC5_SetConfig+0x82>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	4a14      	ldr	r2, [pc, #80]	; (8005af8 <TIM_OC5_SetConfig+0xd0>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d109      	bne.n	8005abe <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ab0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	695b      	ldr	r3, [r3, #20]
 8005ab6:	021b      	lsls	r3, r3, #8
 8005ab8:	697a      	ldr	r2, [r7, #20]
 8005aba:	4313      	orrs	r3, r2
 8005abc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	697a      	ldr	r2, [r7, #20]
 8005ac2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	68fa      	ldr	r2, [r7, #12]
 8005ac8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	685a      	ldr	r2, [r3, #4]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	693a      	ldr	r2, [r7, #16]
 8005ad6:	621a      	str	r2, [r3, #32]
}
 8005ad8:	bf00      	nop
 8005ada:	371c      	adds	r7, #28
 8005adc:	46bd      	mov	sp, r7
 8005ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae2:	4770      	bx	lr
 8005ae4:	40012c00 	.word	0x40012c00
 8005ae8:	40013400 	.word	0x40013400
 8005aec:	40014000 	.word	0x40014000
 8005af0:	40014400 	.word	0x40014400
 8005af4:	40014800 	.word	0x40014800
 8005af8:	40015000 	.word	0x40015000

08005afc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b087      	sub	sp, #28
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
 8005b04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6a1b      	ldr	r3, [r3, #32]
 8005b0a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6a1b      	ldr	r3, [r3, #32]
 8005b16:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	021b      	lsls	r3, r3, #8
 8005b36:	68fa      	ldr	r2, [r7, #12]
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005b42:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	689b      	ldr	r3, [r3, #8]
 8005b48:	051b      	lsls	r3, r3, #20
 8005b4a:	693a      	ldr	r2, [r7, #16]
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	4a1a      	ldr	r2, [pc, #104]	; (8005bbc <TIM_OC6_SetConfig+0xc0>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d013      	beq.n	8005b80 <TIM_OC6_SetConfig+0x84>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	4a19      	ldr	r2, [pc, #100]	; (8005bc0 <TIM_OC6_SetConfig+0xc4>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d00f      	beq.n	8005b80 <TIM_OC6_SetConfig+0x84>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	4a18      	ldr	r2, [pc, #96]	; (8005bc4 <TIM_OC6_SetConfig+0xc8>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d00b      	beq.n	8005b80 <TIM_OC6_SetConfig+0x84>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	4a17      	ldr	r2, [pc, #92]	; (8005bc8 <TIM_OC6_SetConfig+0xcc>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d007      	beq.n	8005b80 <TIM_OC6_SetConfig+0x84>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	4a16      	ldr	r2, [pc, #88]	; (8005bcc <TIM_OC6_SetConfig+0xd0>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d003      	beq.n	8005b80 <TIM_OC6_SetConfig+0x84>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	4a15      	ldr	r2, [pc, #84]	; (8005bd0 <TIM_OC6_SetConfig+0xd4>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d109      	bne.n	8005b94 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b86:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	695b      	ldr	r3, [r3, #20]
 8005b8c:	029b      	lsls	r3, r3, #10
 8005b8e:	697a      	ldr	r2, [r7, #20]
 8005b90:	4313      	orrs	r3, r2
 8005b92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	697a      	ldr	r2, [r7, #20]
 8005b98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	68fa      	ldr	r2, [r7, #12]
 8005b9e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	685a      	ldr	r2, [r3, #4]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	693a      	ldr	r2, [r7, #16]
 8005bac:	621a      	str	r2, [r3, #32]
}
 8005bae:	bf00      	nop
 8005bb0:	371c      	adds	r7, #28
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb8:	4770      	bx	lr
 8005bba:	bf00      	nop
 8005bbc:	40012c00 	.word	0x40012c00
 8005bc0:	40013400 	.word	0x40013400
 8005bc4:	40014000 	.word	0x40014000
 8005bc8:	40014400 	.word	0x40014400
 8005bcc:	40014800 	.word	0x40014800
 8005bd0:	40015000 	.word	0x40015000

08005bd4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b087      	sub	sp, #28
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	60f8      	str	r0, [r7, #12]
 8005bdc:	60b9      	str	r1, [r7, #8]
 8005bde:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	f003 031f 	and.w	r3, r3, #31
 8005be6:	2201      	movs	r2, #1
 8005be8:	fa02 f303 	lsl.w	r3, r2, r3
 8005bec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	6a1a      	ldr	r2, [r3, #32]
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	43db      	mvns	r3, r3
 8005bf6:	401a      	ands	r2, r3
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	6a1a      	ldr	r2, [r3, #32]
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	f003 031f 	and.w	r3, r3, #31
 8005c06:	6879      	ldr	r1, [r7, #4]
 8005c08:	fa01 f303 	lsl.w	r3, r1, r3
 8005c0c:	431a      	orrs	r2, r3
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	621a      	str	r2, [r3, #32]
}
 8005c12:	bf00      	nop
 8005c14:	371c      	adds	r7, #28
 8005c16:	46bd      	mov	sp, r7
 8005c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1c:	4770      	bx	lr
	...

08005c20 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b084      	sub	sp, #16
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
 8005c28:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d109      	bne.n	8005c44 <HAL_TIMEx_PWMN_Start+0x24>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005c36:	b2db      	uxtb	r3, r3
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	bf14      	ite	ne
 8005c3c:	2301      	movne	r3, #1
 8005c3e:	2300      	moveq	r3, #0
 8005c40:	b2db      	uxtb	r3, r3
 8005c42:	e022      	b.n	8005c8a <HAL_TIMEx_PWMN_Start+0x6a>
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	2b04      	cmp	r3, #4
 8005c48:	d109      	bne.n	8005c5e <HAL_TIMEx_PWMN_Start+0x3e>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c50:	b2db      	uxtb	r3, r3
 8005c52:	2b01      	cmp	r3, #1
 8005c54:	bf14      	ite	ne
 8005c56:	2301      	movne	r3, #1
 8005c58:	2300      	moveq	r3, #0
 8005c5a:	b2db      	uxtb	r3, r3
 8005c5c:	e015      	b.n	8005c8a <HAL_TIMEx_PWMN_Start+0x6a>
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	2b08      	cmp	r3, #8
 8005c62:	d109      	bne.n	8005c78 <HAL_TIMEx_PWMN_Start+0x58>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005c6a:	b2db      	uxtb	r3, r3
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	bf14      	ite	ne
 8005c70:	2301      	movne	r3, #1
 8005c72:	2300      	moveq	r3, #0
 8005c74:	b2db      	uxtb	r3, r3
 8005c76:	e008      	b.n	8005c8a <HAL_TIMEx_PWMN_Start+0x6a>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8005c7e:	b2db      	uxtb	r3, r3
 8005c80:	2b01      	cmp	r3, #1
 8005c82:	bf14      	ite	ne
 8005c84:	2301      	movne	r3, #1
 8005c86:	2300      	moveq	r3, #0
 8005c88:	b2db      	uxtb	r3, r3
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d001      	beq.n	8005c92 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	e073      	b.n	8005d7a <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d104      	bne.n	8005ca2 <HAL_TIMEx_PWMN_Start+0x82>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2202      	movs	r2, #2
 8005c9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ca0:	e013      	b.n	8005cca <HAL_TIMEx_PWMN_Start+0xaa>
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	2b04      	cmp	r3, #4
 8005ca6:	d104      	bne.n	8005cb2 <HAL_TIMEx_PWMN_Start+0x92>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2202      	movs	r2, #2
 8005cac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005cb0:	e00b      	b.n	8005cca <HAL_TIMEx_PWMN_Start+0xaa>
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	2b08      	cmp	r3, #8
 8005cb6:	d104      	bne.n	8005cc2 <HAL_TIMEx_PWMN_Start+0xa2>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2202      	movs	r2, #2
 8005cbc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005cc0:	e003      	b.n	8005cca <HAL_TIMEx_PWMN_Start+0xaa>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2202      	movs	r2, #2
 8005cc6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	2204      	movs	r2, #4
 8005cd0:	6839      	ldr	r1, [r7, #0]
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	f000 f9ae 	bl	8006034 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005ce6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a25      	ldr	r2, [pc, #148]	; (8005d84 <HAL_TIMEx_PWMN_Start+0x164>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d022      	beq.n	8005d38 <HAL_TIMEx_PWMN_Start+0x118>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cfa:	d01d      	beq.n	8005d38 <HAL_TIMEx_PWMN_Start+0x118>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a21      	ldr	r2, [pc, #132]	; (8005d88 <HAL_TIMEx_PWMN_Start+0x168>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d018      	beq.n	8005d38 <HAL_TIMEx_PWMN_Start+0x118>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a20      	ldr	r2, [pc, #128]	; (8005d8c <HAL_TIMEx_PWMN_Start+0x16c>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d013      	beq.n	8005d38 <HAL_TIMEx_PWMN_Start+0x118>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a1e      	ldr	r2, [pc, #120]	; (8005d90 <HAL_TIMEx_PWMN_Start+0x170>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d00e      	beq.n	8005d38 <HAL_TIMEx_PWMN_Start+0x118>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a1d      	ldr	r2, [pc, #116]	; (8005d94 <HAL_TIMEx_PWMN_Start+0x174>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d009      	beq.n	8005d38 <HAL_TIMEx_PWMN_Start+0x118>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a1b      	ldr	r2, [pc, #108]	; (8005d98 <HAL_TIMEx_PWMN_Start+0x178>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d004      	beq.n	8005d38 <HAL_TIMEx_PWMN_Start+0x118>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a1a      	ldr	r2, [pc, #104]	; (8005d9c <HAL_TIMEx_PWMN_Start+0x17c>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d115      	bne.n	8005d64 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	689a      	ldr	r2, [r3, #8]
 8005d3e:	4b18      	ldr	r3, [pc, #96]	; (8005da0 <HAL_TIMEx_PWMN_Start+0x180>)
 8005d40:	4013      	ands	r3, r2
 8005d42:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	2b06      	cmp	r3, #6
 8005d48:	d015      	beq.n	8005d76 <HAL_TIMEx_PWMN_Start+0x156>
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d50:	d011      	beq.n	8005d76 <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	681a      	ldr	r2, [r3, #0]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f042 0201 	orr.w	r2, r2, #1
 8005d60:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d62:	e008      	b.n	8005d76 <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	681a      	ldr	r2, [r3, #0]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f042 0201 	orr.w	r2, r2, #1
 8005d72:	601a      	str	r2, [r3, #0]
 8005d74:	e000      	b.n	8005d78 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d76:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005d78:	2300      	movs	r3, #0
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	3710      	adds	r7, #16
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}
 8005d82:	bf00      	nop
 8005d84:	40012c00 	.word	0x40012c00
 8005d88:	40000400 	.word	0x40000400
 8005d8c:	40000800 	.word	0x40000800
 8005d90:	40000c00 	.word	0x40000c00
 8005d94:	40013400 	.word	0x40013400
 8005d98:	40014000 	.word	0x40014000
 8005d9c:	40015000 	.word	0x40015000
 8005da0:	00010007 	.word	0x00010007

08005da4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b085      	sub	sp, #20
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
 8005dac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005db4:	2b01      	cmp	r3, #1
 8005db6:	d101      	bne.n	8005dbc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005db8:	2302      	movs	r3, #2
 8005dba:	e074      	b.n	8005ea6 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2202      	movs	r2, #2
 8005dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	689b      	ldr	r3, [r3, #8]
 8005dda:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a34      	ldr	r2, [pc, #208]	; (8005eb4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d009      	beq.n	8005dfa <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a33      	ldr	r2, [pc, #204]	; (8005eb8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d004      	beq.n	8005dfa <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a31      	ldr	r2, [pc, #196]	; (8005ebc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d108      	bne.n	8005e0c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005e00:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	68fa      	ldr	r2, [r7, #12]
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005e12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	68fa      	ldr	r2, [r7, #12]
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	68fa      	ldr	r2, [r7, #12]
 8005e28:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4a21      	ldr	r2, [pc, #132]	; (8005eb4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d022      	beq.n	8005e7a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e3c:	d01d      	beq.n	8005e7a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4a1f      	ldr	r2, [pc, #124]	; (8005ec0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d018      	beq.n	8005e7a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a1d      	ldr	r2, [pc, #116]	; (8005ec4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d013      	beq.n	8005e7a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4a1c      	ldr	r2, [pc, #112]	; (8005ec8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d00e      	beq.n	8005e7a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a15      	ldr	r2, [pc, #84]	; (8005eb8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d009      	beq.n	8005e7a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a18      	ldr	r2, [pc, #96]	; (8005ecc <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d004      	beq.n	8005e7a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a11      	ldr	r2, [pc, #68]	; (8005ebc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d10c      	bne.n	8005e94 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e80:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	689b      	ldr	r3, [r3, #8]
 8005e86:	68ba      	ldr	r2, [r7, #8]
 8005e88:	4313      	orrs	r3, r2
 8005e8a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	68ba      	ldr	r2, [r7, #8]
 8005e92:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2201      	movs	r2, #1
 8005e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ea4:	2300      	movs	r3, #0
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	3714      	adds	r7, #20
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb0:	4770      	bx	lr
 8005eb2:	bf00      	nop
 8005eb4:	40012c00 	.word	0x40012c00
 8005eb8:	40013400 	.word	0x40013400
 8005ebc:	40015000 	.word	0x40015000
 8005ec0:	40000400 	.word	0x40000400
 8005ec4:	40000800 	.word	0x40000800
 8005ec8:	40000c00 	.word	0x40000c00
 8005ecc:	40014000 	.word	0x40014000

08005ed0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b085      	sub	sp, #20
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
 8005ed8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005eda:	2300      	movs	r3, #0
 8005edc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ee4:	2b01      	cmp	r3, #1
 8005ee6:	d101      	bne.n	8005eec <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005ee8:	2302      	movs	r3, #2
 8005eea:	e096      	b.n	800601a <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2201      	movs	r2, #1
 8005ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	68db      	ldr	r3, [r3, #12]
 8005efe:	4313      	orrs	r3, r2
 8005f00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	691b      	ldr	r3, [r3, #16]
 8005f36:	4313      	orrs	r3, r2
 8005f38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	695b      	ldr	r3, [r3, #20]
 8005f44:	4313      	orrs	r3, r2
 8005f46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f52:	4313      	orrs	r3, r2
 8005f54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	699b      	ldr	r3, [r3, #24]
 8005f60:	041b      	lsls	r3, r3, #16
 8005f62:	4313      	orrs	r3, r2
 8005f64:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a2f      	ldr	r2, [pc, #188]	; (8006028 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d009      	beq.n	8005f84 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a2d      	ldr	r2, [pc, #180]	; (800602c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d004      	beq.n	8005f84 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a2c      	ldr	r2, [pc, #176]	; (8006030 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d106      	bne.n	8005f92 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	69db      	ldr	r3, [r3, #28]
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a24      	ldr	r2, [pc, #144]	; (8006028 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d009      	beq.n	8005fb0 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a22      	ldr	r2, [pc, #136]	; (800602c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d004      	beq.n	8005fb0 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a21      	ldr	r2, [pc, #132]	; (8006030 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d12b      	bne.n	8006008 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fba:	051b      	lsls	r3, r3, #20
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	6a1b      	ldr	r3, [r3, #32]
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a11      	ldr	r2, [pc, #68]	; (8006028 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d009      	beq.n	8005ffa <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a10      	ldr	r2, [pc, #64]	; (800602c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d004      	beq.n	8005ffa <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a0e      	ldr	r2, [pc, #56]	; (8006030 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d106      	bne.n	8006008 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006004:	4313      	orrs	r3, r2
 8006006:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	68fa      	ldr	r2, [r7, #12]
 800600e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2200      	movs	r2, #0
 8006014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006018:	2300      	movs	r3, #0
}
 800601a:	4618      	mov	r0, r3
 800601c:	3714      	adds	r7, #20
 800601e:	46bd      	mov	sp, r7
 8006020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006024:	4770      	bx	lr
 8006026:	bf00      	nop
 8006028:	40012c00 	.word	0x40012c00
 800602c:	40013400 	.word	0x40013400
 8006030:	40015000 	.word	0x40015000

08006034 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8006034:	b480      	push	{r7}
 8006036:	b087      	sub	sp, #28
 8006038:	af00      	add	r7, sp, #0
 800603a:	60f8      	str	r0, [r7, #12]
 800603c:	60b9      	str	r1, [r7, #8]
 800603e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	f003 031f 	and.w	r3, r3, #31
 8006046:	2204      	movs	r2, #4
 8006048:	fa02 f303 	lsl.w	r3, r2, r3
 800604c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	6a1a      	ldr	r2, [r3, #32]
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	43db      	mvns	r3, r3
 8006056:	401a      	ands	r2, r3
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	6a1a      	ldr	r2, [r3, #32]
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	f003 031f 	and.w	r3, r3, #31
 8006066:	6879      	ldr	r1, [r7, #4]
 8006068:	fa01 f303 	lsl.w	r3, r1, r3
 800606c:	431a      	orrs	r2, r3
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	621a      	str	r2, [r3, #32]
}
 8006072:	bf00      	nop
 8006074:	371c      	adds	r7, #28
 8006076:	46bd      	mov	sp, r7
 8006078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607c:	4770      	bx	lr

0800607e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800607e:	b580      	push	{r7, lr}
 8006080:	b082      	sub	sp, #8
 8006082:	af00      	add	r7, sp, #0
 8006084:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d101      	bne.n	8006090 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800608c:	2301      	movs	r3, #1
 800608e:	e042      	b.n	8006116 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006096:	2b00      	cmp	r3, #0
 8006098:	d106      	bne.n	80060a8 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2200      	movs	r2, #0
 800609e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f7fb fd98 	bl	8001bd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2224      	movs	r2, #36	; 0x24
 80060ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	681a      	ldr	r2, [r3, #0]
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f022 0201 	bic.w	r2, r2, #1
 80060be:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80060c0:	6878      	ldr	r0, [r7, #4]
 80060c2:	f000 fc51 	bl	8006968 <UART_SetConfig>
 80060c6:	4603      	mov	r3, r0
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	d101      	bne.n	80060d0 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80060cc:	2301      	movs	r3, #1
 80060ce:	e022      	b.n	8006116 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d002      	beq.n	80060de <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	f000 ff41 	bl	8006f60 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	685a      	ldr	r2, [r3, #4]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80060ec:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	689a      	ldr	r2, [r3, #8]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80060fc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	681a      	ldr	r2, [r3, #0]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f042 0201 	orr.w	r2, r2, #1
 800610c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f000 ffc8 	bl	80070a4 <UART_CheckIdleState>
 8006114:	4603      	mov	r3, r0
}
 8006116:	4618      	mov	r0, r3
 8006118:	3708      	adds	r7, #8
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}

0800611e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800611e:	b580      	push	{r7, lr}
 8006120:	b08a      	sub	sp, #40	; 0x28
 8006122:	af02      	add	r7, sp, #8
 8006124:	60f8      	str	r0, [r7, #12]
 8006126:	60b9      	str	r1, [r7, #8]
 8006128:	603b      	str	r3, [r7, #0]
 800612a:	4613      	mov	r3, r2
 800612c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006134:	2b20      	cmp	r3, #32
 8006136:	f040 8083 	bne.w	8006240 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d002      	beq.n	8006146 <HAL_UART_Transmit+0x28>
 8006140:	88fb      	ldrh	r3, [r7, #6]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d101      	bne.n	800614a <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006146:	2301      	movs	r3, #1
 8006148:	e07b      	b.n	8006242 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006150:	2b01      	cmp	r3, #1
 8006152:	d101      	bne.n	8006158 <HAL_UART_Transmit+0x3a>
 8006154:	2302      	movs	r3, #2
 8006156:	e074      	b.n	8006242 <HAL_UART_Transmit+0x124>
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	2201      	movs	r2, #1
 800615c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	2200      	movs	r2, #0
 8006164:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2221      	movs	r2, #33	; 0x21
 800616c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006170:	f7fb fe20 	bl	8001db4 <HAL_GetTick>
 8006174:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	88fa      	ldrh	r2, [r7, #6]
 800617a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	88fa      	ldrh	r2, [r7, #6]
 8006182:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	689b      	ldr	r3, [r3, #8]
 800618a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800618e:	d108      	bne.n	80061a2 <HAL_UART_Transmit+0x84>
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	691b      	ldr	r3, [r3, #16]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d104      	bne.n	80061a2 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8006198:	2300      	movs	r3, #0
 800619a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	61bb      	str	r3, [r7, #24]
 80061a0:	e003      	b.n	80061aa <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80061a6:	2300      	movs	r3, #0
 80061a8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	2200      	movs	r2, #0
 80061ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80061b2:	e02c      	b.n	800620e <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	9300      	str	r3, [sp, #0]
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	2200      	movs	r2, #0
 80061bc:	2180      	movs	r1, #128	; 0x80
 80061be:	68f8      	ldr	r0, [r7, #12]
 80061c0:	f000 ffbb 	bl	800713a <UART_WaitOnFlagUntilTimeout>
 80061c4:	4603      	mov	r3, r0
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d001      	beq.n	80061ce <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80061ca:	2303      	movs	r3, #3
 80061cc:	e039      	b.n	8006242 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80061ce:	69fb      	ldr	r3, [r7, #28]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d10b      	bne.n	80061ec <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80061d4:	69bb      	ldr	r3, [r7, #24]
 80061d6:	881b      	ldrh	r3, [r3, #0]
 80061d8:	461a      	mov	r2, r3
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80061e2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80061e4:	69bb      	ldr	r3, [r7, #24]
 80061e6:	3302      	adds	r3, #2
 80061e8:	61bb      	str	r3, [r7, #24]
 80061ea:	e007      	b.n	80061fc <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80061ec:	69fb      	ldr	r3, [r7, #28]
 80061ee:	781a      	ldrb	r2, [r3, #0]
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80061f6:	69fb      	ldr	r3, [r7, #28]
 80061f8:	3301      	adds	r3, #1
 80061fa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006202:	b29b      	uxth	r3, r3
 8006204:	3b01      	subs	r3, #1
 8006206:	b29a      	uxth	r2, r3
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006214:	b29b      	uxth	r3, r3
 8006216:	2b00      	cmp	r3, #0
 8006218:	d1cc      	bne.n	80061b4 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	9300      	str	r3, [sp, #0]
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	2200      	movs	r2, #0
 8006222:	2140      	movs	r1, #64	; 0x40
 8006224:	68f8      	ldr	r0, [r7, #12]
 8006226:	f000 ff88 	bl	800713a <UART_WaitOnFlagUntilTimeout>
 800622a:	4603      	mov	r3, r0
 800622c:	2b00      	cmp	r3, #0
 800622e:	d001      	beq.n	8006234 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8006230:	2303      	movs	r3, #3
 8006232:	e006      	b.n	8006242 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	2220      	movs	r2, #32
 8006238:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800623c:	2300      	movs	r3, #0
 800623e:	e000      	b.n	8006242 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8006240:	2302      	movs	r3, #2
  }
}
 8006242:	4618      	mov	r0, r3
 8006244:	3720      	adds	r7, #32
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}
	...

0800624c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b08a      	sub	sp, #40	; 0x28
 8006250:	af00      	add	r7, sp, #0
 8006252:	60f8      	str	r0, [r7, #12]
 8006254:	60b9      	str	r1, [r7, #8]
 8006256:	4613      	mov	r3, r2
 8006258:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006260:	2b20      	cmp	r3, #32
 8006262:	d142      	bne.n	80062ea <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d002      	beq.n	8006270 <HAL_UART_Receive_IT+0x24>
 800626a:	88fb      	ldrh	r3, [r7, #6]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d101      	bne.n	8006274 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006270:	2301      	movs	r3, #1
 8006272:	e03b      	b.n	80062ec <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800627a:	2b01      	cmp	r3, #1
 800627c:	d101      	bne.n	8006282 <HAL_UART_Receive_IT+0x36>
 800627e:	2302      	movs	r3, #2
 8006280:	e034      	b.n	80062ec <HAL_UART_Receive_IT+0xa0>
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2201      	movs	r2, #1
 8006286:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	2200      	movs	r2, #0
 800628e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a17      	ldr	r2, [pc, #92]	; (80062f4 <HAL_UART_Receive_IT+0xa8>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d01f      	beq.n	80062da <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d018      	beq.n	80062da <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	e853 3f00 	ldrex	r3, [r3]
 80062b4:	613b      	str	r3, [r7, #16]
   return(result);
 80062b6:	693b      	ldr	r3, [r7, #16]
 80062b8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80062bc:	627b      	str	r3, [r7, #36]	; 0x24
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	461a      	mov	r2, r3
 80062c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c6:	623b      	str	r3, [r7, #32]
 80062c8:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ca:	69f9      	ldr	r1, [r7, #28]
 80062cc:	6a3a      	ldr	r2, [r7, #32]
 80062ce:	e841 2300 	strex	r3, r2, [r1]
 80062d2:	61bb      	str	r3, [r7, #24]
   return(result);
 80062d4:	69bb      	ldr	r3, [r7, #24]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d1e6      	bne.n	80062a8 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80062da:	88fb      	ldrh	r3, [r7, #6]
 80062dc:	461a      	mov	r2, r3
 80062de:	68b9      	ldr	r1, [r7, #8]
 80062e0:	68f8      	ldr	r0, [r7, #12]
 80062e2:	f000 fff3 	bl	80072cc <UART_Start_Receive_IT>
 80062e6:	4603      	mov	r3, r0
 80062e8:	e000      	b.n	80062ec <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80062ea:	2302      	movs	r3, #2
  }
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	3728      	adds	r7, #40	; 0x28
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}
 80062f4:	40008000 	.word	0x40008000

080062f8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b0ba      	sub	sp, #232	; 0xe8
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	69db      	ldr	r3, [r3, #28]
 8006306:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	689b      	ldr	r3, [r3, #8]
 800631a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800631e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006322:	f640 030f 	movw	r3, #2063	; 0x80f
 8006326:	4013      	ands	r3, r2
 8006328:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800632c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006330:	2b00      	cmp	r3, #0
 8006332:	d11b      	bne.n	800636c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006334:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006338:	f003 0320 	and.w	r3, r3, #32
 800633c:	2b00      	cmp	r3, #0
 800633e:	d015      	beq.n	800636c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006340:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006344:	f003 0320 	and.w	r3, r3, #32
 8006348:	2b00      	cmp	r3, #0
 800634a:	d105      	bne.n	8006358 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800634c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006350:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006354:	2b00      	cmp	r3, #0
 8006356:	d009      	beq.n	800636c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800635c:	2b00      	cmp	r3, #0
 800635e:	f000 82d6 	beq.w	800690e <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	4798      	blx	r3
      }
      return;
 800636a:	e2d0      	b.n	800690e <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800636c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006370:	2b00      	cmp	r3, #0
 8006372:	f000 811f 	beq.w	80065b4 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006376:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800637a:	4b8b      	ldr	r3, [pc, #556]	; (80065a8 <HAL_UART_IRQHandler+0x2b0>)
 800637c:	4013      	ands	r3, r2
 800637e:	2b00      	cmp	r3, #0
 8006380:	d106      	bne.n	8006390 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006382:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006386:	4b89      	ldr	r3, [pc, #548]	; (80065ac <HAL_UART_IRQHandler+0x2b4>)
 8006388:	4013      	ands	r3, r2
 800638a:	2b00      	cmp	r3, #0
 800638c:	f000 8112 	beq.w	80065b4 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006390:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006394:	f003 0301 	and.w	r3, r3, #1
 8006398:	2b00      	cmp	r3, #0
 800639a:	d011      	beq.n	80063c0 <HAL_UART_IRQHandler+0xc8>
 800639c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d00b      	beq.n	80063c0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	2201      	movs	r2, #1
 80063ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80063b6:	f043 0201 	orr.w	r2, r3, #1
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80063c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063c4:	f003 0302 	and.w	r3, r3, #2
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d011      	beq.n	80063f0 <HAL_UART_IRQHandler+0xf8>
 80063cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80063d0:	f003 0301 	and.w	r3, r3, #1
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d00b      	beq.n	80063f0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	2202      	movs	r2, #2
 80063de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80063e6:	f043 0204 	orr.w	r2, r3, #4
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80063f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063f4:	f003 0304 	and.w	r3, r3, #4
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d011      	beq.n	8006420 <HAL_UART_IRQHandler+0x128>
 80063fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006400:	f003 0301 	and.w	r3, r3, #1
 8006404:	2b00      	cmp	r3, #0
 8006406:	d00b      	beq.n	8006420 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	2204      	movs	r2, #4
 800640e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006416:	f043 0202 	orr.w	r2, r3, #2
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006420:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006424:	f003 0308 	and.w	r3, r3, #8
 8006428:	2b00      	cmp	r3, #0
 800642a:	d017      	beq.n	800645c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800642c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006430:	f003 0320 	and.w	r3, r3, #32
 8006434:	2b00      	cmp	r3, #0
 8006436:	d105      	bne.n	8006444 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006438:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800643c:	4b5a      	ldr	r3, [pc, #360]	; (80065a8 <HAL_UART_IRQHandler+0x2b0>)
 800643e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006440:	2b00      	cmp	r3, #0
 8006442:	d00b      	beq.n	800645c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	2208      	movs	r2, #8
 800644a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006452:	f043 0208 	orr.w	r2, r3, #8
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800645c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006460:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006464:	2b00      	cmp	r3, #0
 8006466:	d012      	beq.n	800648e <HAL_UART_IRQHandler+0x196>
 8006468:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800646c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006470:	2b00      	cmp	r3, #0
 8006472:	d00c      	beq.n	800648e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800647c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006484:	f043 0220 	orr.w	r2, r3, #32
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006494:	2b00      	cmp	r3, #0
 8006496:	f000 823c 	beq.w	8006912 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800649a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800649e:	f003 0320 	and.w	r3, r3, #32
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d013      	beq.n	80064ce <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80064a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064aa:	f003 0320 	and.w	r3, r3, #32
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d105      	bne.n	80064be <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80064b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80064b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d007      	beq.n	80064ce <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d003      	beq.n	80064ce <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80064d4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	689b      	ldr	r3, [r3, #8]
 80064de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064e2:	2b40      	cmp	r3, #64	; 0x40
 80064e4:	d005      	beq.n	80064f2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80064e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80064ea:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d04f      	beq.n	8006592 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f001 f814 	bl	8007520 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	689b      	ldr	r3, [r3, #8]
 80064fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006502:	2b40      	cmp	r3, #64	; 0x40
 8006504:	d141      	bne.n	800658a <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	3308      	adds	r3, #8
 800650c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006510:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006514:	e853 3f00 	ldrex	r3, [r3]
 8006518:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800651c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006520:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006524:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	3308      	adds	r3, #8
 800652e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006532:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006536:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800653a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800653e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006542:	e841 2300 	strex	r3, r2, [r1]
 8006546:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800654a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800654e:	2b00      	cmp	r3, #0
 8006550:	d1d9      	bne.n	8006506 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006556:	2b00      	cmp	r3, #0
 8006558:	d013      	beq.n	8006582 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800655e:	4a14      	ldr	r2, [pc, #80]	; (80065b0 <HAL_UART_IRQHandler+0x2b8>)
 8006560:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006566:	4618      	mov	r0, r3
 8006568:	f7fd fa88 	bl	8003a7c <HAL_DMA_Abort_IT>
 800656c:	4603      	mov	r3, r0
 800656e:	2b00      	cmp	r3, #0
 8006570:	d017      	beq.n	80065a2 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006578:	687a      	ldr	r2, [r7, #4]
 800657a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800657c:	4610      	mov	r0, r2
 800657e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006580:	e00f      	b.n	80065a2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f000 f9da 	bl	800693c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006588:	e00b      	b.n	80065a2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	f000 f9d6 	bl	800693c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006590:	e007      	b.n	80065a2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f000 f9d2 	bl	800693c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2200      	movs	r2, #0
 800659c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80065a0:	e1b7      	b.n	8006912 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065a2:	bf00      	nop
    return;
 80065a4:	e1b5      	b.n	8006912 <HAL_UART_IRQHandler+0x61a>
 80065a6:	bf00      	nop
 80065a8:	10000001 	.word	0x10000001
 80065ac:	04000120 	.word	0x04000120
 80065b0:	080075ed 	.word	0x080075ed

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065b8:	2b01      	cmp	r3, #1
 80065ba:	f040 814a 	bne.w	8006852 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80065be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065c2:	f003 0310 	and.w	r3, r3, #16
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	f000 8143 	beq.w	8006852 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80065cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065d0:	f003 0310 	and.w	r3, r3, #16
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	f000 813c 	beq.w	8006852 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	2210      	movs	r2, #16
 80065e0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	689b      	ldr	r3, [r3, #8]
 80065e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065ec:	2b40      	cmp	r3, #64	; 0x40
 80065ee:	f040 80b5 	bne.w	800675c <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80065fe:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006602:	2b00      	cmp	r3, #0
 8006604:	f000 8187 	beq.w	8006916 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800660e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006612:	429a      	cmp	r2, r3
 8006614:	f080 817f 	bcs.w	8006916 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800661e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f003 0320 	and.w	r3, r3, #32
 800662e:	2b00      	cmp	r3, #0
 8006630:	f040 8086 	bne.w	8006740 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800663c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006640:	e853 3f00 	ldrex	r3, [r3]
 8006644:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006648:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800664c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006650:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	461a      	mov	r2, r3
 800665a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800665e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006662:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006666:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800666a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800666e:	e841 2300 	strex	r3, r2, [r1]
 8006672:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006676:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800667a:	2b00      	cmp	r3, #0
 800667c:	d1da      	bne.n	8006634 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	3308      	adds	r3, #8
 8006684:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006686:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006688:	e853 3f00 	ldrex	r3, [r3]
 800668c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800668e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006690:	f023 0301 	bic.w	r3, r3, #1
 8006694:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	3308      	adds	r3, #8
 800669e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80066a2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80066a6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066a8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80066aa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80066ae:	e841 2300 	strex	r3, r2, [r1]
 80066b2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80066b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d1e1      	bne.n	800667e <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	3308      	adds	r3, #8
 80066c0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80066c4:	e853 3f00 	ldrex	r3, [r3]
 80066c8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80066ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80066cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	3308      	adds	r3, #8
 80066da:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80066de:	66fa      	str	r2, [r7, #108]	; 0x6c
 80066e0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066e2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80066e4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80066e6:	e841 2300 	strex	r3, r2, [r1]
 80066ea:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80066ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d1e3      	bne.n	80066ba <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2220      	movs	r2, #32
 80066f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2200      	movs	r2, #0
 80066fe:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006706:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006708:	e853 3f00 	ldrex	r3, [r3]
 800670c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800670e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006710:	f023 0310 	bic.w	r3, r3, #16
 8006714:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	461a      	mov	r2, r3
 800671e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006722:	65bb      	str	r3, [r7, #88]	; 0x58
 8006724:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006726:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006728:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800672a:	e841 2300 	strex	r3, r2, [r1]
 800672e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006730:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006732:	2b00      	cmp	r3, #0
 8006734:	d1e4      	bne.n	8006700 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800673a:	4618      	mov	r0, r3
 800673c:	f7fd f945 	bl	80039ca <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800674c:	b29b      	uxth	r3, r3
 800674e:	1ad3      	subs	r3, r2, r3
 8006750:	b29b      	uxth	r3, r3
 8006752:	4619      	mov	r1, r3
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	f000 f8fb 	bl	8006950 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800675a:	e0dc      	b.n	8006916 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006768:	b29b      	uxth	r3, r3
 800676a:	1ad3      	subs	r3, r2, r3
 800676c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006776:	b29b      	uxth	r3, r3
 8006778:	2b00      	cmp	r3, #0
 800677a:	f000 80ce 	beq.w	800691a <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 800677e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006782:	2b00      	cmp	r3, #0
 8006784:	f000 80c9 	beq.w	800691a <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800678e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006790:	e853 3f00 	ldrex	r3, [r3]
 8006794:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006796:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006798:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800679c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	461a      	mov	r2, r3
 80067a6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80067aa:	647b      	str	r3, [r7, #68]	; 0x44
 80067ac:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80067b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80067b2:	e841 2300 	strex	r3, r2, [r1]
 80067b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80067b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d1e4      	bne.n	8006788 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	3308      	adds	r3, #8
 80067c4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c8:	e853 3f00 	ldrex	r3, [r3]
 80067cc:	623b      	str	r3, [r7, #32]
   return(result);
 80067ce:	6a3b      	ldr	r3, [r7, #32]
 80067d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80067d4:	f023 0301 	bic.w	r3, r3, #1
 80067d8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	3308      	adds	r3, #8
 80067e2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80067e6:	633a      	str	r2, [r7, #48]	; 0x30
 80067e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80067ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067ee:	e841 2300 	strex	r3, r2, [r1]
 80067f2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80067f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d1e1      	bne.n	80067be <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2220      	movs	r2, #32
 80067fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2200      	movs	r2, #0
 8006806:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2200      	movs	r2, #0
 800680c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006814:	693b      	ldr	r3, [r7, #16]
 8006816:	e853 3f00 	ldrex	r3, [r3]
 800681a:	60fb      	str	r3, [r7, #12]
   return(result);
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	f023 0310 	bic.w	r3, r3, #16
 8006822:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	461a      	mov	r2, r3
 800682c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006830:	61fb      	str	r3, [r7, #28]
 8006832:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006834:	69b9      	ldr	r1, [r7, #24]
 8006836:	69fa      	ldr	r2, [r7, #28]
 8006838:	e841 2300 	strex	r3, r2, [r1]
 800683c:	617b      	str	r3, [r7, #20]
   return(result);
 800683e:	697b      	ldr	r3, [r7, #20]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d1e4      	bne.n	800680e <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006844:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006848:	4619      	mov	r1, r3
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f000 f880 	bl	8006950 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006850:	e063      	b.n	800691a <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006852:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006856:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800685a:	2b00      	cmp	r3, #0
 800685c:	d00e      	beq.n	800687c <HAL_UART_IRQHandler+0x584>
 800685e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006862:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006866:	2b00      	cmp	r3, #0
 8006868:	d008      	beq.n	800687c <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006872:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006874:	6878      	ldr	r0, [r7, #4]
 8006876:	f001 fb57 	bl	8007f28 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800687a:	e051      	b.n	8006920 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800687c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006880:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006884:	2b00      	cmp	r3, #0
 8006886:	d014      	beq.n	80068b2 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006888:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800688c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006890:	2b00      	cmp	r3, #0
 8006892:	d105      	bne.n	80068a0 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006894:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006898:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800689c:	2b00      	cmp	r3, #0
 800689e:	d008      	beq.n	80068b2 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d03a      	beq.n	800691e <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	4798      	blx	r3
    }
    return;
 80068b0:	e035      	b.n	800691e <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80068b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d009      	beq.n	80068d2 <HAL_UART_IRQHandler+0x5da>
 80068be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d003      	beq.n	80068d2 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f000 fea4 	bl	8007618 <UART_EndTransmit_IT>
    return;
 80068d0:	e026      	b.n	8006920 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80068d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d009      	beq.n	80068f2 <HAL_UART_IRQHandler+0x5fa>
 80068de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068e2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d003      	beq.n	80068f2 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f001 fb30 	bl	8007f50 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80068f0:	e016      	b.n	8006920 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80068f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d010      	beq.n	8006920 <HAL_UART_IRQHandler+0x628>
 80068fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006902:	2b00      	cmp	r3, #0
 8006904:	da0c      	bge.n	8006920 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f001 fb18 	bl	8007f3c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800690c:	e008      	b.n	8006920 <HAL_UART_IRQHandler+0x628>
      return;
 800690e:	bf00      	nop
 8006910:	e006      	b.n	8006920 <HAL_UART_IRQHandler+0x628>
    return;
 8006912:	bf00      	nop
 8006914:	e004      	b.n	8006920 <HAL_UART_IRQHandler+0x628>
      return;
 8006916:	bf00      	nop
 8006918:	e002      	b.n	8006920 <HAL_UART_IRQHandler+0x628>
      return;
 800691a:	bf00      	nop
 800691c:	e000      	b.n	8006920 <HAL_UART_IRQHandler+0x628>
    return;
 800691e:	bf00      	nop
  }
}
 8006920:	37e8      	adds	r7, #232	; 0xe8
 8006922:	46bd      	mov	sp, r7
 8006924:	bd80      	pop	{r7, pc}
 8006926:	bf00      	nop

08006928 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006928:	b480      	push	{r7}
 800692a:	b083      	sub	sp, #12
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006930:	bf00      	nop
 8006932:	370c      	adds	r7, #12
 8006934:	46bd      	mov	sp, r7
 8006936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693a:	4770      	bx	lr

0800693c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800693c:	b480      	push	{r7}
 800693e:	b083      	sub	sp, #12
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006944:	bf00      	nop
 8006946:	370c      	adds	r7, #12
 8006948:	46bd      	mov	sp, r7
 800694a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694e:	4770      	bx	lr

08006950 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006950:	b480      	push	{r7}
 8006952:	b083      	sub	sp, #12
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
 8006958:	460b      	mov	r3, r1
 800695a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800695c:	bf00      	nop
 800695e:	370c      	adds	r7, #12
 8006960:	46bd      	mov	sp, r7
 8006962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006966:	4770      	bx	lr

08006968 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006968:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800696c:	b08c      	sub	sp, #48	; 0x30
 800696e:	af00      	add	r7, sp, #0
 8006970:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006972:	2300      	movs	r3, #0
 8006974:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	689a      	ldr	r2, [r3, #8]
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	691b      	ldr	r3, [r3, #16]
 8006980:	431a      	orrs	r2, r3
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	695b      	ldr	r3, [r3, #20]
 8006986:	431a      	orrs	r2, r3
 8006988:	697b      	ldr	r3, [r7, #20]
 800698a:	69db      	ldr	r3, [r3, #28]
 800698c:	4313      	orrs	r3, r2
 800698e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006990:	697b      	ldr	r3, [r7, #20]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	681a      	ldr	r2, [r3, #0]
 8006996:	4baa      	ldr	r3, [pc, #680]	; (8006c40 <UART_SetConfig+0x2d8>)
 8006998:	4013      	ands	r3, r2
 800699a:	697a      	ldr	r2, [r7, #20]
 800699c:	6812      	ldr	r2, [r2, #0]
 800699e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80069a0:	430b      	orrs	r3, r1
 80069a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	685b      	ldr	r3, [r3, #4]
 80069aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80069ae:	697b      	ldr	r3, [r7, #20]
 80069b0:	68da      	ldr	r2, [r3, #12]
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	430a      	orrs	r2, r1
 80069b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	699b      	ldr	r3, [r3, #24]
 80069be:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80069c0:	697b      	ldr	r3, [r7, #20]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4a9f      	ldr	r2, [pc, #636]	; (8006c44 <UART_SetConfig+0x2dc>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d004      	beq.n	80069d4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	6a1b      	ldr	r3, [r3, #32]
 80069ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80069d0:	4313      	orrs	r3, r2
 80069d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	689b      	ldr	r3, [r3, #8]
 80069da:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80069de:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80069e2:	697a      	ldr	r2, [r7, #20]
 80069e4:	6812      	ldr	r2, [r2, #0]
 80069e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80069e8:	430b      	orrs	r3, r1
 80069ea:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069f2:	f023 010f 	bic.w	r1, r3, #15
 80069f6:	697b      	ldr	r3, [r7, #20]
 80069f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	430a      	orrs	r2, r1
 8006a00:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006a02:	697b      	ldr	r3, [r7, #20]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4a90      	ldr	r2, [pc, #576]	; (8006c48 <UART_SetConfig+0x2e0>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d125      	bne.n	8006a58 <UART_SetConfig+0xf0>
 8006a0c:	4b8f      	ldr	r3, [pc, #572]	; (8006c4c <UART_SetConfig+0x2e4>)
 8006a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a12:	f003 0303 	and.w	r3, r3, #3
 8006a16:	2b03      	cmp	r3, #3
 8006a18:	d81a      	bhi.n	8006a50 <UART_SetConfig+0xe8>
 8006a1a:	a201      	add	r2, pc, #4	; (adr r2, 8006a20 <UART_SetConfig+0xb8>)
 8006a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a20:	08006a31 	.word	0x08006a31
 8006a24:	08006a41 	.word	0x08006a41
 8006a28:	08006a39 	.word	0x08006a39
 8006a2c:	08006a49 	.word	0x08006a49
 8006a30:	2301      	movs	r3, #1
 8006a32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a36:	e116      	b.n	8006c66 <UART_SetConfig+0x2fe>
 8006a38:	2302      	movs	r3, #2
 8006a3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a3e:	e112      	b.n	8006c66 <UART_SetConfig+0x2fe>
 8006a40:	2304      	movs	r3, #4
 8006a42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a46:	e10e      	b.n	8006c66 <UART_SetConfig+0x2fe>
 8006a48:	2308      	movs	r3, #8
 8006a4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a4e:	e10a      	b.n	8006c66 <UART_SetConfig+0x2fe>
 8006a50:	2310      	movs	r3, #16
 8006a52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a56:	e106      	b.n	8006c66 <UART_SetConfig+0x2fe>
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4a7c      	ldr	r2, [pc, #496]	; (8006c50 <UART_SetConfig+0x2e8>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d138      	bne.n	8006ad4 <UART_SetConfig+0x16c>
 8006a62:	4b7a      	ldr	r3, [pc, #488]	; (8006c4c <UART_SetConfig+0x2e4>)
 8006a64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a68:	f003 030c 	and.w	r3, r3, #12
 8006a6c:	2b0c      	cmp	r3, #12
 8006a6e:	d82d      	bhi.n	8006acc <UART_SetConfig+0x164>
 8006a70:	a201      	add	r2, pc, #4	; (adr r2, 8006a78 <UART_SetConfig+0x110>)
 8006a72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a76:	bf00      	nop
 8006a78:	08006aad 	.word	0x08006aad
 8006a7c:	08006acd 	.word	0x08006acd
 8006a80:	08006acd 	.word	0x08006acd
 8006a84:	08006acd 	.word	0x08006acd
 8006a88:	08006abd 	.word	0x08006abd
 8006a8c:	08006acd 	.word	0x08006acd
 8006a90:	08006acd 	.word	0x08006acd
 8006a94:	08006acd 	.word	0x08006acd
 8006a98:	08006ab5 	.word	0x08006ab5
 8006a9c:	08006acd 	.word	0x08006acd
 8006aa0:	08006acd 	.word	0x08006acd
 8006aa4:	08006acd 	.word	0x08006acd
 8006aa8:	08006ac5 	.word	0x08006ac5
 8006aac:	2300      	movs	r3, #0
 8006aae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ab2:	e0d8      	b.n	8006c66 <UART_SetConfig+0x2fe>
 8006ab4:	2302      	movs	r3, #2
 8006ab6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006aba:	e0d4      	b.n	8006c66 <UART_SetConfig+0x2fe>
 8006abc:	2304      	movs	r3, #4
 8006abe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ac2:	e0d0      	b.n	8006c66 <UART_SetConfig+0x2fe>
 8006ac4:	2308      	movs	r3, #8
 8006ac6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006aca:	e0cc      	b.n	8006c66 <UART_SetConfig+0x2fe>
 8006acc:	2310      	movs	r3, #16
 8006ace:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ad2:	e0c8      	b.n	8006c66 <UART_SetConfig+0x2fe>
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	4a5e      	ldr	r2, [pc, #376]	; (8006c54 <UART_SetConfig+0x2ec>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d125      	bne.n	8006b2a <UART_SetConfig+0x1c2>
 8006ade:	4b5b      	ldr	r3, [pc, #364]	; (8006c4c <UART_SetConfig+0x2e4>)
 8006ae0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ae4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006ae8:	2b30      	cmp	r3, #48	; 0x30
 8006aea:	d016      	beq.n	8006b1a <UART_SetConfig+0x1b2>
 8006aec:	2b30      	cmp	r3, #48	; 0x30
 8006aee:	d818      	bhi.n	8006b22 <UART_SetConfig+0x1ba>
 8006af0:	2b20      	cmp	r3, #32
 8006af2:	d00a      	beq.n	8006b0a <UART_SetConfig+0x1a2>
 8006af4:	2b20      	cmp	r3, #32
 8006af6:	d814      	bhi.n	8006b22 <UART_SetConfig+0x1ba>
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d002      	beq.n	8006b02 <UART_SetConfig+0x19a>
 8006afc:	2b10      	cmp	r3, #16
 8006afe:	d008      	beq.n	8006b12 <UART_SetConfig+0x1aa>
 8006b00:	e00f      	b.n	8006b22 <UART_SetConfig+0x1ba>
 8006b02:	2300      	movs	r3, #0
 8006b04:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b08:	e0ad      	b.n	8006c66 <UART_SetConfig+0x2fe>
 8006b0a:	2302      	movs	r3, #2
 8006b0c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b10:	e0a9      	b.n	8006c66 <UART_SetConfig+0x2fe>
 8006b12:	2304      	movs	r3, #4
 8006b14:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b18:	e0a5      	b.n	8006c66 <UART_SetConfig+0x2fe>
 8006b1a:	2308      	movs	r3, #8
 8006b1c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b20:	e0a1      	b.n	8006c66 <UART_SetConfig+0x2fe>
 8006b22:	2310      	movs	r3, #16
 8006b24:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b28:	e09d      	b.n	8006c66 <UART_SetConfig+0x2fe>
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	4a4a      	ldr	r2, [pc, #296]	; (8006c58 <UART_SetConfig+0x2f0>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d125      	bne.n	8006b80 <UART_SetConfig+0x218>
 8006b34:	4b45      	ldr	r3, [pc, #276]	; (8006c4c <UART_SetConfig+0x2e4>)
 8006b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b3a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006b3e:	2bc0      	cmp	r3, #192	; 0xc0
 8006b40:	d016      	beq.n	8006b70 <UART_SetConfig+0x208>
 8006b42:	2bc0      	cmp	r3, #192	; 0xc0
 8006b44:	d818      	bhi.n	8006b78 <UART_SetConfig+0x210>
 8006b46:	2b80      	cmp	r3, #128	; 0x80
 8006b48:	d00a      	beq.n	8006b60 <UART_SetConfig+0x1f8>
 8006b4a:	2b80      	cmp	r3, #128	; 0x80
 8006b4c:	d814      	bhi.n	8006b78 <UART_SetConfig+0x210>
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d002      	beq.n	8006b58 <UART_SetConfig+0x1f0>
 8006b52:	2b40      	cmp	r3, #64	; 0x40
 8006b54:	d008      	beq.n	8006b68 <UART_SetConfig+0x200>
 8006b56:	e00f      	b.n	8006b78 <UART_SetConfig+0x210>
 8006b58:	2300      	movs	r3, #0
 8006b5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b5e:	e082      	b.n	8006c66 <UART_SetConfig+0x2fe>
 8006b60:	2302      	movs	r3, #2
 8006b62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b66:	e07e      	b.n	8006c66 <UART_SetConfig+0x2fe>
 8006b68:	2304      	movs	r3, #4
 8006b6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b6e:	e07a      	b.n	8006c66 <UART_SetConfig+0x2fe>
 8006b70:	2308      	movs	r3, #8
 8006b72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b76:	e076      	b.n	8006c66 <UART_SetConfig+0x2fe>
 8006b78:	2310      	movs	r3, #16
 8006b7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b7e:	e072      	b.n	8006c66 <UART_SetConfig+0x2fe>
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4a35      	ldr	r2, [pc, #212]	; (8006c5c <UART_SetConfig+0x2f4>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d12a      	bne.n	8006be0 <UART_SetConfig+0x278>
 8006b8a:	4b30      	ldr	r3, [pc, #192]	; (8006c4c <UART_SetConfig+0x2e4>)
 8006b8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b94:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b98:	d01a      	beq.n	8006bd0 <UART_SetConfig+0x268>
 8006b9a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b9e:	d81b      	bhi.n	8006bd8 <UART_SetConfig+0x270>
 8006ba0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ba4:	d00c      	beq.n	8006bc0 <UART_SetConfig+0x258>
 8006ba6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006baa:	d815      	bhi.n	8006bd8 <UART_SetConfig+0x270>
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d003      	beq.n	8006bb8 <UART_SetConfig+0x250>
 8006bb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bb4:	d008      	beq.n	8006bc8 <UART_SetConfig+0x260>
 8006bb6:	e00f      	b.n	8006bd8 <UART_SetConfig+0x270>
 8006bb8:	2300      	movs	r3, #0
 8006bba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006bbe:	e052      	b.n	8006c66 <UART_SetConfig+0x2fe>
 8006bc0:	2302      	movs	r3, #2
 8006bc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006bc6:	e04e      	b.n	8006c66 <UART_SetConfig+0x2fe>
 8006bc8:	2304      	movs	r3, #4
 8006bca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006bce:	e04a      	b.n	8006c66 <UART_SetConfig+0x2fe>
 8006bd0:	2308      	movs	r3, #8
 8006bd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006bd6:	e046      	b.n	8006c66 <UART_SetConfig+0x2fe>
 8006bd8:	2310      	movs	r3, #16
 8006bda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006bde:	e042      	b.n	8006c66 <UART_SetConfig+0x2fe>
 8006be0:	697b      	ldr	r3, [r7, #20]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a17      	ldr	r2, [pc, #92]	; (8006c44 <UART_SetConfig+0x2dc>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d13a      	bne.n	8006c60 <UART_SetConfig+0x2f8>
 8006bea:	4b18      	ldr	r3, [pc, #96]	; (8006c4c <UART_SetConfig+0x2e4>)
 8006bec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bf0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006bf4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006bf8:	d01a      	beq.n	8006c30 <UART_SetConfig+0x2c8>
 8006bfa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006bfe:	d81b      	bhi.n	8006c38 <UART_SetConfig+0x2d0>
 8006c00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c04:	d00c      	beq.n	8006c20 <UART_SetConfig+0x2b8>
 8006c06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c0a:	d815      	bhi.n	8006c38 <UART_SetConfig+0x2d0>
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d003      	beq.n	8006c18 <UART_SetConfig+0x2b0>
 8006c10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c14:	d008      	beq.n	8006c28 <UART_SetConfig+0x2c0>
 8006c16:	e00f      	b.n	8006c38 <UART_SetConfig+0x2d0>
 8006c18:	2300      	movs	r3, #0
 8006c1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c1e:	e022      	b.n	8006c66 <UART_SetConfig+0x2fe>
 8006c20:	2302      	movs	r3, #2
 8006c22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c26:	e01e      	b.n	8006c66 <UART_SetConfig+0x2fe>
 8006c28:	2304      	movs	r3, #4
 8006c2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c2e:	e01a      	b.n	8006c66 <UART_SetConfig+0x2fe>
 8006c30:	2308      	movs	r3, #8
 8006c32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c36:	e016      	b.n	8006c66 <UART_SetConfig+0x2fe>
 8006c38:	2310      	movs	r3, #16
 8006c3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c3e:	e012      	b.n	8006c66 <UART_SetConfig+0x2fe>
 8006c40:	cfff69f3 	.word	0xcfff69f3
 8006c44:	40008000 	.word	0x40008000
 8006c48:	40013800 	.word	0x40013800
 8006c4c:	40021000 	.word	0x40021000
 8006c50:	40004400 	.word	0x40004400
 8006c54:	40004800 	.word	0x40004800
 8006c58:	40004c00 	.word	0x40004c00
 8006c5c:	40005000 	.word	0x40005000
 8006c60:	2310      	movs	r3, #16
 8006c62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006c66:	697b      	ldr	r3, [r7, #20]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	4aae      	ldr	r2, [pc, #696]	; (8006f24 <UART_SetConfig+0x5bc>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	f040 8097 	bne.w	8006da0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006c72:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006c76:	2b08      	cmp	r3, #8
 8006c78:	d823      	bhi.n	8006cc2 <UART_SetConfig+0x35a>
 8006c7a:	a201      	add	r2, pc, #4	; (adr r2, 8006c80 <UART_SetConfig+0x318>)
 8006c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c80:	08006ca5 	.word	0x08006ca5
 8006c84:	08006cc3 	.word	0x08006cc3
 8006c88:	08006cad 	.word	0x08006cad
 8006c8c:	08006cc3 	.word	0x08006cc3
 8006c90:	08006cb3 	.word	0x08006cb3
 8006c94:	08006cc3 	.word	0x08006cc3
 8006c98:	08006cc3 	.word	0x08006cc3
 8006c9c:	08006cc3 	.word	0x08006cc3
 8006ca0:	08006cbb 	.word	0x08006cbb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ca4:	f7fd fe86 	bl	80049b4 <HAL_RCC_GetPCLK1Freq>
 8006ca8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006caa:	e010      	b.n	8006cce <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006cac:	4b9e      	ldr	r3, [pc, #632]	; (8006f28 <UART_SetConfig+0x5c0>)
 8006cae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006cb0:	e00d      	b.n	8006cce <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006cb2:	f7fd fe11 	bl	80048d8 <HAL_RCC_GetSysClockFreq>
 8006cb6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006cb8:	e009      	b.n	8006cce <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006cba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006cbe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006cc0:	e005      	b.n	8006cce <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006ccc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	f000 8130 	beq.w	8006f36 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006cd6:	697b      	ldr	r3, [r7, #20]
 8006cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cda:	4a94      	ldr	r2, [pc, #592]	; (8006f2c <UART_SetConfig+0x5c4>)
 8006cdc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006ce0:	461a      	mov	r2, r3
 8006ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce4:	fbb3 f3f2 	udiv	r3, r3, r2
 8006ce8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006cea:	697b      	ldr	r3, [r7, #20]
 8006cec:	685a      	ldr	r2, [r3, #4]
 8006cee:	4613      	mov	r3, r2
 8006cf0:	005b      	lsls	r3, r3, #1
 8006cf2:	4413      	add	r3, r2
 8006cf4:	69ba      	ldr	r2, [r7, #24]
 8006cf6:	429a      	cmp	r2, r3
 8006cf8:	d305      	bcc.n	8006d06 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	685b      	ldr	r3, [r3, #4]
 8006cfe:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006d00:	69ba      	ldr	r2, [r7, #24]
 8006d02:	429a      	cmp	r2, r3
 8006d04:	d903      	bls.n	8006d0e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006d06:	2301      	movs	r3, #1
 8006d08:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006d0c:	e113      	b.n	8006f36 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d10:	2200      	movs	r2, #0
 8006d12:	60bb      	str	r3, [r7, #8]
 8006d14:	60fa      	str	r2, [r7, #12]
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d1a:	4a84      	ldr	r2, [pc, #528]	; (8006f2c <UART_SetConfig+0x5c4>)
 8006d1c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d20:	b29b      	uxth	r3, r3
 8006d22:	2200      	movs	r2, #0
 8006d24:	603b      	str	r3, [r7, #0]
 8006d26:	607a      	str	r2, [r7, #4]
 8006d28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d2c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006d30:	f7f9 ff72 	bl	8000c18 <__aeabi_uldivmod>
 8006d34:	4602      	mov	r2, r0
 8006d36:	460b      	mov	r3, r1
 8006d38:	4610      	mov	r0, r2
 8006d3a:	4619      	mov	r1, r3
 8006d3c:	f04f 0200 	mov.w	r2, #0
 8006d40:	f04f 0300 	mov.w	r3, #0
 8006d44:	020b      	lsls	r3, r1, #8
 8006d46:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006d4a:	0202      	lsls	r2, r0, #8
 8006d4c:	6979      	ldr	r1, [r7, #20]
 8006d4e:	6849      	ldr	r1, [r1, #4]
 8006d50:	0849      	lsrs	r1, r1, #1
 8006d52:	2000      	movs	r0, #0
 8006d54:	460c      	mov	r4, r1
 8006d56:	4605      	mov	r5, r0
 8006d58:	eb12 0804 	adds.w	r8, r2, r4
 8006d5c:	eb43 0905 	adc.w	r9, r3, r5
 8006d60:	697b      	ldr	r3, [r7, #20]
 8006d62:	685b      	ldr	r3, [r3, #4]
 8006d64:	2200      	movs	r2, #0
 8006d66:	469a      	mov	sl, r3
 8006d68:	4693      	mov	fp, r2
 8006d6a:	4652      	mov	r2, sl
 8006d6c:	465b      	mov	r3, fp
 8006d6e:	4640      	mov	r0, r8
 8006d70:	4649      	mov	r1, r9
 8006d72:	f7f9 ff51 	bl	8000c18 <__aeabi_uldivmod>
 8006d76:	4602      	mov	r2, r0
 8006d78:	460b      	mov	r3, r1
 8006d7a:	4613      	mov	r3, r2
 8006d7c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006d7e:	6a3b      	ldr	r3, [r7, #32]
 8006d80:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d84:	d308      	bcc.n	8006d98 <UART_SetConfig+0x430>
 8006d86:	6a3b      	ldr	r3, [r7, #32]
 8006d88:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d8c:	d204      	bcs.n	8006d98 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	6a3a      	ldr	r2, [r7, #32]
 8006d94:	60da      	str	r2, [r3, #12]
 8006d96:	e0ce      	b.n	8006f36 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006d98:	2301      	movs	r3, #1
 8006d9a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006d9e:	e0ca      	b.n	8006f36 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006da0:	697b      	ldr	r3, [r7, #20]
 8006da2:	69db      	ldr	r3, [r3, #28]
 8006da4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006da8:	d166      	bne.n	8006e78 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006daa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006dae:	2b08      	cmp	r3, #8
 8006db0:	d827      	bhi.n	8006e02 <UART_SetConfig+0x49a>
 8006db2:	a201      	add	r2, pc, #4	; (adr r2, 8006db8 <UART_SetConfig+0x450>)
 8006db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006db8:	08006ddd 	.word	0x08006ddd
 8006dbc:	08006de5 	.word	0x08006de5
 8006dc0:	08006ded 	.word	0x08006ded
 8006dc4:	08006e03 	.word	0x08006e03
 8006dc8:	08006df3 	.word	0x08006df3
 8006dcc:	08006e03 	.word	0x08006e03
 8006dd0:	08006e03 	.word	0x08006e03
 8006dd4:	08006e03 	.word	0x08006e03
 8006dd8:	08006dfb 	.word	0x08006dfb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ddc:	f7fd fdea 	bl	80049b4 <HAL_RCC_GetPCLK1Freq>
 8006de0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006de2:	e014      	b.n	8006e0e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006de4:	f7fd fdfc 	bl	80049e0 <HAL_RCC_GetPCLK2Freq>
 8006de8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006dea:	e010      	b.n	8006e0e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006dec:	4b4e      	ldr	r3, [pc, #312]	; (8006f28 <UART_SetConfig+0x5c0>)
 8006dee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006df0:	e00d      	b.n	8006e0e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006df2:	f7fd fd71 	bl	80048d8 <HAL_RCC_GetSysClockFreq>
 8006df6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006df8:	e009      	b.n	8006e0e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006dfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006dfe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006e00:	e005      	b.n	8006e0e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006e02:	2300      	movs	r3, #0
 8006e04:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006e06:	2301      	movs	r3, #1
 8006e08:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006e0c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	f000 8090 	beq.w	8006f36 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e16:	697b      	ldr	r3, [r7, #20]
 8006e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e1a:	4a44      	ldr	r2, [pc, #272]	; (8006f2c <UART_SetConfig+0x5c4>)
 8006e1c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e20:	461a      	mov	r2, r3
 8006e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e24:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e28:	005a      	lsls	r2, r3, #1
 8006e2a:	697b      	ldr	r3, [r7, #20]
 8006e2c:	685b      	ldr	r3, [r3, #4]
 8006e2e:	085b      	lsrs	r3, r3, #1
 8006e30:	441a      	add	r2, r3
 8006e32:	697b      	ldr	r3, [r7, #20]
 8006e34:	685b      	ldr	r3, [r3, #4]
 8006e36:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e3a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e3c:	6a3b      	ldr	r3, [r7, #32]
 8006e3e:	2b0f      	cmp	r3, #15
 8006e40:	d916      	bls.n	8006e70 <UART_SetConfig+0x508>
 8006e42:	6a3b      	ldr	r3, [r7, #32]
 8006e44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e48:	d212      	bcs.n	8006e70 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006e4a:	6a3b      	ldr	r3, [r7, #32]
 8006e4c:	b29b      	uxth	r3, r3
 8006e4e:	f023 030f 	bic.w	r3, r3, #15
 8006e52:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006e54:	6a3b      	ldr	r3, [r7, #32]
 8006e56:	085b      	lsrs	r3, r3, #1
 8006e58:	b29b      	uxth	r3, r3
 8006e5a:	f003 0307 	and.w	r3, r3, #7
 8006e5e:	b29a      	uxth	r2, r3
 8006e60:	8bfb      	ldrh	r3, [r7, #30]
 8006e62:	4313      	orrs	r3, r2
 8006e64:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	8bfa      	ldrh	r2, [r7, #30]
 8006e6c:	60da      	str	r2, [r3, #12]
 8006e6e:	e062      	b.n	8006f36 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006e70:	2301      	movs	r3, #1
 8006e72:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006e76:	e05e      	b.n	8006f36 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006e78:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006e7c:	2b08      	cmp	r3, #8
 8006e7e:	d828      	bhi.n	8006ed2 <UART_SetConfig+0x56a>
 8006e80:	a201      	add	r2, pc, #4	; (adr r2, 8006e88 <UART_SetConfig+0x520>)
 8006e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e86:	bf00      	nop
 8006e88:	08006ead 	.word	0x08006ead
 8006e8c:	08006eb5 	.word	0x08006eb5
 8006e90:	08006ebd 	.word	0x08006ebd
 8006e94:	08006ed3 	.word	0x08006ed3
 8006e98:	08006ec3 	.word	0x08006ec3
 8006e9c:	08006ed3 	.word	0x08006ed3
 8006ea0:	08006ed3 	.word	0x08006ed3
 8006ea4:	08006ed3 	.word	0x08006ed3
 8006ea8:	08006ecb 	.word	0x08006ecb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006eac:	f7fd fd82 	bl	80049b4 <HAL_RCC_GetPCLK1Freq>
 8006eb0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006eb2:	e014      	b.n	8006ede <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006eb4:	f7fd fd94 	bl	80049e0 <HAL_RCC_GetPCLK2Freq>
 8006eb8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006eba:	e010      	b.n	8006ede <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ebc:	4b1a      	ldr	r3, [pc, #104]	; (8006f28 <UART_SetConfig+0x5c0>)
 8006ebe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006ec0:	e00d      	b.n	8006ede <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ec2:	f7fd fd09 	bl	80048d8 <HAL_RCC_GetSysClockFreq>
 8006ec6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006ec8:	e009      	b.n	8006ede <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006eca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ece:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006ed0:	e005      	b.n	8006ede <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006edc:	bf00      	nop
    }

    if (pclk != 0U)
 8006ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d028      	beq.n	8006f36 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ee4:	697b      	ldr	r3, [r7, #20]
 8006ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ee8:	4a10      	ldr	r2, [pc, #64]	; (8006f2c <UART_SetConfig+0x5c4>)
 8006eea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006eee:	461a      	mov	r2, r3
 8006ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef2:	fbb3 f2f2 	udiv	r2, r3, r2
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	685b      	ldr	r3, [r3, #4]
 8006efa:	085b      	lsrs	r3, r3, #1
 8006efc:	441a      	add	r2, r3
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	685b      	ldr	r3, [r3, #4]
 8006f02:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f06:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f08:	6a3b      	ldr	r3, [r7, #32]
 8006f0a:	2b0f      	cmp	r3, #15
 8006f0c:	d910      	bls.n	8006f30 <UART_SetConfig+0x5c8>
 8006f0e:	6a3b      	ldr	r3, [r7, #32]
 8006f10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f14:	d20c      	bcs.n	8006f30 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006f16:	6a3b      	ldr	r3, [r7, #32]
 8006f18:	b29a      	uxth	r2, r3
 8006f1a:	697b      	ldr	r3, [r7, #20]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	60da      	str	r2, [r3, #12]
 8006f20:	e009      	b.n	8006f36 <UART_SetConfig+0x5ce>
 8006f22:	bf00      	nop
 8006f24:	40008000 	.word	0x40008000
 8006f28:	00f42400 	.word	0x00f42400
 8006f2c:	0800b264 	.word	0x0800b264
      }
      else
      {
        ret = HAL_ERROR;
 8006f30:	2301      	movs	r3, #1
 8006f32:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	2201      	movs	r2, #1
 8006f3a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006f3e:	697b      	ldr	r3, [r7, #20]
 8006f40:	2201      	movs	r2, #1
 8006f42:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006f4c:	697b      	ldr	r3, [r7, #20]
 8006f4e:	2200      	movs	r2, #0
 8006f50:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006f52:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8006f56:	4618      	mov	r0, r3
 8006f58:	3730      	adds	r7, #48	; 0x30
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006f60 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006f60:	b480      	push	{r7}
 8006f62:	b083      	sub	sp, #12
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f6c:	f003 0301 	and.w	r3, r3, #1
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d00a      	beq.n	8006f8a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	685b      	ldr	r3, [r3, #4]
 8006f7a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	430a      	orrs	r2, r1
 8006f88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f8e:	f003 0302 	and.w	r3, r3, #2
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d00a      	beq.n	8006fac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	685b      	ldr	r3, [r3, #4]
 8006f9c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	430a      	orrs	r2, r1
 8006faa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fb0:	f003 0304 	and.w	r3, r3, #4
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d00a      	beq.n	8006fce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	685b      	ldr	r3, [r3, #4]
 8006fbe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	430a      	orrs	r2, r1
 8006fcc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fd2:	f003 0308 	and.w	r3, r3, #8
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d00a      	beq.n	8006ff0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	685b      	ldr	r3, [r3, #4]
 8006fe0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	430a      	orrs	r2, r1
 8006fee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ff4:	f003 0310 	and.w	r3, r3, #16
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d00a      	beq.n	8007012 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	689b      	ldr	r3, [r3, #8]
 8007002:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	430a      	orrs	r2, r1
 8007010:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007016:	f003 0320 	and.w	r3, r3, #32
 800701a:	2b00      	cmp	r3, #0
 800701c:	d00a      	beq.n	8007034 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	689b      	ldr	r3, [r3, #8]
 8007024:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	430a      	orrs	r2, r1
 8007032:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007038:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800703c:	2b00      	cmp	r3, #0
 800703e:	d01a      	beq.n	8007076 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	685b      	ldr	r3, [r3, #4]
 8007046:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	430a      	orrs	r2, r1
 8007054:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800705a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800705e:	d10a      	bne.n	8007076 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	685b      	ldr	r3, [r3, #4]
 8007066:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	430a      	orrs	r2, r1
 8007074:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800707a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800707e:	2b00      	cmp	r3, #0
 8007080:	d00a      	beq.n	8007098 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	685b      	ldr	r3, [r3, #4]
 8007088:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	430a      	orrs	r2, r1
 8007096:	605a      	str	r2, [r3, #4]
  }
}
 8007098:	bf00      	nop
 800709a:	370c      	adds	r7, #12
 800709c:	46bd      	mov	sp, r7
 800709e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a2:	4770      	bx	lr

080070a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b086      	sub	sp, #24
 80070a8:	af02      	add	r7, sp, #8
 80070aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2200      	movs	r2, #0
 80070b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80070b4:	f7fa fe7e 	bl	8001db4 <HAL_GetTick>
 80070b8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f003 0308 	and.w	r3, r3, #8
 80070c4:	2b08      	cmp	r3, #8
 80070c6:	d10e      	bne.n	80070e6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80070c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80070cc:	9300      	str	r3, [sp, #0]
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	2200      	movs	r2, #0
 80070d2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f000 f82f 	bl	800713a <UART_WaitOnFlagUntilTimeout>
 80070dc:	4603      	mov	r3, r0
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d001      	beq.n	80070e6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80070e2:	2303      	movs	r3, #3
 80070e4:	e025      	b.n	8007132 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f003 0304 	and.w	r3, r3, #4
 80070f0:	2b04      	cmp	r3, #4
 80070f2:	d10e      	bne.n	8007112 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80070f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80070f8:	9300      	str	r3, [sp, #0]
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	2200      	movs	r2, #0
 80070fe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f000 f819 	bl	800713a <UART_WaitOnFlagUntilTimeout>
 8007108:	4603      	mov	r3, r0
 800710a:	2b00      	cmp	r3, #0
 800710c:	d001      	beq.n	8007112 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800710e:	2303      	movs	r3, #3
 8007110:	e00f      	b.n	8007132 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2220      	movs	r2, #32
 8007116:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2220      	movs	r2, #32
 800711e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2200      	movs	r2, #0
 8007126:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2200      	movs	r2, #0
 800712c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007130:	2300      	movs	r3, #0
}
 8007132:	4618      	mov	r0, r3
 8007134:	3710      	adds	r7, #16
 8007136:	46bd      	mov	sp, r7
 8007138:	bd80      	pop	{r7, pc}

0800713a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800713a:	b580      	push	{r7, lr}
 800713c:	b09c      	sub	sp, #112	; 0x70
 800713e:	af00      	add	r7, sp, #0
 8007140:	60f8      	str	r0, [r7, #12]
 8007142:	60b9      	str	r1, [r7, #8]
 8007144:	603b      	str	r3, [r7, #0]
 8007146:	4613      	mov	r3, r2
 8007148:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800714a:	e0a9      	b.n	80072a0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800714c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800714e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007152:	f000 80a5 	beq.w	80072a0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007156:	f7fa fe2d 	bl	8001db4 <HAL_GetTick>
 800715a:	4602      	mov	r2, r0
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	1ad3      	subs	r3, r2, r3
 8007160:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007162:	429a      	cmp	r2, r3
 8007164:	d302      	bcc.n	800716c <UART_WaitOnFlagUntilTimeout+0x32>
 8007166:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007168:	2b00      	cmp	r3, #0
 800716a:	d140      	bne.n	80071ee <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007172:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007174:	e853 3f00 	ldrex	r3, [r3]
 8007178:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800717a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800717c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007180:	667b      	str	r3, [r7, #100]	; 0x64
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	461a      	mov	r2, r3
 8007188:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800718a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800718c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800718e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007190:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007192:	e841 2300 	strex	r3, r2, [r1]
 8007196:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007198:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800719a:	2b00      	cmp	r3, #0
 800719c:	d1e6      	bne.n	800716c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	3308      	adds	r3, #8
 80071a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071a8:	e853 3f00 	ldrex	r3, [r3]
 80071ac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80071ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071b0:	f023 0301 	bic.w	r3, r3, #1
 80071b4:	663b      	str	r3, [r7, #96]	; 0x60
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	3308      	adds	r3, #8
 80071bc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80071be:	64ba      	str	r2, [r7, #72]	; 0x48
 80071c0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071c2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80071c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80071c6:	e841 2300 	strex	r3, r2, [r1]
 80071ca:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80071cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d1e5      	bne.n	800719e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	2220      	movs	r2, #32
 80071d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	2220      	movs	r2, #32
 80071de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	2200      	movs	r2, #0
 80071e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80071ea:	2303      	movs	r3, #3
 80071ec:	e069      	b.n	80072c2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f003 0304 	and.w	r3, r3, #4
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d051      	beq.n	80072a0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	69db      	ldr	r3, [r3, #28]
 8007202:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007206:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800720a:	d149      	bne.n	80072a0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007214:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800721c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800721e:	e853 3f00 	ldrex	r3, [r3]
 8007222:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007226:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800722a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	461a      	mov	r2, r3
 8007232:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007234:	637b      	str	r3, [r7, #52]	; 0x34
 8007236:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007238:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800723a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800723c:	e841 2300 	strex	r3, r2, [r1]
 8007240:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007244:	2b00      	cmp	r3, #0
 8007246:	d1e6      	bne.n	8007216 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	3308      	adds	r3, #8
 800724e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007250:	697b      	ldr	r3, [r7, #20]
 8007252:	e853 3f00 	ldrex	r3, [r3]
 8007256:	613b      	str	r3, [r7, #16]
   return(result);
 8007258:	693b      	ldr	r3, [r7, #16]
 800725a:	f023 0301 	bic.w	r3, r3, #1
 800725e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	3308      	adds	r3, #8
 8007266:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007268:	623a      	str	r2, [r7, #32]
 800726a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800726c:	69f9      	ldr	r1, [r7, #28]
 800726e:	6a3a      	ldr	r2, [r7, #32]
 8007270:	e841 2300 	strex	r3, r2, [r1]
 8007274:	61bb      	str	r3, [r7, #24]
   return(result);
 8007276:	69bb      	ldr	r3, [r7, #24]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d1e5      	bne.n	8007248 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	2220      	movs	r2, #32
 8007280:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	2220      	movs	r2, #32
 8007288:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	2220      	movs	r2, #32
 8007290:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	2200      	movs	r2, #0
 8007298:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800729c:	2303      	movs	r3, #3
 800729e:	e010      	b.n	80072c2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	69da      	ldr	r2, [r3, #28]
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	4013      	ands	r3, r2
 80072aa:	68ba      	ldr	r2, [r7, #8]
 80072ac:	429a      	cmp	r2, r3
 80072ae:	bf0c      	ite	eq
 80072b0:	2301      	moveq	r3, #1
 80072b2:	2300      	movne	r3, #0
 80072b4:	b2db      	uxtb	r3, r3
 80072b6:	461a      	mov	r2, r3
 80072b8:	79fb      	ldrb	r3, [r7, #7]
 80072ba:	429a      	cmp	r2, r3
 80072bc:	f43f af46 	beq.w	800714c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80072c0:	2300      	movs	r3, #0
}
 80072c2:	4618      	mov	r0, r3
 80072c4:	3770      	adds	r7, #112	; 0x70
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bd80      	pop	{r7, pc}
	...

080072cc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80072cc:	b480      	push	{r7}
 80072ce:	b0a3      	sub	sp, #140	; 0x8c
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	60f8      	str	r0, [r7, #12]
 80072d4:	60b9      	str	r1, [r7, #8]
 80072d6:	4613      	mov	r3, r2
 80072d8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	68ba      	ldr	r2, [r7, #8]
 80072de:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	88fa      	ldrh	r2, [r7, #6]
 80072e4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	88fa      	ldrh	r2, [r7, #6]
 80072ec:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	2200      	movs	r2, #0
 80072f4:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	689b      	ldr	r3, [r3, #8]
 80072fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072fe:	d10e      	bne.n	800731e <UART_Start_Receive_IT+0x52>
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	691b      	ldr	r3, [r3, #16]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d105      	bne.n	8007314 <UART_Start_Receive_IT+0x48>
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800730e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007312:	e02d      	b.n	8007370 <UART_Start_Receive_IT+0xa4>
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	22ff      	movs	r2, #255	; 0xff
 8007318:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800731c:	e028      	b.n	8007370 <UART_Start_Receive_IT+0xa4>
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	689b      	ldr	r3, [r3, #8]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d10d      	bne.n	8007342 <UART_Start_Receive_IT+0x76>
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	691b      	ldr	r3, [r3, #16]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d104      	bne.n	8007338 <UART_Start_Receive_IT+0x6c>
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	22ff      	movs	r2, #255	; 0xff
 8007332:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007336:	e01b      	b.n	8007370 <UART_Start_Receive_IT+0xa4>
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	227f      	movs	r2, #127	; 0x7f
 800733c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007340:	e016      	b.n	8007370 <UART_Start_Receive_IT+0xa4>
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	689b      	ldr	r3, [r3, #8]
 8007346:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800734a:	d10d      	bne.n	8007368 <UART_Start_Receive_IT+0x9c>
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	691b      	ldr	r3, [r3, #16]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d104      	bne.n	800735e <UART_Start_Receive_IT+0x92>
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	227f      	movs	r2, #127	; 0x7f
 8007358:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800735c:	e008      	b.n	8007370 <UART_Start_Receive_IT+0xa4>
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	223f      	movs	r2, #63	; 0x3f
 8007362:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007366:	e003      	b.n	8007370 <UART_Start_Receive_IT+0xa4>
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	2200      	movs	r2, #0
 800736c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	2200      	movs	r2, #0
 8007374:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	2222      	movs	r2, #34	; 0x22
 800737c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	3308      	adds	r3, #8
 8007386:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007388:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800738a:	e853 3f00 	ldrex	r3, [r3]
 800738e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007390:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007392:	f043 0301 	orr.w	r3, r3, #1
 8007396:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	3308      	adds	r3, #8
 80073a0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80073a4:	673a      	str	r2, [r7, #112]	; 0x70
 80073a6:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073a8:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80073aa:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80073ac:	e841 2300 	strex	r3, r2, [r1]
 80073b0:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80073b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d1e3      	bne.n	8007380 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80073bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80073c0:	d153      	bne.n	800746a <UART_Start_Receive_IT+0x19e>
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80073c8:	88fa      	ldrh	r2, [r7, #6]
 80073ca:	429a      	cmp	r2, r3
 80073cc:	d34d      	bcc.n	800746a <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	689b      	ldr	r3, [r3, #8]
 80073d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073d6:	d107      	bne.n	80073e8 <UART_Start_Receive_IT+0x11c>
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	691b      	ldr	r3, [r3, #16]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d103      	bne.n	80073e8 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	4a4b      	ldr	r2, [pc, #300]	; (8007510 <UART_Start_Receive_IT+0x244>)
 80073e4:	671a      	str	r2, [r3, #112]	; 0x70
 80073e6:	e002      	b.n	80073ee <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	4a4a      	ldr	r2, [pc, #296]	; (8007514 <UART_Start_Receive_IT+0x248>)
 80073ec:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	2200      	movs	r2, #0
 80073f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	691b      	ldr	r3, [r3, #16]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d01a      	beq.n	8007434 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007404:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007406:	e853 3f00 	ldrex	r3, [r3]
 800740a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800740c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800740e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007412:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	461a      	mov	r2, r3
 800741c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007420:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007422:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007424:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007426:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007428:	e841 2300 	strex	r3, r2, [r1]
 800742c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800742e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007430:	2b00      	cmp	r3, #0
 8007432:	d1e4      	bne.n	80073fe <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	3308      	adds	r3, #8
 800743a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800743c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800743e:	e853 3f00 	ldrex	r3, [r3]
 8007442:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007446:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800744a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	3308      	adds	r3, #8
 8007452:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007454:	64ba      	str	r2, [r7, #72]	; 0x48
 8007456:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007458:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800745a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800745c:	e841 2300 	strex	r3, r2, [r1]
 8007460:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007462:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007464:	2b00      	cmp	r3, #0
 8007466:	d1e5      	bne.n	8007434 <UART_Start_Receive_IT+0x168>
 8007468:	e04a      	b.n	8007500 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	689b      	ldr	r3, [r3, #8]
 800746e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007472:	d107      	bne.n	8007484 <UART_Start_Receive_IT+0x1b8>
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	691b      	ldr	r3, [r3, #16]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d103      	bne.n	8007484 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	4a26      	ldr	r2, [pc, #152]	; (8007518 <UART_Start_Receive_IT+0x24c>)
 8007480:	671a      	str	r2, [r3, #112]	; 0x70
 8007482:	e002      	b.n	800748a <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	4a25      	ldr	r2, [pc, #148]	; (800751c <UART_Start_Receive_IT+0x250>)
 8007488:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	2200      	movs	r2, #0
 800748e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	691b      	ldr	r3, [r3, #16]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d019      	beq.n	80074ce <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074a2:	e853 3f00 	ldrex	r3, [r3]
 80074a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80074a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074aa:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80074ae:	677b      	str	r3, [r7, #116]	; 0x74
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	461a      	mov	r2, r3
 80074b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80074b8:	637b      	str	r3, [r7, #52]	; 0x34
 80074ba:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80074be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80074c0:	e841 2300 	strex	r3, r2, [r1]
 80074c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80074c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d1e6      	bne.n	800749a <UART_Start_Receive_IT+0x1ce>
 80074cc:	e018      	b.n	8007500 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074d4:	697b      	ldr	r3, [r7, #20]
 80074d6:	e853 3f00 	ldrex	r3, [r3]
 80074da:	613b      	str	r3, [r7, #16]
   return(result);
 80074dc:	693b      	ldr	r3, [r7, #16]
 80074de:	f043 0320 	orr.w	r3, r3, #32
 80074e2:	67bb      	str	r3, [r7, #120]	; 0x78
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	461a      	mov	r2, r3
 80074ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80074ec:	623b      	str	r3, [r7, #32]
 80074ee:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074f0:	69f9      	ldr	r1, [r7, #28]
 80074f2:	6a3a      	ldr	r2, [r7, #32]
 80074f4:	e841 2300 	strex	r3, r2, [r1]
 80074f8:	61bb      	str	r3, [r7, #24]
   return(result);
 80074fa:	69bb      	ldr	r3, [r7, #24]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d1e6      	bne.n	80074ce <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8007500:	2300      	movs	r3, #0
}
 8007502:	4618      	mov	r0, r3
 8007504:	378c      	adds	r7, #140	; 0x8c
 8007506:	46bd      	mov	sp, r7
 8007508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750c:	4770      	bx	lr
 800750e:	bf00      	nop
 8007510:	08007c29 	.word	0x08007c29
 8007514:	08007931 	.word	0x08007931
 8007518:	080077cf 	.word	0x080077cf
 800751c:	0800766f 	.word	0x0800766f

08007520 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007520:	b480      	push	{r7}
 8007522:	b095      	sub	sp, #84	; 0x54
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800752e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007530:	e853 3f00 	ldrex	r3, [r3]
 8007534:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007538:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800753c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	461a      	mov	r2, r3
 8007544:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007546:	643b      	str	r3, [r7, #64]	; 0x40
 8007548:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800754a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800754c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800754e:	e841 2300 	strex	r3, r2, [r1]
 8007552:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007556:	2b00      	cmp	r3, #0
 8007558:	d1e6      	bne.n	8007528 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	3308      	adds	r3, #8
 8007560:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007562:	6a3b      	ldr	r3, [r7, #32]
 8007564:	e853 3f00 	ldrex	r3, [r3]
 8007568:	61fb      	str	r3, [r7, #28]
   return(result);
 800756a:	69fb      	ldr	r3, [r7, #28]
 800756c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007570:	f023 0301 	bic.w	r3, r3, #1
 8007574:	64bb      	str	r3, [r7, #72]	; 0x48
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	3308      	adds	r3, #8
 800757c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800757e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007580:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007582:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007584:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007586:	e841 2300 	strex	r3, r2, [r1]
 800758a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800758c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800758e:	2b00      	cmp	r3, #0
 8007590:	d1e3      	bne.n	800755a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007596:	2b01      	cmp	r3, #1
 8007598:	d118      	bne.n	80075cc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	e853 3f00 	ldrex	r3, [r3]
 80075a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	f023 0310 	bic.w	r3, r3, #16
 80075ae:	647b      	str	r3, [r7, #68]	; 0x44
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	461a      	mov	r2, r3
 80075b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80075b8:	61bb      	str	r3, [r7, #24]
 80075ba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075bc:	6979      	ldr	r1, [r7, #20]
 80075be:	69ba      	ldr	r2, [r7, #24]
 80075c0:	e841 2300 	strex	r3, r2, [r1]
 80075c4:	613b      	str	r3, [r7, #16]
   return(result);
 80075c6:	693b      	ldr	r3, [r7, #16]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d1e6      	bne.n	800759a <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2220      	movs	r2, #32
 80075d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2200      	movs	r2, #0
 80075d8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2200      	movs	r2, #0
 80075de:	671a      	str	r2, [r3, #112]	; 0x70
}
 80075e0:	bf00      	nop
 80075e2:	3754      	adds	r7, #84	; 0x54
 80075e4:	46bd      	mov	sp, r7
 80075e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ea:	4770      	bx	lr

080075ec <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b084      	sub	sp, #16
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075f8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	2200      	movs	r2, #0
 80075fe:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	2200      	movs	r2, #0
 8007606:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800760a:	68f8      	ldr	r0, [r7, #12]
 800760c:	f7ff f996 	bl	800693c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007610:	bf00      	nop
 8007612:	3710      	adds	r7, #16
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}

08007618 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b088      	sub	sp, #32
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	e853 3f00 	ldrex	r3, [r3]
 800762c:	60bb      	str	r3, [r7, #8]
   return(result);
 800762e:	68bb      	ldr	r3, [r7, #8]
 8007630:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007634:	61fb      	str	r3, [r7, #28]
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	461a      	mov	r2, r3
 800763c:	69fb      	ldr	r3, [r7, #28]
 800763e:	61bb      	str	r3, [r7, #24]
 8007640:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007642:	6979      	ldr	r1, [r7, #20]
 8007644:	69ba      	ldr	r2, [r7, #24]
 8007646:	e841 2300 	strex	r3, r2, [r1]
 800764a:	613b      	str	r3, [r7, #16]
   return(result);
 800764c:	693b      	ldr	r3, [r7, #16]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d1e6      	bne.n	8007620 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2220      	movs	r2, #32
 8007656:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2200      	movs	r2, #0
 800765e:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007660:	6878      	ldr	r0, [r7, #4]
 8007662:	f7ff f961 	bl	8006928 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007666:	bf00      	nop
 8007668:	3720      	adds	r7, #32
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}

0800766e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800766e:	b580      	push	{r7, lr}
 8007670:	b096      	sub	sp, #88	; 0x58
 8007672:	af00      	add	r7, sp, #0
 8007674:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800767c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007686:	2b22      	cmp	r3, #34	; 0x22
 8007688:	f040 8095 	bne.w	80077b6 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007692:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007696:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800769a:	b2d9      	uxtb	r1, r3
 800769c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80076a0:	b2da      	uxtb	r2, r3
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076a6:	400a      	ands	r2, r1
 80076a8:	b2d2      	uxtb	r2, r2
 80076aa:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076b0:	1c5a      	adds	r2, r3, #1
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80076bc:	b29b      	uxth	r3, r3
 80076be:	3b01      	subs	r3, #1
 80076c0:	b29a      	uxth	r2, r3
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80076ce:	b29b      	uxth	r3, r3
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d178      	bne.n	80077c6 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076dc:	e853 3f00 	ldrex	r3, [r3]
 80076e0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80076e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80076e8:	653b      	str	r3, [r7, #80]	; 0x50
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	461a      	mov	r2, r3
 80076f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076f2:	647b      	str	r3, [r7, #68]	; 0x44
 80076f4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076f6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80076f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80076fa:	e841 2300 	strex	r3, r2, [r1]
 80076fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007700:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007702:	2b00      	cmp	r3, #0
 8007704:	d1e6      	bne.n	80076d4 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	3308      	adds	r3, #8
 800770c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800770e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007710:	e853 3f00 	ldrex	r3, [r3]
 8007714:	623b      	str	r3, [r7, #32]
   return(result);
 8007716:	6a3b      	ldr	r3, [r7, #32]
 8007718:	f023 0301 	bic.w	r3, r3, #1
 800771c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	3308      	adds	r3, #8
 8007724:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007726:	633a      	str	r2, [r7, #48]	; 0x30
 8007728:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800772a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800772c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800772e:	e841 2300 	strex	r3, r2, [r1]
 8007732:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007736:	2b00      	cmp	r3, #0
 8007738:	d1e5      	bne.n	8007706 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2220      	movs	r2, #32
 800773e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2200      	movs	r2, #0
 8007746:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800774c:	2b01      	cmp	r3, #1
 800774e:	d12e      	bne.n	80077ae <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2200      	movs	r2, #0
 8007754:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800775c:	693b      	ldr	r3, [r7, #16]
 800775e:	e853 3f00 	ldrex	r3, [r3]
 8007762:	60fb      	str	r3, [r7, #12]
   return(result);
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	f023 0310 	bic.w	r3, r3, #16
 800776a:	64bb      	str	r3, [r7, #72]	; 0x48
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	461a      	mov	r2, r3
 8007772:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007774:	61fb      	str	r3, [r7, #28]
 8007776:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007778:	69b9      	ldr	r1, [r7, #24]
 800777a:	69fa      	ldr	r2, [r7, #28]
 800777c:	e841 2300 	strex	r3, r2, [r1]
 8007780:	617b      	str	r3, [r7, #20]
   return(result);
 8007782:	697b      	ldr	r3, [r7, #20]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d1e6      	bne.n	8007756 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	69db      	ldr	r3, [r3, #28]
 800778e:	f003 0310 	and.w	r3, r3, #16
 8007792:	2b10      	cmp	r3, #16
 8007794:	d103      	bne.n	800779e <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	2210      	movs	r2, #16
 800779c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80077a4:	4619      	mov	r1, r3
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	f7ff f8d2 	bl	8006950 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80077ac:	e00b      	b.n	80077c6 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f7f9 ff68 	bl	8001684 <HAL_UART_RxCpltCallback>
}
 80077b4:	e007      	b.n	80077c6 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	699a      	ldr	r2, [r3, #24]
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f042 0208 	orr.w	r2, r2, #8
 80077c4:	619a      	str	r2, [r3, #24]
}
 80077c6:	bf00      	nop
 80077c8:	3758      	adds	r7, #88	; 0x58
 80077ca:	46bd      	mov	sp, r7
 80077cc:	bd80      	pop	{r7, pc}

080077ce <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80077ce:	b580      	push	{r7, lr}
 80077d0:	b096      	sub	sp, #88	; 0x58
 80077d2:	af00      	add	r7, sp, #0
 80077d4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80077dc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077e6:	2b22      	cmp	r3, #34	; 0x22
 80077e8:	f040 8095 	bne.w	8007916 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077f2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077fa:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80077fc:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8007800:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007804:	4013      	ands	r3, r2
 8007806:	b29a      	uxth	r2, r3
 8007808:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800780a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007810:	1c9a      	adds	r2, r3, #2
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800781c:	b29b      	uxth	r3, r3
 800781e:	3b01      	subs	r3, #1
 8007820:	b29a      	uxth	r2, r3
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800782e:	b29b      	uxth	r3, r3
 8007830:	2b00      	cmp	r3, #0
 8007832:	d178      	bne.n	8007926 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800783a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800783c:	e853 3f00 	ldrex	r3, [r3]
 8007840:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007844:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007848:	64fb      	str	r3, [r7, #76]	; 0x4c
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	461a      	mov	r2, r3
 8007850:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007852:	643b      	str	r3, [r7, #64]	; 0x40
 8007854:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007856:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007858:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800785a:	e841 2300 	strex	r3, r2, [r1]
 800785e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007862:	2b00      	cmp	r3, #0
 8007864:	d1e6      	bne.n	8007834 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	3308      	adds	r3, #8
 800786c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800786e:	6a3b      	ldr	r3, [r7, #32]
 8007870:	e853 3f00 	ldrex	r3, [r3]
 8007874:	61fb      	str	r3, [r7, #28]
   return(result);
 8007876:	69fb      	ldr	r3, [r7, #28]
 8007878:	f023 0301 	bic.w	r3, r3, #1
 800787c:	64bb      	str	r3, [r7, #72]	; 0x48
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	3308      	adds	r3, #8
 8007884:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007886:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007888:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800788a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800788c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800788e:	e841 2300 	strex	r3, r2, [r1]
 8007892:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007896:	2b00      	cmp	r3, #0
 8007898:	d1e5      	bne.n	8007866 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2220      	movs	r2, #32
 800789e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2200      	movs	r2, #0
 80078a6:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078ac:	2b01      	cmp	r3, #1
 80078ae:	d12e      	bne.n	800790e <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2200      	movs	r2, #0
 80078b4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	e853 3f00 	ldrex	r3, [r3]
 80078c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	f023 0310 	bic.w	r3, r3, #16
 80078ca:	647b      	str	r3, [r7, #68]	; 0x44
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	461a      	mov	r2, r3
 80078d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80078d4:	61bb      	str	r3, [r7, #24]
 80078d6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078d8:	6979      	ldr	r1, [r7, #20]
 80078da:	69ba      	ldr	r2, [r7, #24]
 80078dc:	e841 2300 	strex	r3, r2, [r1]
 80078e0:	613b      	str	r3, [r7, #16]
   return(result);
 80078e2:	693b      	ldr	r3, [r7, #16]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d1e6      	bne.n	80078b6 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	69db      	ldr	r3, [r3, #28]
 80078ee:	f003 0310 	and.w	r3, r3, #16
 80078f2:	2b10      	cmp	r3, #16
 80078f4:	d103      	bne.n	80078fe <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	2210      	movs	r2, #16
 80078fc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007904:	4619      	mov	r1, r3
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f7ff f822 	bl	8006950 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800790c:	e00b      	b.n	8007926 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f7f9 feb8 	bl	8001684 <HAL_UART_RxCpltCallback>
}
 8007914:	e007      	b.n	8007926 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	699a      	ldr	r2, [r3, #24]
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f042 0208 	orr.w	r2, r2, #8
 8007924:	619a      	str	r2, [r3, #24]
}
 8007926:	bf00      	nop
 8007928:	3758      	adds	r7, #88	; 0x58
 800792a:	46bd      	mov	sp, r7
 800792c:	bd80      	pop	{r7, pc}
	...

08007930 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b0a6      	sub	sp, #152	; 0x98
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800793e:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	69db      	ldr	r3, [r3, #28]
 8007948:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	689b      	ldr	r3, [r3, #8]
 800795c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007966:	2b22      	cmp	r3, #34	; 0x22
 8007968:	f040 814f 	bne.w	8007c0a <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007972:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007976:	e0f6      	b.n	8007b66 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800797e:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007982:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8007986:	b2d9      	uxtb	r1, r3
 8007988:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800798c:	b2da      	uxtb	r2, r3
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007992:	400a      	ands	r2, r1
 8007994:	b2d2      	uxtb	r2, r2
 8007996:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800799c:	1c5a      	adds	r2, r3, #1
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80079a8:	b29b      	uxth	r3, r3
 80079aa:	3b01      	subs	r3, #1
 80079ac:	b29a      	uxth	r2, r3
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	69db      	ldr	r3, [r3, #28]
 80079ba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80079be:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80079c2:	f003 0307 	and.w	r3, r3, #7
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d053      	beq.n	8007a72 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80079ca:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80079ce:	f003 0301 	and.w	r3, r3, #1
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d011      	beq.n	80079fa <UART_RxISR_8BIT_FIFOEN+0xca>
 80079d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80079da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d00b      	beq.n	80079fa <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	2201      	movs	r2, #1
 80079e8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80079f0:	f043 0201 	orr.w	r2, r3, #1
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80079fa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80079fe:	f003 0302 	and.w	r3, r3, #2
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d011      	beq.n	8007a2a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8007a06:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007a0a:	f003 0301 	and.w	r3, r3, #1
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d00b      	beq.n	8007a2a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	2202      	movs	r2, #2
 8007a18:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a20:	f043 0204 	orr.w	r2, r3, #4
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007a2a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007a2e:	f003 0304 	and.w	r3, r3, #4
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d011      	beq.n	8007a5a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8007a36:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007a3a:	f003 0301 	and.w	r3, r3, #1
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d00b      	beq.n	8007a5a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	2204      	movs	r2, #4
 8007a48:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a50:	f043 0202 	orr.w	r2, r3, #2
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d006      	beq.n	8007a72 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	f7fe ff69 	bl	800693c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007a78:	b29b      	uxth	r3, r3
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d173      	bne.n	8007b66 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007a86:	e853 3f00 	ldrex	r3, [r3]
 8007a8a:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8007a8c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007a8e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a92:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	461a      	mov	r2, r3
 8007a9c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007aa0:	66bb      	str	r3, [r7, #104]	; 0x68
 8007aa2:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aa4:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8007aa6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007aa8:	e841 2300 	strex	r3, r2, [r1]
 8007aac:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007aae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d1e4      	bne.n	8007a7e <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	3308      	adds	r3, #8
 8007aba:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007abc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007abe:	e853 3f00 	ldrex	r3, [r3]
 8007ac2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007ac4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ac6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007aca:	f023 0301 	bic.w	r3, r3, #1
 8007ace:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	3308      	adds	r3, #8
 8007ad6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007ad8:	657a      	str	r2, [r7, #84]	; 0x54
 8007ada:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007adc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007ade:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007ae0:	e841 2300 	strex	r3, r2, [r1]
 8007ae4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007ae6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d1e3      	bne.n	8007ab4 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2220      	movs	r2, #32
 8007af0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2200      	movs	r2, #0
 8007af8:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007afe:	2b01      	cmp	r3, #1
 8007b00:	d12e      	bne.n	8007b60 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2200      	movs	r2, #0
 8007b06:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b10:	e853 3f00 	ldrex	r3, [r3]
 8007b14:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b18:	f023 0310 	bic.w	r3, r3, #16
 8007b1c:	67bb      	str	r3, [r7, #120]	; 0x78
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	461a      	mov	r2, r3
 8007b24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007b26:	643b      	str	r3, [r7, #64]	; 0x40
 8007b28:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b2a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007b2c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007b2e:	e841 2300 	strex	r3, r2, [r1]
 8007b32:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d1e6      	bne.n	8007b08 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	69db      	ldr	r3, [r3, #28]
 8007b40:	f003 0310 	and.w	r3, r3, #16
 8007b44:	2b10      	cmp	r3, #16
 8007b46:	d103      	bne.n	8007b50 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	2210      	movs	r2, #16
 8007b4e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007b56:	4619      	mov	r1, r3
 8007b58:	6878      	ldr	r0, [r7, #4]
 8007b5a:	f7fe fef9 	bl	8006950 <HAL_UARTEx_RxEventCallback>
 8007b5e:	e002      	b.n	8007b66 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f7f9 fd8f 	bl	8001684 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007b66:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d006      	beq.n	8007b7c <UART_RxISR_8BIT_FIFOEN+0x24c>
 8007b6e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007b72:	f003 0320 	and.w	r3, r3, #32
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	f47f aefe 	bne.w	8007978 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007b82:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007b86:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d045      	beq.n	8007c1a <UART_RxISR_8BIT_FIFOEN+0x2ea>
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007b94:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007b98:	429a      	cmp	r2, r3
 8007b9a:	d23e      	bcs.n	8007c1a <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	3308      	adds	r3, #8
 8007ba2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ba4:	6a3b      	ldr	r3, [r7, #32]
 8007ba6:	e853 3f00 	ldrex	r3, [r3]
 8007baa:	61fb      	str	r3, [r7, #28]
   return(result);
 8007bac:	69fb      	ldr	r3, [r7, #28]
 8007bae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007bb2:	673b      	str	r3, [r7, #112]	; 0x70
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	3308      	adds	r3, #8
 8007bba:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007bbc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007bbe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bc0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007bc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007bc4:	e841 2300 	strex	r3, r2, [r1]
 8007bc8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d1e5      	bne.n	8007b9c <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	4a14      	ldr	r2, [pc, #80]	; (8007c24 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8007bd4:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	e853 3f00 	ldrex	r3, [r3]
 8007be2:	60bb      	str	r3, [r7, #8]
   return(result);
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	f043 0320 	orr.w	r3, r3, #32
 8007bea:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	461a      	mov	r2, r3
 8007bf2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bf4:	61bb      	str	r3, [r7, #24]
 8007bf6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bf8:	6979      	ldr	r1, [r7, #20]
 8007bfa:	69ba      	ldr	r2, [r7, #24]
 8007bfc:	e841 2300 	strex	r3, r2, [r1]
 8007c00:	613b      	str	r3, [r7, #16]
   return(result);
 8007c02:	693b      	ldr	r3, [r7, #16]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d1e6      	bne.n	8007bd6 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007c08:	e007      	b.n	8007c1a <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	699a      	ldr	r2, [r3, #24]
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f042 0208 	orr.w	r2, r2, #8
 8007c18:	619a      	str	r2, [r3, #24]
}
 8007c1a:	bf00      	nop
 8007c1c:	3798      	adds	r7, #152	; 0x98
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}
 8007c22:	bf00      	nop
 8007c24:	0800766f 	.word	0x0800766f

08007c28 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b0a8      	sub	sp, #160	; 0xa0
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007c36:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	69db      	ldr	r3, [r3, #28]
 8007c40:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	689b      	ldr	r3, [r3, #8]
 8007c54:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c5e:	2b22      	cmp	r3, #34	; 0x22
 8007c60:	f040 8153 	bne.w	8007f0a <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007c6a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007c6e:	e0fa      	b.n	8007e66 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c76:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c7e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8007c82:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8007c86:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8007c8a:	4013      	ands	r3, r2
 8007c8c:	b29a      	uxth	r2, r3
 8007c8e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007c92:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c98:	1c9a      	adds	r2, r3, #2
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007ca4:	b29b      	uxth	r3, r3
 8007ca6:	3b01      	subs	r3, #1
 8007ca8:	b29a      	uxth	r2, r3
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	69db      	ldr	r3, [r3, #28]
 8007cb6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007cba:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007cbe:	f003 0307 	and.w	r3, r3, #7
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d053      	beq.n	8007d6e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007cc6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007cca:	f003 0301 	and.w	r3, r3, #1
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d011      	beq.n	8007cf6 <UART_RxISR_16BIT_FIFOEN+0xce>
 8007cd2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007cd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d00b      	beq.n	8007cf6 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	2201      	movs	r2, #1
 8007ce4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007cec:	f043 0201 	orr.w	r2, r3, #1
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007cf6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007cfa:	f003 0302 	and.w	r3, r3, #2
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d011      	beq.n	8007d26 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8007d02:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007d06:	f003 0301 	and.w	r3, r3, #1
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d00b      	beq.n	8007d26 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	2202      	movs	r2, #2
 8007d14:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d1c:	f043 0204 	orr.w	r2, r3, #4
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007d26:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007d2a:	f003 0304 	and.w	r3, r3, #4
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d011      	beq.n	8007d56 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8007d32:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007d36:	f003 0301 	and.w	r3, r3, #1
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d00b      	beq.n	8007d56 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	2204      	movs	r2, #4
 8007d44:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d4c:	f043 0202 	orr.w	r2, r3, #2
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d006      	beq.n	8007d6e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f7fe fdeb 	bl	800693c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2200      	movs	r2, #0
 8007d6a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007d74:	b29b      	uxth	r3, r3
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d175      	bne.n	8007e66 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d80:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007d82:	e853 3f00 	ldrex	r3, [r3]
 8007d86:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007d88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007d8a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d8e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	461a      	mov	r2, r3
 8007d98:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007d9c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007d9e:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007da0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007da2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007da4:	e841 2300 	strex	r3, r2, [r1]
 8007da8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007daa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d1e4      	bne.n	8007d7a <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	3308      	adds	r3, #8
 8007db6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007db8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007dba:	e853 3f00 	ldrex	r3, [r3]
 8007dbe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007dc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007dc2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007dc6:	f023 0301 	bic.w	r3, r3, #1
 8007dca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	3308      	adds	r3, #8
 8007dd4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007dd8:	65ba      	str	r2, [r7, #88]	; 0x58
 8007dda:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ddc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007dde:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007de0:	e841 2300 	strex	r3, r2, [r1]
 8007de4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007de6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d1e1      	bne.n	8007db0 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2220      	movs	r2, #32
 8007df0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2200      	movs	r2, #0
 8007df8:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007dfe:	2b01      	cmp	r3, #1
 8007e00:	d12e      	bne.n	8007e60 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2200      	movs	r2, #0
 8007e06:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e10:	e853 3f00 	ldrex	r3, [r3]
 8007e14:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007e16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e18:	f023 0310 	bic.w	r3, r3, #16
 8007e1c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	461a      	mov	r2, r3
 8007e24:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007e26:	647b      	str	r3, [r7, #68]	; 0x44
 8007e28:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e2a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007e2c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007e2e:	e841 2300 	strex	r3, r2, [r1]
 8007e32:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007e34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d1e6      	bne.n	8007e08 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	69db      	ldr	r3, [r3, #28]
 8007e40:	f003 0310 	and.w	r3, r3, #16
 8007e44:	2b10      	cmp	r3, #16
 8007e46:	d103      	bne.n	8007e50 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	2210      	movs	r2, #16
 8007e4e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007e56:	4619      	mov	r1, r3
 8007e58:	6878      	ldr	r0, [r7, #4]
 8007e5a:	f7fe fd79 	bl	8006950 <HAL_UARTEx_RxEventCallback>
 8007e5e:	e002      	b.n	8007e66 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007e60:	6878      	ldr	r0, [r7, #4]
 8007e62:	f7f9 fc0f 	bl	8001684 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007e66:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d006      	beq.n	8007e7c <UART_RxISR_16BIT_FIFOEN+0x254>
 8007e6e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007e72:	f003 0320 	and.w	r3, r3, #32
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	f47f aefa 	bne.w	8007c70 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007e82:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007e86:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d045      	beq.n	8007f1a <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007e94:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8007e98:	429a      	cmp	r2, r3
 8007e9a:	d23e      	bcs.n	8007f1a <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	3308      	adds	r3, #8
 8007ea2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ea6:	e853 3f00 	ldrex	r3, [r3]
 8007eaa:	623b      	str	r3, [r7, #32]
   return(result);
 8007eac:	6a3b      	ldr	r3, [r7, #32]
 8007eae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007eb2:	677b      	str	r3, [r7, #116]	; 0x74
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	3308      	adds	r3, #8
 8007eba:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007ebc:	633a      	str	r2, [r7, #48]	; 0x30
 8007ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ec0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007ec2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ec4:	e841 2300 	strex	r3, r2, [r1]
 8007ec8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d1e5      	bne.n	8007e9c <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	4a14      	ldr	r2, [pc, #80]	; (8007f24 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8007ed4:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007edc:	693b      	ldr	r3, [r7, #16]
 8007ede:	e853 3f00 	ldrex	r3, [r3]
 8007ee2:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	f043 0320 	orr.w	r3, r3, #32
 8007eea:	673b      	str	r3, [r7, #112]	; 0x70
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	461a      	mov	r2, r3
 8007ef2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007ef4:	61fb      	str	r3, [r7, #28]
 8007ef6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ef8:	69b9      	ldr	r1, [r7, #24]
 8007efa:	69fa      	ldr	r2, [r7, #28]
 8007efc:	e841 2300 	strex	r3, r2, [r1]
 8007f00:	617b      	str	r3, [r7, #20]
   return(result);
 8007f02:	697b      	ldr	r3, [r7, #20]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d1e6      	bne.n	8007ed6 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007f08:	e007      	b.n	8007f1a <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	699a      	ldr	r2, [r3, #24]
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f042 0208 	orr.w	r2, r2, #8
 8007f18:	619a      	str	r2, [r3, #24]
}
 8007f1a:	bf00      	nop
 8007f1c:	37a0      	adds	r7, #160	; 0xa0
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bd80      	pop	{r7, pc}
 8007f22:	bf00      	nop
 8007f24:	080077cf 	.word	0x080077cf

08007f28 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007f28:	b480      	push	{r7}
 8007f2a:	b083      	sub	sp, #12
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007f30:	bf00      	nop
 8007f32:	370c      	adds	r7, #12
 8007f34:	46bd      	mov	sp, r7
 8007f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3a:	4770      	bx	lr

08007f3c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	b083      	sub	sp, #12
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007f44:	bf00      	nop
 8007f46:	370c      	adds	r7, #12
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4e:	4770      	bx	lr

08007f50 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007f50:	b480      	push	{r7}
 8007f52:	b083      	sub	sp, #12
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007f58:	bf00      	nop
 8007f5a:	370c      	adds	r7, #12
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f62:	4770      	bx	lr

08007f64 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007f64:	b480      	push	{r7}
 8007f66:	b085      	sub	sp, #20
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007f72:	2b01      	cmp	r3, #1
 8007f74:	d101      	bne.n	8007f7a <HAL_UARTEx_DisableFifoMode+0x16>
 8007f76:	2302      	movs	r3, #2
 8007f78:	e027      	b.n	8007fca <HAL_UARTEx_DisableFifoMode+0x66>
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2201      	movs	r2, #1
 8007f7e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2224      	movs	r2, #36	; 0x24
 8007f86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	681a      	ldr	r2, [r3, #0]
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f022 0201 	bic.w	r2, r2, #1
 8007fa0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007fa8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2200      	movs	r2, #0
 8007fae:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	68fa      	ldr	r2, [r7, #12]
 8007fb6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2220      	movs	r2, #32
 8007fbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007fc8:	2300      	movs	r3, #0
}
 8007fca:	4618      	mov	r0, r3
 8007fcc:	3714      	adds	r7, #20
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd4:	4770      	bx	lr

08007fd6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007fd6:	b580      	push	{r7, lr}
 8007fd8:	b084      	sub	sp, #16
 8007fda:	af00      	add	r7, sp, #0
 8007fdc:	6078      	str	r0, [r7, #4]
 8007fde:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007fe6:	2b01      	cmp	r3, #1
 8007fe8:	d101      	bne.n	8007fee <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007fea:	2302      	movs	r3, #2
 8007fec:	e02d      	b.n	800804a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2201      	movs	r2, #1
 8007ff2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2224      	movs	r2, #36	; 0x24
 8007ffa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	681a      	ldr	r2, [r3, #0]
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f022 0201 	bic.w	r2, r2, #1
 8008014:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	689b      	ldr	r3, [r3, #8]
 800801c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	683a      	ldr	r2, [r7, #0]
 8008026:	430a      	orrs	r2, r1
 8008028:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	f000 f850 	bl	80080d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	68fa      	ldr	r2, [r7, #12]
 8008036:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2220      	movs	r2, #32
 800803c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2200      	movs	r2, #0
 8008044:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008048:	2300      	movs	r3, #0
}
 800804a:	4618      	mov	r0, r3
 800804c:	3710      	adds	r7, #16
 800804e:	46bd      	mov	sp, r7
 8008050:	bd80      	pop	{r7, pc}

08008052 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008052:	b580      	push	{r7, lr}
 8008054:	b084      	sub	sp, #16
 8008056:	af00      	add	r7, sp, #0
 8008058:	6078      	str	r0, [r7, #4]
 800805a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008062:	2b01      	cmp	r3, #1
 8008064:	d101      	bne.n	800806a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008066:	2302      	movs	r3, #2
 8008068:	e02d      	b.n	80080c6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2201      	movs	r2, #1
 800806e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2224      	movs	r2, #36	; 0x24
 8008076:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	681a      	ldr	r2, [r3, #0]
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f022 0201 	bic.w	r2, r2, #1
 8008090:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	689b      	ldr	r3, [r3, #8]
 8008098:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	683a      	ldr	r2, [r7, #0]
 80080a2:	430a      	orrs	r2, r1
 80080a4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80080a6:	6878      	ldr	r0, [r7, #4]
 80080a8:	f000 f812 	bl	80080d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	68fa      	ldr	r2, [r7, #12]
 80080b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2220      	movs	r2, #32
 80080b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2200      	movs	r2, #0
 80080c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80080c4:	2300      	movs	r3, #0
}
 80080c6:	4618      	mov	r0, r3
 80080c8:	3710      	adds	r7, #16
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bd80      	pop	{r7, pc}
	...

080080d0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80080d0:	b480      	push	{r7}
 80080d2:	b085      	sub	sp, #20
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d108      	bne.n	80080f2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2201      	movs	r2, #1
 80080e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2201      	movs	r2, #1
 80080ec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80080f0:	e031      	b.n	8008156 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80080f2:	2308      	movs	r3, #8
 80080f4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80080f6:	2308      	movs	r3, #8
 80080f8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	689b      	ldr	r3, [r3, #8]
 8008100:	0e5b      	lsrs	r3, r3, #25
 8008102:	b2db      	uxtb	r3, r3
 8008104:	f003 0307 	and.w	r3, r3, #7
 8008108:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	689b      	ldr	r3, [r3, #8]
 8008110:	0f5b      	lsrs	r3, r3, #29
 8008112:	b2db      	uxtb	r3, r3
 8008114:	f003 0307 	and.w	r3, r3, #7
 8008118:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800811a:	7bbb      	ldrb	r3, [r7, #14]
 800811c:	7b3a      	ldrb	r2, [r7, #12]
 800811e:	4911      	ldr	r1, [pc, #68]	; (8008164 <UARTEx_SetNbDataToProcess+0x94>)
 8008120:	5c8a      	ldrb	r2, [r1, r2]
 8008122:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008126:	7b3a      	ldrb	r2, [r7, #12]
 8008128:	490f      	ldr	r1, [pc, #60]	; (8008168 <UARTEx_SetNbDataToProcess+0x98>)
 800812a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800812c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008130:	b29a      	uxth	r2, r3
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008138:	7bfb      	ldrb	r3, [r7, #15]
 800813a:	7b7a      	ldrb	r2, [r7, #13]
 800813c:	4909      	ldr	r1, [pc, #36]	; (8008164 <UARTEx_SetNbDataToProcess+0x94>)
 800813e:	5c8a      	ldrb	r2, [r1, r2]
 8008140:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008144:	7b7a      	ldrb	r2, [r7, #13]
 8008146:	4908      	ldr	r1, [pc, #32]	; (8008168 <UARTEx_SetNbDataToProcess+0x98>)
 8008148:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800814a:	fb93 f3f2 	sdiv	r3, r3, r2
 800814e:	b29a      	uxth	r2, r3
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008156:	bf00      	nop
 8008158:	3714      	adds	r7, #20
 800815a:	46bd      	mov	sp, r7
 800815c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008160:	4770      	bx	lr
 8008162:	bf00      	nop
 8008164:	0800b27c 	.word	0x0800b27c
 8008168:	0800b284 	.word	0x0800b284

0800816c <atoi>:
 800816c:	220a      	movs	r2, #10
 800816e:	2100      	movs	r1, #0
 8008170:	f000 bdae 	b.w	8008cd0 <strtol>

08008174 <__errno>:
 8008174:	4b01      	ldr	r3, [pc, #4]	; (800817c <__errno+0x8>)
 8008176:	6818      	ldr	r0, [r3, #0]
 8008178:	4770      	bx	lr
 800817a:	bf00      	nop
 800817c:	20000128 	.word	0x20000128

08008180 <__libc_init_array>:
 8008180:	b570      	push	{r4, r5, r6, lr}
 8008182:	4d0d      	ldr	r5, [pc, #52]	; (80081b8 <__libc_init_array+0x38>)
 8008184:	4c0d      	ldr	r4, [pc, #52]	; (80081bc <__libc_init_array+0x3c>)
 8008186:	1b64      	subs	r4, r4, r5
 8008188:	10a4      	asrs	r4, r4, #2
 800818a:	2600      	movs	r6, #0
 800818c:	42a6      	cmp	r6, r4
 800818e:	d109      	bne.n	80081a4 <__libc_init_array+0x24>
 8008190:	4d0b      	ldr	r5, [pc, #44]	; (80081c0 <__libc_init_array+0x40>)
 8008192:	4c0c      	ldr	r4, [pc, #48]	; (80081c4 <__libc_init_array+0x44>)
 8008194:	f002 fffe 	bl	800b194 <_init>
 8008198:	1b64      	subs	r4, r4, r5
 800819a:	10a4      	asrs	r4, r4, #2
 800819c:	2600      	movs	r6, #0
 800819e:	42a6      	cmp	r6, r4
 80081a0:	d105      	bne.n	80081ae <__libc_init_array+0x2e>
 80081a2:	bd70      	pop	{r4, r5, r6, pc}
 80081a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80081a8:	4798      	blx	r3
 80081aa:	3601      	adds	r6, #1
 80081ac:	e7ee      	b.n	800818c <__libc_init_array+0xc>
 80081ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80081b2:	4798      	blx	r3
 80081b4:	3601      	adds	r6, #1
 80081b6:	e7f2      	b.n	800819e <__libc_init_array+0x1e>
 80081b8:	0800b6d4 	.word	0x0800b6d4
 80081bc:	0800b6d4 	.word	0x0800b6d4
 80081c0:	0800b6d4 	.word	0x0800b6d4
 80081c4:	0800b6d8 	.word	0x0800b6d8

080081c8 <memset>:
 80081c8:	4402      	add	r2, r0
 80081ca:	4603      	mov	r3, r0
 80081cc:	4293      	cmp	r3, r2
 80081ce:	d100      	bne.n	80081d2 <memset+0xa>
 80081d0:	4770      	bx	lr
 80081d2:	f803 1b01 	strb.w	r1, [r3], #1
 80081d6:	e7f9      	b.n	80081cc <memset+0x4>

080081d8 <__cvt>:
 80081d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80081dc:	ec55 4b10 	vmov	r4, r5, d0
 80081e0:	2d00      	cmp	r5, #0
 80081e2:	460e      	mov	r6, r1
 80081e4:	4619      	mov	r1, r3
 80081e6:	462b      	mov	r3, r5
 80081e8:	bfbb      	ittet	lt
 80081ea:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80081ee:	461d      	movlt	r5, r3
 80081f0:	2300      	movge	r3, #0
 80081f2:	232d      	movlt	r3, #45	; 0x2d
 80081f4:	700b      	strb	r3, [r1, #0]
 80081f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80081f8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80081fc:	4691      	mov	r9, r2
 80081fe:	f023 0820 	bic.w	r8, r3, #32
 8008202:	bfbc      	itt	lt
 8008204:	4622      	movlt	r2, r4
 8008206:	4614      	movlt	r4, r2
 8008208:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800820c:	d005      	beq.n	800821a <__cvt+0x42>
 800820e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008212:	d100      	bne.n	8008216 <__cvt+0x3e>
 8008214:	3601      	adds	r6, #1
 8008216:	2102      	movs	r1, #2
 8008218:	e000      	b.n	800821c <__cvt+0x44>
 800821a:	2103      	movs	r1, #3
 800821c:	ab03      	add	r3, sp, #12
 800821e:	9301      	str	r3, [sp, #4]
 8008220:	ab02      	add	r3, sp, #8
 8008222:	9300      	str	r3, [sp, #0]
 8008224:	ec45 4b10 	vmov	d0, r4, r5
 8008228:	4653      	mov	r3, sl
 800822a:	4632      	mov	r2, r6
 800822c:	f000 fe04 	bl	8008e38 <_dtoa_r>
 8008230:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008234:	4607      	mov	r7, r0
 8008236:	d102      	bne.n	800823e <__cvt+0x66>
 8008238:	f019 0f01 	tst.w	r9, #1
 800823c:	d022      	beq.n	8008284 <__cvt+0xac>
 800823e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008242:	eb07 0906 	add.w	r9, r7, r6
 8008246:	d110      	bne.n	800826a <__cvt+0x92>
 8008248:	783b      	ldrb	r3, [r7, #0]
 800824a:	2b30      	cmp	r3, #48	; 0x30
 800824c:	d10a      	bne.n	8008264 <__cvt+0x8c>
 800824e:	2200      	movs	r2, #0
 8008250:	2300      	movs	r3, #0
 8008252:	4620      	mov	r0, r4
 8008254:	4629      	mov	r1, r5
 8008256:	f7f8 fc6f 	bl	8000b38 <__aeabi_dcmpeq>
 800825a:	b918      	cbnz	r0, 8008264 <__cvt+0x8c>
 800825c:	f1c6 0601 	rsb	r6, r6, #1
 8008260:	f8ca 6000 	str.w	r6, [sl]
 8008264:	f8da 3000 	ldr.w	r3, [sl]
 8008268:	4499      	add	r9, r3
 800826a:	2200      	movs	r2, #0
 800826c:	2300      	movs	r3, #0
 800826e:	4620      	mov	r0, r4
 8008270:	4629      	mov	r1, r5
 8008272:	f7f8 fc61 	bl	8000b38 <__aeabi_dcmpeq>
 8008276:	b108      	cbz	r0, 800827c <__cvt+0xa4>
 8008278:	f8cd 900c 	str.w	r9, [sp, #12]
 800827c:	2230      	movs	r2, #48	; 0x30
 800827e:	9b03      	ldr	r3, [sp, #12]
 8008280:	454b      	cmp	r3, r9
 8008282:	d307      	bcc.n	8008294 <__cvt+0xbc>
 8008284:	9b03      	ldr	r3, [sp, #12]
 8008286:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008288:	1bdb      	subs	r3, r3, r7
 800828a:	4638      	mov	r0, r7
 800828c:	6013      	str	r3, [r2, #0]
 800828e:	b004      	add	sp, #16
 8008290:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008294:	1c59      	adds	r1, r3, #1
 8008296:	9103      	str	r1, [sp, #12]
 8008298:	701a      	strb	r2, [r3, #0]
 800829a:	e7f0      	b.n	800827e <__cvt+0xa6>

0800829c <__exponent>:
 800829c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800829e:	4603      	mov	r3, r0
 80082a0:	2900      	cmp	r1, #0
 80082a2:	bfb8      	it	lt
 80082a4:	4249      	neglt	r1, r1
 80082a6:	f803 2b02 	strb.w	r2, [r3], #2
 80082aa:	bfb4      	ite	lt
 80082ac:	222d      	movlt	r2, #45	; 0x2d
 80082ae:	222b      	movge	r2, #43	; 0x2b
 80082b0:	2909      	cmp	r1, #9
 80082b2:	7042      	strb	r2, [r0, #1]
 80082b4:	dd2a      	ble.n	800830c <__exponent+0x70>
 80082b6:	f10d 0407 	add.w	r4, sp, #7
 80082ba:	46a4      	mov	ip, r4
 80082bc:	270a      	movs	r7, #10
 80082be:	46a6      	mov	lr, r4
 80082c0:	460a      	mov	r2, r1
 80082c2:	fb91 f6f7 	sdiv	r6, r1, r7
 80082c6:	fb07 1516 	mls	r5, r7, r6, r1
 80082ca:	3530      	adds	r5, #48	; 0x30
 80082cc:	2a63      	cmp	r2, #99	; 0x63
 80082ce:	f104 34ff 	add.w	r4, r4, #4294967295
 80082d2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80082d6:	4631      	mov	r1, r6
 80082d8:	dcf1      	bgt.n	80082be <__exponent+0x22>
 80082da:	3130      	adds	r1, #48	; 0x30
 80082dc:	f1ae 0502 	sub.w	r5, lr, #2
 80082e0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80082e4:	1c44      	adds	r4, r0, #1
 80082e6:	4629      	mov	r1, r5
 80082e8:	4561      	cmp	r1, ip
 80082ea:	d30a      	bcc.n	8008302 <__exponent+0x66>
 80082ec:	f10d 0209 	add.w	r2, sp, #9
 80082f0:	eba2 020e 	sub.w	r2, r2, lr
 80082f4:	4565      	cmp	r5, ip
 80082f6:	bf88      	it	hi
 80082f8:	2200      	movhi	r2, #0
 80082fa:	4413      	add	r3, r2
 80082fc:	1a18      	subs	r0, r3, r0
 80082fe:	b003      	add	sp, #12
 8008300:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008302:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008306:	f804 2f01 	strb.w	r2, [r4, #1]!
 800830a:	e7ed      	b.n	80082e8 <__exponent+0x4c>
 800830c:	2330      	movs	r3, #48	; 0x30
 800830e:	3130      	adds	r1, #48	; 0x30
 8008310:	7083      	strb	r3, [r0, #2]
 8008312:	70c1      	strb	r1, [r0, #3]
 8008314:	1d03      	adds	r3, r0, #4
 8008316:	e7f1      	b.n	80082fc <__exponent+0x60>

08008318 <_printf_float>:
 8008318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800831c:	ed2d 8b02 	vpush	{d8}
 8008320:	b08d      	sub	sp, #52	; 0x34
 8008322:	460c      	mov	r4, r1
 8008324:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008328:	4616      	mov	r6, r2
 800832a:	461f      	mov	r7, r3
 800832c:	4605      	mov	r5, r0
 800832e:	f001 fb83 	bl	8009a38 <_localeconv_r>
 8008332:	f8d0 a000 	ldr.w	sl, [r0]
 8008336:	4650      	mov	r0, sl
 8008338:	f7f7 ff7c 	bl	8000234 <strlen>
 800833c:	2300      	movs	r3, #0
 800833e:	930a      	str	r3, [sp, #40]	; 0x28
 8008340:	6823      	ldr	r3, [r4, #0]
 8008342:	9305      	str	r3, [sp, #20]
 8008344:	f8d8 3000 	ldr.w	r3, [r8]
 8008348:	f894 b018 	ldrb.w	fp, [r4, #24]
 800834c:	3307      	adds	r3, #7
 800834e:	f023 0307 	bic.w	r3, r3, #7
 8008352:	f103 0208 	add.w	r2, r3, #8
 8008356:	f8c8 2000 	str.w	r2, [r8]
 800835a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800835e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008362:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008366:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800836a:	9307      	str	r3, [sp, #28]
 800836c:	f8cd 8018 	str.w	r8, [sp, #24]
 8008370:	ee08 0a10 	vmov	s16, r0
 8008374:	4b9f      	ldr	r3, [pc, #636]	; (80085f4 <_printf_float+0x2dc>)
 8008376:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800837a:	f04f 32ff 	mov.w	r2, #4294967295
 800837e:	f7f8 fc0d 	bl	8000b9c <__aeabi_dcmpun>
 8008382:	bb88      	cbnz	r0, 80083e8 <_printf_float+0xd0>
 8008384:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008388:	4b9a      	ldr	r3, [pc, #616]	; (80085f4 <_printf_float+0x2dc>)
 800838a:	f04f 32ff 	mov.w	r2, #4294967295
 800838e:	f7f8 fbe7 	bl	8000b60 <__aeabi_dcmple>
 8008392:	bb48      	cbnz	r0, 80083e8 <_printf_float+0xd0>
 8008394:	2200      	movs	r2, #0
 8008396:	2300      	movs	r3, #0
 8008398:	4640      	mov	r0, r8
 800839a:	4649      	mov	r1, r9
 800839c:	f7f8 fbd6 	bl	8000b4c <__aeabi_dcmplt>
 80083a0:	b110      	cbz	r0, 80083a8 <_printf_float+0x90>
 80083a2:	232d      	movs	r3, #45	; 0x2d
 80083a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80083a8:	4b93      	ldr	r3, [pc, #588]	; (80085f8 <_printf_float+0x2e0>)
 80083aa:	4894      	ldr	r0, [pc, #592]	; (80085fc <_printf_float+0x2e4>)
 80083ac:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80083b0:	bf94      	ite	ls
 80083b2:	4698      	movls	r8, r3
 80083b4:	4680      	movhi	r8, r0
 80083b6:	2303      	movs	r3, #3
 80083b8:	6123      	str	r3, [r4, #16]
 80083ba:	9b05      	ldr	r3, [sp, #20]
 80083bc:	f023 0204 	bic.w	r2, r3, #4
 80083c0:	6022      	str	r2, [r4, #0]
 80083c2:	f04f 0900 	mov.w	r9, #0
 80083c6:	9700      	str	r7, [sp, #0]
 80083c8:	4633      	mov	r3, r6
 80083ca:	aa0b      	add	r2, sp, #44	; 0x2c
 80083cc:	4621      	mov	r1, r4
 80083ce:	4628      	mov	r0, r5
 80083d0:	f000 f9d8 	bl	8008784 <_printf_common>
 80083d4:	3001      	adds	r0, #1
 80083d6:	f040 8090 	bne.w	80084fa <_printf_float+0x1e2>
 80083da:	f04f 30ff 	mov.w	r0, #4294967295
 80083de:	b00d      	add	sp, #52	; 0x34
 80083e0:	ecbd 8b02 	vpop	{d8}
 80083e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083e8:	4642      	mov	r2, r8
 80083ea:	464b      	mov	r3, r9
 80083ec:	4640      	mov	r0, r8
 80083ee:	4649      	mov	r1, r9
 80083f0:	f7f8 fbd4 	bl	8000b9c <__aeabi_dcmpun>
 80083f4:	b140      	cbz	r0, 8008408 <_printf_float+0xf0>
 80083f6:	464b      	mov	r3, r9
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	bfbc      	itt	lt
 80083fc:	232d      	movlt	r3, #45	; 0x2d
 80083fe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008402:	487f      	ldr	r0, [pc, #508]	; (8008600 <_printf_float+0x2e8>)
 8008404:	4b7f      	ldr	r3, [pc, #508]	; (8008604 <_printf_float+0x2ec>)
 8008406:	e7d1      	b.n	80083ac <_printf_float+0x94>
 8008408:	6863      	ldr	r3, [r4, #4]
 800840a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800840e:	9206      	str	r2, [sp, #24]
 8008410:	1c5a      	adds	r2, r3, #1
 8008412:	d13f      	bne.n	8008494 <_printf_float+0x17c>
 8008414:	2306      	movs	r3, #6
 8008416:	6063      	str	r3, [r4, #4]
 8008418:	9b05      	ldr	r3, [sp, #20]
 800841a:	6861      	ldr	r1, [r4, #4]
 800841c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008420:	2300      	movs	r3, #0
 8008422:	9303      	str	r3, [sp, #12]
 8008424:	ab0a      	add	r3, sp, #40	; 0x28
 8008426:	e9cd b301 	strd	fp, r3, [sp, #4]
 800842a:	ab09      	add	r3, sp, #36	; 0x24
 800842c:	ec49 8b10 	vmov	d0, r8, r9
 8008430:	9300      	str	r3, [sp, #0]
 8008432:	6022      	str	r2, [r4, #0]
 8008434:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008438:	4628      	mov	r0, r5
 800843a:	f7ff fecd 	bl	80081d8 <__cvt>
 800843e:	9b06      	ldr	r3, [sp, #24]
 8008440:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008442:	2b47      	cmp	r3, #71	; 0x47
 8008444:	4680      	mov	r8, r0
 8008446:	d108      	bne.n	800845a <_printf_float+0x142>
 8008448:	1cc8      	adds	r0, r1, #3
 800844a:	db02      	blt.n	8008452 <_printf_float+0x13a>
 800844c:	6863      	ldr	r3, [r4, #4]
 800844e:	4299      	cmp	r1, r3
 8008450:	dd41      	ble.n	80084d6 <_printf_float+0x1be>
 8008452:	f1ab 0b02 	sub.w	fp, fp, #2
 8008456:	fa5f fb8b 	uxtb.w	fp, fp
 800845a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800845e:	d820      	bhi.n	80084a2 <_printf_float+0x18a>
 8008460:	3901      	subs	r1, #1
 8008462:	465a      	mov	r2, fp
 8008464:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008468:	9109      	str	r1, [sp, #36]	; 0x24
 800846a:	f7ff ff17 	bl	800829c <__exponent>
 800846e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008470:	1813      	adds	r3, r2, r0
 8008472:	2a01      	cmp	r2, #1
 8008474:	4681      	mov	r9, r0
 8008476:	6123      	str	r3, [r4, #16]
 8008478:	dc02      	bgt.n	8008480 <_printf_float+0x168>
 800847a:	6822      	ldr	r2, [r4, #0]
 800847c:	07d2      	lsls	r2, r2, #31
 800847e:	d501      	bpl.n	8008484 <_printf_float+0x16c>
 8008480:	3301      	adds	r3, #1
 8008482:	6123      	str	r3, [r4, #16]
 8008484:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008488:	2b00      	cmp	r3, #0
 800848a:	d09c      	beq.n	80083c6 <_printf_float+0xae>
 800848c:	232d      	movs	r3, #45	; 0x2d
 800848e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008492:	e798      	b.n	80083c6 <_printf_float+0xae>
 8008494:	9a06      	ldr	r2, [sp, #24]
 8008496:	2a47      	cmp	r2, #71	; 0x47
 8008498:	d1be      	bne.n	8008418 <_printf_float+0x100>
 800849a:	2b00      	cmp	r3, #0
 800849c:	d1bc      	bne.n	8008418 <_printf_float+0x100>
 800849e:	2301      	movs	r3, #1
 80084a0:	e7b9      	b.n	8008416 <_printf_float+0xfe>
 80084a2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80084a6:	d118      	bne.n	80084da <_printf_float+0x1c2>
 80084a8:	2900      	cmp	r1, #0
 80084aa:	6863      	ldr	r3, [r4, #4]
 80084ac:	dd0b      	ble.n	80084c6 <_printf_float+0x1ae>
 80084ae:	6121      	str	r1, [r4, #16]
 80084b0:	b913      	cbnz	r3, 80084b8 <_printf_float+0x1a0>
 80084b2:	6822      	ldr	r2, [r4, #0]
 80084b4:	07d0      	lsls	r0, r2, #31
 80084b6:	d502      	bpl.n	80084be <_printf_float+0x1a6>
 80084b8:	3301      	adds	r3, #1
 80084ba:	440b      	add	r3, r1
 80084bc:	6123      	str	r3, [r4, #16]
 80084be:	65a1      	str	r1, [r4, #88]	; 0x58
 80084c0:	f04f 0900 	mov.w	r9, #0
 80084c4:	e7de      	b.n	8008484 <_printf_float+0x16c>
 80084c6:	b913      	cbnz	r3, 80084ce <_printf_float+0x1b6>
 80084c8:	6822      	ldr	r2, [r4, #0]
 80084ca:	07d2      	lsls	r2, r2, #31
 80084cc:	d501      	bpl.n	80084d2 <_printf_float+0x1ba>
 80084ce:	3302      	adds	r3, #2
 80084d0:	e7f4      	b.n	80084bc <_printf_float+0x1a4>
 80084d2:	2301      	movs	r3, #1
 80084d4:	e7f2      	b.n	80084bc <_printf_float+0x1a4>
 80084d6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80084da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084dc:	4299      	cmp	r1, r3
 80084de:	db05      	blt.n	80084ec <_printf_float+0x1d4>
 80084e0:	6823      	ldr	r3, [r4, #0]
 80084e2:	6121      	str	r1, [r4, #16]
 80084e4:	07d8      	lsls	r0, r3, #31
 80084e6:	d5ea      	bpl.n	80084be <_printf_float+0x1a6>
 80084e8:	1c4b      	adds	r3, r1, #1
 80084ea:	e7e7      	b.n	80084bc <_printf_float+0x1a4>
 80084ec:	2900      	cmp	r1, #0
 80084ee:	bfd4      	ite	le
 80084f0:	f1c1 0202 	rsble	r2, r1, #2
 80084f4:	2201      	movgt	r2, #1
 80084f6:	4413      	add	r3, r2
 80084f8:	e7e0      	b.n	80084bc <_printf_float+0x1a4>
 80084fa:	6823      	ldr	r3, [r4, #0]
 80084fc:	055a      	lsls	r2, r3, #21
 80084fe:	d407      	bmi.n	8008510 <_printf_float+0x1f8>
 8008500:	6923      	ldr	r3, [r4, #16]
 8008502:	4642      	mov	r2, r8
 8008504:	4631      	mov	r1, r6
 8008506:	4628      	mov	r0, r5
 8008508:	47b8      	blx	r7
 800850a:	3001      	adds	r0, #1
 800850c:	d12c      	bne.n	8008568 <_printf_float+0x250>
 800850e:	e764      	b.n	80083da <_printf_float+0xc2>
 8008510:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008514:	f240 80e0 	bls.w	80086d8 <_printf_float+0x3c0>
 8008518:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800851c:	2200      	movs	r2, #0
 800851e:	2300      	movs	r3, #0
 8008520:	f7f8 fb0a 	bl	8000b38 <__aeabi_dcmpeq>
 8008524:	2800      	cmp	r0, #0
 8008526:	d034      	beq.n	8008592 <_printf_float+0x27a>
 8008528:	4a37      	ldr	r2, [pc, #220]	; (8008608 <_printf_float+0x2f0>)
 800852a:	2301      	movs	r3, #1
 800852c:	4631      	mov	r1, r6
 800852e:	4628      	mov	r0, r5
 8008530:	47b8      	blx	r7
 8008532:	3001      	adds	r0, #1
 8008534:	f43f af51 	beq.w	80083da <_printf_float+0xc2>
 8008538:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800853c:	429a      	cmp	r2, r3
 800853e:	db02      	blt.n	8008546 <_printf_float+0x22e>
 8008540:	6823      	ldr	r3, [r4, #0]
 8008542:	07d8      	lsls	r0, r3, #31
 8008544:	d510      	bpl.n	8008568 <_printf_float+0x250>
 8008546:	ee18 3a10 	vmov	r3, s16
 800854a:	4652      	mov	r2, sl
 800854c:	4631      	mov	r1, r6
 800854e:	4628      	mov	r0, r5
 8008550:	47b8      	blx	r7
 8008552:	3001      	adds	r0, #1
 8008554:	f43f af41 	beq.w	80083da <_printf_float+0xc2>
 8008558:	f04f 0800 	mov.w	r8, #0
 800855c:	f104 091a 	add.w	r9, r4, #26
 8008560:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008562:	3b01      	subs	r3, #1
 8008564:	4543      	cmp	r3, r8
 8008566:	dc09      	bgt.n	800857c <_printf_float+0x264>
 8008568:	6823      	ldr	r3, [r4, #0]
 800856a:	079b      	lsls	r3, r3, #30
 800856c:	f100 8105 	bmi.w	800877a <_printf_float+0x462>
 8008570:	68e0      	ldr	r0, [r4, #12]
 8008572:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008574:	4298      	cmp	r0, r3
 8008576:	bfb8      	it	lt
 8008578:	4618      	movlt	r0, r3
 800857a:	e730      	b.n	80083de <_printf_float+0xc6>
 800857c:	2301      	movs	r3, #1
 800857e:	464a      	mov	r2, r9
 8008580:	4631      	mov	r1, r6
 8008582:	4628      	mov	r0, r5
 8008584:	47b8      	blx	r7
 8008586:	3001      	adds	r0, #1
 8008588:	f43f af27 	beq.w	80083da <_printf_float+0xc2>
 800858c:	f108 0801 	add.w	r8, r8, #1
 8008590:	e7e6      	b.n	8008560 <_printf_float+0x248>
 8008592:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008594:	2b00      	cmp	r3, #0
 8008596:	dc39      	bgt.n	800860c <_printf_float+0x2f4>
 8008598:	4a1b      	ldr	r2, [pc, #108]	; (8008608 <_printf_float+0x2f0>)
 800859a:	2301      	movs	r3, #1
 800859c:	4631      	mov	r1, r6
 800859e:	4628      	mov	r0, r5
 80085a0:	47b8      	blx	r7
 80085a2:	3001      	adds	r0, #1
 80085a4:	f43f af19 	beq.w	80083da <_printf_float+0xc2>
 80085a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80085ac:	4313      	orrs	r3, r2
 80085ae:	d102      	bne.n	80085b6 <_printf_float+0x29e>
 80085b0:	6823      	ldr	r3, [r4, #0]
 80085b2:	07d9      	lsls	r1, r3, #31
 80085b4:	d5d8      	bpl.n	8008568 <_printf_float+0x250>
 80085b6:	ee18 3a10 	vmov	r3, s16
 80085ba:	4652      	mov	r2, sl
 80085bc:	4631      	mov	r1, r6
 80085be:	4628      	mov	r0, r5
 80085c0:	47b8      	blx	r7
 80085c2:	3001      	adds	r0, #1
 80085c4:	f43f af09 	beq.w	80083da <_printf_float+0xc2>
 80085c8:	f04f 0900 	mov.w	r9, #0
 80085cc:	f104 0a1a 	add.w	sl, r4, #26
 80085d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085d2:	425b      	negs	r3, r3
 80085d4:	454b      	cmp	r3, r9
 80085d6:	dc01      	bgt.n	80085dc <_printf_float+0x2c4>
 80085d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085da:	e792      	b.n	8008502 <_printf_float+0x1ea>
 80085dc:	2301      	movs	r3, #1
 80085de:	4652      	mov	r2, sl
 80085e0:	4631      	mov	r1, r6
 80085e2:	4628      	mov	r0, r5
 80085e4:	47b8      	blx	r7
 80085e6:	3001      	adds	r0, #1
 80085e8:	f43f aef7 	beq.w	80083da <_printf_float+0xc2>
 80085ec:	f109 0901 	add.w	r9, r9, #1
 80085f0:	e7ee      	b.n	80085d0 <_printf_float+0x2b8>
 80085f2:	bf00      	nop
 80085f4:	7fefffff 	.word	0x7fefffff
 80085f8:	0800b290 	.word	0x0800b290
 80085fc:	0800b294 	.word	0x0800b294
 8008600:	0800b29c 	.word	0x0800b29c
 8008604:	0800b298 	.word	0x0800b298
 8008608:	0800b2a0 	.word	0x0800b2a0
 800860c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800860e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008610:	429a      	cmp	r2, r3
 8008612:	bfa8      	it	ge
 8008614:	461a      	movge	r2, r3
 8008616:	2a00      	cmp	r2, #0
 8008618:	4691      	mov	r9, r2
 800861a:	dc37      	bgt.n	800868c <_printf_float+0x374>
 800861c:	f04f 0b00 	mov.w	fp, #0
 8008620:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008624:	f104 021a 	add.w	r2, r4, #26
 8008628:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800862a:	9305      	str	r3, [sp, #20]
 800862c:	eba3 0309 	sub.w	r3, r3, r9
 8008630:	455b      	cmp	r3, fp
 8008632:	dc33      	bgt.n	800869c <_printf_float+0x384>
 8008634:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008638:	429a      	cmp	r2, r3
 800863a:	db3b      	blt.n	80086b4 <_printf_float+0x39c>
 800863c:	6823      	ldr	r3, [r4, #0]
 800863e:	07da      	lsls	r2, r3, #31
 8008640:	d438      	bmi.n	80086b4 <_printf_float+0x39c>
 8008642:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008644:	9a05      	ldr	r2, [sp, #20]
 8008646:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008648:	1a9a      	subs	r2, r3, r2
 800864a:	eba3 0901 	sub.w	r9, r3, r1
 800864e:	4591      	cmp	r9, r2
 8008650:	bfa8      	it	ge
 8008652:	4691      	movge	r9, r2
 8008654:	f1b9 0f00 	cmp.w	r9, #0
 8008658:	dc35      	bgt.n	80086c6 <_printf_float+0x3ae>
 800865a:	f04f 0800 	mov.w	r8, #0
 800865e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008662:	f104 0a1a 	add.w	sl, r4, #26
 8008666:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800866a:	1a9b      	subs	r3, r3, r2
 800866c:	eba3 0309 	sub.w	r3, r3, r9
 8008670:	4543      	cmp	r3, r8
 8008672:	f77f af79 	ble.w	8008568 <_printf_float+0x250>
 8008676:	2301      	movs	r3, #1
 8008678:	4652      	mov	r2, sl
 800867a:	4631      	mov	r1, r6
 800867c:	4628      	mov	r0, r5
 800867e:	47b8      	blx	r7
 8008680:	3001      	adds	r0, #1
 8008682:	f43f aeaa 	beq.w	80083da <_printf_float+0xc2>
 8008686:	f108 0801 	add.w	r8, r8, #1
 800868a:	e7ec      	b.n	8008666 <_printf_float+0x34e>
 800868c:	4613      	mov	r3, r2
 800868e:	4631      	mov	r1, r6
 8008690:	4642      	mov	r2, r8
 8008692:	4628      	mov	r0, r5
 8008694:	47b8      	blx	r7
 8008696:	3001      	adds	r0, #1
 8008698:	d1c0      	bne.n	800861c <_printf_float+0x304>
 800869a:	e69e      	b.n	80083da <_printf_float+0xc2>
 800869c:	2301      	movs	r3, #1
 800869e:	4631      	mov	r1, r6
 80086a0:	4628      	mov	r0, r5
 80086a2:	9205      	str	r2, [sp, #20]
 80086a4:	47b8      	blx	r7
 80086a6:	3001      	adds	r0, #1
 80086a8:	f43f ae97 	beq.w	80083da <_printf_float+0xc2>
 80086ac:	9a05      	ldr	r2, [sp, #20]
 80086ae:	f10b 0b01 	add.w	fp, fp, #1
 80086b2:	e7b9      	b.n	8008628 <_printf_float+0x310>
 80086b4:	ee18 3a10 	vmov	r3, s16
 80086b8:	4652      	mov	r2, sl
 80086ba:	4631      	mov	r1, r6
 80086bc:	4628      	mov	r0, r5
 80086be:	47b8      	blx	r7
 80086c0:	3001      	adds	r0, #1
 80086c2:	d1be      	bne.n	8008642 <_printf_float+0x32a>
 80086c4:	e689      	b.n	80083da <_printf_float+0xc2>
 80086c6:	9a05      	ldr	r2, [sp, #20]
 80086c8:	464b      	mov	r3, r9
 80086ca:	4442      	add	r2, r8
 80086cc:	4631      	mov	r1, r6
 80086ce:	4628      	mov	r0, r5
 80086d0:	47b8      	blx	r7
 80086d2:	3001      	adds	r0, #1
 80086d4:	d1c1      	bne.n	800865a <_printf_float+0x342>
 80086d6:	e680      	b.n	80083da <_printf_float+0xc2>
 80086d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80086da:	2a01      	cmp	r2, #1
 80086dc:	dc01      	bgt.n	80086e2 <_printf_float+0x3ca>
 80086de:	07db      	lsls	r3, r3, #31
 80086e0:	d538      	bpl.n	8008754 <_printf_float+0x43c>
 80086e2:	2301      	movs	r3, #1
 80086e4:	4642      	mov	r2, r8
 80086e6:	4631      	mov	r1, r6
 80086e8:	4628      	mov	r0, r5
 80086ea:	47b8      	blx	r7
 80086ec:	3001      	adds	r0, #1
 80086ee:	f43f ae74 	beq.w	80083da <_printf_float+0xc2>
 80086f2:	ee18 3a10 	vmov	r3, s16
 80086f6:	4652      	mov	r2, sl
 80086f8:	4631      	mov	r1, r6
 80086fa:	4628      	mov	r0, r5
 80086fc:	47b8      	blx	r7
 80086fe:	3001      	adds	r0, #1
 8008700:	f43f ae6b 	beq.w	80083da <_printf_float+0xc2>
 8008704:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008708:	2200      	movs	r2, #0
 800870a:	2300      	movs	r3, #0
 800870c:	f7f8 fa14 	bl	8000b38 <__aeabi_dcmpeq>
 8008710:	b9d8      	cbnz	r0, 800874a <_printf_float+0x432>
 8008712:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008714:	f108 0201 	add.w	r2, r8, #1
 8008718:	3b01      	subs	r3, #1
 800871a:	4631      	mov	r1, r6
 800871c:	4628      	mov	r0, r5
 800871e:	47b8      	blx	r7
 8008720:	3001      	adds	r0, #1
 8008722:	d10e      	bne.n	8008742 <_printf_float+0x42a>
 8008724:	e659      	b.n	80083da <_printf_float+0xc2>
 8008726:	2301      	movs	r3, #1
 8008728:	4652      	mov	r2, sl
 800872a:	4631      	mov	r1, r6
 800872c:	4628      	mov	r0, r5
 800872e:	47b8      	blx	r7
 8008730:	3001      	adds	r0, #1
 8008732:	f43f ae52 	beq.w	80083da <_printf_float+0xc2>
 8008736:	f108 0801 	add.w	r8, r8, #1
 800873a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800873c:	3b01      	subs	r3, #1
 800873e:	4543      	cmp	r3, r8
 8008740:	dcf1      	bgt.n	8008726 <_printf_float+0x40e>
 8008742:	464b      	mov	r3, r9
 8008744:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008748:	e6dc      	b.n	8008504 <_printf_float+0x1ec>
 800874a:	f04f 0800 	mov.w	r8, #0
 800874e:	f104 0a1a 	add.w	sl, r4, #26
 8008752:	e7f2      	b.n	800873a <_printf_float+0x422>
 8008754:	2301      	movs	r3, #1
 8008756:	4642      	mov	r2, r8
 8008758:	e7df      	b.n	800871a <_printf_float+0x402>
 800875a:	2301      	movs	r3, #1
 800875c:	464a      	mov	r2, r9
 800875e:	4631      	mov	r1, r6
 8008760:	4628      	mov	r0, r5
 8008762:	47b8      	blx	r7
 8008764:	3001      	adds	r0, #1
 8008766:	f43f ae38 	beq.w	80083da <_printf_float+0xc2>
 800876a:	f108 0801 	add.w	r8, r8, #1
 800876e:	68e3      	ldr	r3, [r4, #12]
 8008770:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008772:	1a5b      	subs	r3, r3, r1
 8008774:	4543      	cmp	r3, r8
 8008776:	dcf0      	bgt.n	800875a <_printf_float+0x442>
 8008778:	e6fa      	b.n	8008570 <_printf_float+0x258>
 800877a:	f04f 0800 	mov.w	r8, #0
 800877e:	f104 0919 	add.w	r9, r4, #25
 8008782:	e7f4      	b.n	800876e <_printf_float+0x456>

08008784 <_printf_common>:
 8008784:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008788:	4616      	mov	r6, r2
 800878a:	4699      	mov	r9, r3
 800878c:	688a      	ldr	r2, [r1, #8]
 800878e:	690b      	ldr	r3, [r1, #16]
 8008790:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008794:	4293      	cmp	r3, r2
 8008796:	bfb8      	it	lt
 8008798:	4613      	movlt	r3, r2
 800879a:	6033      	str	r3, [r6, #0]
 800879c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80087a0:	4607      	mov	r7, r0
 80087a2:	460c      	mov	r4, r1
 80087a4:	b10a      	cbz	r2, 80087aa <_printf_common+0x26>
 80087a6:	3301      	adds	r3, #1
 80087a8:	6033      	str	r3, [r6, #0]
 80087aa:	6823      	ldr	r3, [r4, #0]
 80087ac:	0699      	lsls	r1, r3, #26
 80087ae:	bf42      	ittt	mi
 80087b0:	6833      	ldrmi	r3, [r6, #0]
 80087b2:	3302      	addmi	r3, #2
 80087b4:	6033      	strmi	r3, [r6, #0]
 80087b6:	6825      	ldr	r5, [r4, #0]
 80087b8:	f015 0506 	ands.w	r5, r5, #6
 80087bc:	d106      	bne.n	80087cc <_printf_common+0x48>
 80087be:	f104 0a19 	add.w	sl, r4, #25
 80087c2:	68e3      	ldr	r3, [r4, #12]
 80087c4:	6832      	ldr	r2, [r6, #0]
 80087c6:	1a9b      	subs	r3, r3, r2
 80087c8:	42ab      	cmp	r3, r5
 80087ca:	dc26      	bgt.n	800881a <_printf_common+0x96>
 80087cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80087d0:	1e13      	subs	r3, r2, #0
 80087d2:	6822      	ldr	r2, [r4, #0]
 80087d4:	bf18      	it	ne
 80087d6:	2301      	movne	r3, #1
 80087d8:	0692      	lsls	r2, r2, #26
 80087da:	d42b      	bmi.n	8008834 <_printf_common+0xb0>
 80087dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80087e0:	4649      	mov	r1, r9
 80087e2:	4638      	mov	r0, r7
 80087e4:	47c0      	blx	r8
 80087e6:	3001      	adds	r0, #1
 80087e8:	d01e      	beq.n	8008828 <_printf_common+0xa4>
 80087ea:	6823      	ldr	r3, [r4, #0]
 80087ec:	68e5      	ldr	r5, [r4, #12]
 80087ee:	6832      	ldr	r2, [r6, #0]
 80087f0:	f003 0306 	and.w	r3, r3, #6
 80087f4:	2b04      	cmp	r3, #4
 80087f6:	bf08      	it	eq
 80087f8:	1aad      	subeq	r5, r5, r2
 80087fa:	68a3      	ldr	r3, [r4, #8]
 80087fc:	6922      	ldr	r2, [r4, #16]
 80087fe:	bf0c      	ite	eq
 8008800:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008804:	2500      	movne	r5, #0
 8008806:	4293      	cmp	r3, r2
 8008808:	bfc4      	itt	gt
 800880a:	1a9b      	subgt	r3, r3, r2
 800880c:	18ed      	addgt	r5, r5, r3
 800880e:	2600      	movs	r6, #0
 8008810:	341a      	adds	r4, #26
 8008812:	42b5      	cmp	r5, r6
 8008814:	d11a      	bne.n	800884c <_printf_common+0xc8>
 8008816:	2000      	movs	r0, #0
 8008818:	e008      	b.n	800882c <_printf_common+0xa8>
 800881a:	2301      	movs	r3, #1
 800881c:	4652      	mov	r2, sl
 800881e:	4649      	mov	r1, r9
 8008820:	4638      	mov	r0, r7
 8008822:	47c0      	blx	r8
 8008824:	3001      	adds	r0, #1
 8008826:	d103      	bne.n	8008830 <_printf_common+0xac>
 8008828:	f04f 30ff 	mov.w	r0, #4294967295
 800882c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008830:	3501      	adds	r5, #1
 8008832:	e7c6      	b.n	80087c2 <_printf_common+0x3e>
 8008834:	18e1      	adds	r1, r4, r3
 8008836:	1c5a      	adds	r2, r3, #1
 8008838:	2030      	movs	r0, #48	; 0x30
 800883a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800883e:	4422      	add	r2, r4
 8008840:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008844:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008848:	3302      	adds	r3, #2
 800884a:	e7c7      	b.n	80087dc <_printf_common+0x58>
 800884c:	2301      	movs	r3, #1
 800884e:	4622      	mov	r2, r4
 8008850:	4649      	mov	r1, r9
 8008852:	4638      	mov	r0, r7
 8008854:	47c0      	blx	r8
 8008856:	3001      	adds	r0, #1
 8008858:	d0e6      	beq.n	8008828 <_printf_common+0xa4>
 800885a:	3601      	adds	r6, #1
 800885c:	e7d9      	b.n	8008812 <_printf_common+0x8e>
	...

08008860 <_printf_i>:
 8008860:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008864:	7e0f      	ldrb	r7, [r1, #24]
 8008866:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008868:	2f78      	cmp	r7, #120	; 0x78
 800886a:	4691      	mov	r9, r2
 800886c:	4680      	mov	r8, r0
 800886e:	460c      	mov	r4, r1
 8008870:	469a      	mov	sl, r3
 8008872:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008876:	d807      	bhi.n	8008888 <_printf_i+0x28>
 8008878:	2f62      	cmp	r7, #98	; 0x62
 800887a:	d80a      	bhi.n	8008892 <_printf_i+0x32>
 800887c:	2f00      	cmp	r7, #0
 800887e:	f000 80d8 	beq.w	8008a32 <_printf_i+0x1d2>
 8008882:	2f58      	cmp	r7, #88	; 0x58
 8008884:	f000 80a3 	beq.w	80089ce <_printf_i+0x16e>
 8008888:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800888c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008890:	e03a      	b.n	8008908 <_printf_i+0xa8>
 8008892:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008896:	2b15      	cmp	r3, #21
 8008898:	d8f6      	bhi.n	8008888 <_printf_i+0x28>
 800889a:	a101      	add	r1, pc, #4	; (adr r1, 80088a0 <_printf_i+0x40>)
 800889c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80088a0:	080088f9 	.word	0x080088f9
 80088a4:	0800890d 	.word	0x0800890d
 80088a8:	08008889 	.word	0x08008889
 80088ac:	08008889 	.word	0x08008889
 80088b0:	08008889 	.word	0x08008889
 80088b4:	08008889 	.word	0x08008889
 80088b8:	0800890d 	.word	0x0800890d
 80088bc:	08008889 	.word	0x08008889
 80088c0:	08008889 	.word	0x08008889
 80088c4:	08008889 	.word	0x08008889
 80088c8:	08008889 	.word	0x08008889
 80088cc:	08008a19 	.word	0x08008a19
 80088d0:	0800893d 	.word	0x0800893d
 80088d4:	080089fb 	.word	0x080089fb
 80088d8:	08008889 	.word	0x08008889
 80088dc:	08008889 	.word	0x08008889
 80088e0:	08008a3b 	.word	0x08008a3b
 80088e4:	08008889 	.word	0x08008889
 80088e8:	0800893d 	.word	0x0800893d
 80088ec:	08008889 	.word	0x08008889
 80088f0:	08008889 	.word	0x08008889
 80088f4:	08008a03 	.word	0x08008a03
 80088f8:	682b      	ldr	r3, [r5, #0]
 80088fa:	1d1a      	adds	r2, r3, #4
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	602a      	str	r2, [r5, #0]
 8008900:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008904:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008908:	2301      	movs	r3, #1
 800890a:	e0a3      	b.n	8008a54 <_printf_i+0x1f4>
 800890c:	6820      	ldr	r0, [r4, #0]
 800890e:	6829      	ldr	r1, [r5, #0]
 8008910:	0606      	lsls	r6, r0, #24
 8008912:	f101 0304 	add.w	r3, r1, #4
 8008916:	d50a      	bpl.n	800892e <_printf_i+0xce>
 8008918:	680e      	ldr	r6, [r1, #0]
 800891a:	602b      	str	r3, [r5, #0]
 800891c:	2e00      	cmp	r6, #0
 800891e:	da03      	bge.n	8008928 <_printf_i+0xc8>
 8008920:	232d      	movs	r3, #45	; 0x2d
 8008922:	4276      	negs	r6, r6
 8008924:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008928:	485e      	ldr	r0, [pc, #376]	; (8008aa4 <_printf_i+0x244>)
 800892a:	230a      	movs	r3, #10
 800892c:	e019      	b.n	8008962 <_printf_i+0x102>
 800892e:	680e      	ldr	r6, [r1, #0]
 8008930:	602b      	str	r3, [r5, #0]
 8008932:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008936:	bf18      	it	ne
 8008938:	b236      	sxthne	r6, r6
 800893a:	e7ef      	b.n	800891c <_printf_i+0xbc>
 800893c:	682b      	ldr	r3, [r5, #0]
 800893e:	6820      	ldr	r0, [r4, #0]
 8008940:	1d19      	adds	r1, r3, #4
 8008942:	6029      	str	r1, [r5, #0]
 8008944:	0601      	lsls	r1, r0, #24
 8008946:	d501      	bpl.n	800894c <_printf_i+0xec>
 8008948:	681e      	ldr	r6, [r3, #0]
 800894a:	e002      	b.n	8008952 <_printf_i+0xf2>
 800894c:	0646      	lsls	r6, r0, #25
 800894e:	d5fb      	bpl.n	8008948 <_printf_i+0xe8>
 8008950:	881e      	ldrh	r6, [r3, #0]
 8008952:	4854      	ldr	r0, [pc, #336]	; (8008aa4 <_printf_i+0x244>)
 8008954:	2f6f      	cmp	r7, #111	; 0x6f
 8008956:	bf0c      	ite	eq
 8008958:	2308      	moveq	r3, #8
 800895a:	230a      	movne	r3, #10
 800895c:	2100      	movs	r1, #0
 800895e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008962:	6865      	ldr	r5, [r4, #4]
 8008964:	60a5      	str	r5, [r4, #8]
 8008966:	2d00      	cmp	r5, #0
 8008968:	bfa2      	ittt	ge
 800896a:	6821      	ldrge	r1, [r4, #0]
 800896c:	f021 0104 	bicge.w	r1, r1, #4
 8008970:	6021      	strge	r1, [r4, #0]
 8008972:	b90e      	cbnz	r6, 8008978 <_printf_i+0x118>
 8008974:	2d00      	cmp	r5, #0
 8008976:	d04d      	beq.n	8008a14 <_printf_i+0x1b4>
 8008978:	4615      	mov	r5, r2
 800897a:	fbb6 f1f3 	udiv	r1, r6, r3
 800897e:	fb03 6711 	mls	r7, r3, r1, r6
 8008982:	5dc7      	ldrb	r7, [r0, r7]
 8008984:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008988:	4637      	mov	r7, r6
 800898a:	42bb      	cmp	r3, r7
 800898c:	460e      	mov	r6, r1
 800898e:	d9f4      	bls.n	800897a <_printf_i+0x11a>
 8008990:	2b08      	cmp	r3, #8
 8008992:	d10b      	bne.n	80089ac <_printf_i+0x14c>
 8008994:	6823      	ldr	r3, [r4, #0]
 8008996:	07de      	lsls	r6, r3, #31
 8008998:	d508      	bpl.n	80089ac <_printf_i+0x14c>
 800899a:	6923      	ldr	r3, [r4, #16]
 800899c:	6861      	ldr	r1, [r4, #4]
 800899e:	4299      	cmp	r1, r3
 80089a0:	bfde      	ittt	le
 80089a2:	2330      	movle	r3, #48	; 0x30
 80089a4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80089a8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80089ac:	1b52      	subs	r2, r2, r5
 80089ae:	6122      	str	r2, [r4, #16]
 80089b0:	f8cd a000 	str.w	sl, [sp]
 80089b4:	464b      	mov	r3, r9
 80089b6:	aa03      	add	r2, sp, #12
 80089b8:	4621      	mov	r1, r4
 80089ba:	4640      	mov	r0, r8
 80089bc:	f7ff fee2 	bl	8008784 <_printf_common>
 80089c0:	3001      	adds	r0, #1
 80089c2:	d14c      	bne.n	8008a5e <_printf_i+0x1fe>
 80089c4:	f04f 30ff 	mov.w	r0, #4294967295
 80089c8:	b004      	add	sp, #16
 80089ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089ce:	4835      	ldr	r0, [pc, #212]	; (8008aa4 <_printf_i+0x244>)
 80089d0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80089d4:	6829      	ldr	r1, [r5, #0]
 80089d6:	6823      	ldr	r3, [r4, #0]
 80089d8:	f851 6b04 	ldr.w	r6, [r1], #4
 80089dc:	6029      	str	r1, [r5, #0]
 80089de:	061d      	lsls	r5, r3, #24
 80089e0:	d514      	bpl.n	8008a0c <_printf_i+0x1ac>
 80089e2:	07df      	lsls	r7, r3, #31
 80089e4:	bf44      	itt	mi
 80089e6:	f043 0320 	orrmi.w	r3, r3, #32
 80089ea:	6023      	strmi	r3, [r4, #0]
 80089ec:	b91e      	cbnz	r6, 80089f6 <_printf_i+0x196>
 80089ee:	6823      	ldr	r3, [r4, #0]
 80089f0:	f023 0320 	bic.w	r3, r3, #32
 80089f4:	6023      	str	r3, [r4, #0]
 80089f6:	2310      	movs	r3, #16
 80089f8:	e7b0      	b.n	800895c <_printf_i+0xfc>
 80089fa:	6823      	ldr	r3, [r4, #0]
 80089fc:	f043 0320 	orr.w	r3, r3, #32
 8008a00:	6023      	str	r3, [r4, #0]
 8008a02:	2378      	movs	r3, #120	; 0x78
 8008a04:	4828      	ldr	r0, [pc, #160]	; (8008aa8 <_printf_i+0x248>)
 8008a06:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008a0a:	e7e3      	b.n	80089d4 <_printf_i+0x174>
 8008a0c:	0659      	lsls	r1, r3, #25
 8008a0e:	bf48      	it	mi
 8008a10:	b2b6      	uxthmi	r6, r6
 8008a12:	e7e6      	b.n	80089e2 <_printf_i+0x182>
 8008a14:	4615      	mov	r5, r2
 8008a16:	e7bb      	b.n	8008990 <_printf_i+0x130>
 8008a18:	682b      	ldr	r3, [r5, #0]
 8008a1a:	6826      	ldr	r6, [r4, #0]
 8008a1c:	6961      	ldr	r1, [r4, #20]
 8008a1e:	1d18      	adds	r0, r3, #4
 8008a20:	6028      	str	r0, [r5, #0]
 8008a22:	0635      	lsls	r5, r6, #24
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	d501      	bpl.n	8008a2c <_printf_i+0x1cc>
 8008a28:	6019      	str	r1, [r3, #0]
 8008a2a:	e002      	b.n	8008a32 <_printf_i+0x1d2>
 8008a2c:	0670      	lsls	r0, r6, #25
 8008a2e:	d5fb      	bpl.n	8008a28 <_printf_i+0x1c8>
 8008a30:	8019      	strh	r1, [r3, #0]
 8008a32:	2300      	movs	r3, #0
 8008a34:	6123      	str	r3, [r4, #16]
 8008a36:	4615      	mov	r5, r2
 8008a38:	e7ba      	b.n	80089b0 <_printf_i+0x150>
 8008a3a:	682b      	ldr	r3, [r5, #0]
 8008a3c:	1d1a      	adds	r2, r3, #4
 8008a3e:	602a      	str	r2, [r5, #0]
 8008a40:	681d      	ldr	r5, [r3, #0]
 8008a42:	6862      	ldr	r2, [r4, #4]
 8008a44:	2100      	movs	r1, #0
 8008a46:	4628      	mov	r0, r5
 8008a48:	f7f7 fc02 	bl	8000250 <memchr>
 8008a4c:	b108      	cbz	r0, 8008a52 <_printf_i+0x1f2>
 8008a4e:	1b40      	subs	r0, r0, r5
 8008a50:	6060      	str	r0, [r4, #4]
 8008a52:	6863      	ldr	r3, [r4, #4]
 8008a54:	6123      	str	r3, [r4, #16]
 8008a56:	2300      	movs	r3, #0
 8008a58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a5c:	e7a8      	b.n	80089b0 <_printf_i+0x150>
 8008a5e:	6923      	ldr	r3, [r4, #16]
 8008a60:	462a      	mov	r2, r5
 8008a62:	4649      	mov	r1, r9
 8008a64:	4640      	mov	r0, r8
 8008a66:	47d0      	blx	sl
 8008a68:	3001      	adds	r0, #1
 8008a6a:	d0ab      	beq.n	80089c4 <_printf_i+0x164>
 8008a6c:	6823      	ldr	r3, [r4, #0]
 8008a6e:	079b      	lsls	r3, r3, #30
 8008a70:	d413      	bmi.n	8008a9a <_printf_i+0x23a>
 8008a72:	68e0      	ldr	r0, [r4, #12]
 8008a74:	9b03      	ldr	r3, [sp, #12]
 8008a76:	4298      	cmp	r0, r3
 8008a78:	bfb8      	it	lt
 8008a7a:	4618      	movlt	r0, r3
 8008a7c:	e7a4      	b.n	80089c8 <_printf_i+0x168>
 8008a7e:	2301      	movs	r3, #1
 8008a80:	4632      	mov	r2, r6
 8008a82:	4649      	mov	r1, r9
 8008a84:	4640      	mov	r0, r8
 8008a86:	47d0      	blx	sl
 8008a88:	3001      	adds	r0, #1
 8008a8a:	d09b      	beq.n	80089c4 <_printf_i+0x164>
 8008a8c:	3501      	adds	r5, #1
 8008a8e:	68e3      	ldr	r3, [r4, #12]
 8008a90:	9903      	ldr	r1, [sp, #12]
 8008a92:	1a5b      	subs	r3, r3, r1
 8008a94:	42ab      	cmp	r3, r5
 8008a96:	dcf2      	bgt.n	8008a7e <_printf_i+0x21e>
 8008a98:	e7eb      	b.n	8008a72 <_printf_i+0x212>
 8008a9a:	2500      	movs	r5, #0
 8008a9c:	f104 0619 	add.w	r6, r4, #25
 8008aa0:	e7f5      	b.n	8008a8e <_printf_i+0x22e>
 8008aa2:	bf00      	nop
 8008aa4:	0800b2a2 	.word	0x0800b2a2
 8008aa8:	0800b2b3 	.word	0x0800b2b3

08008aac <siprintf>:
 8008aac:	b40e      	push	{r1, r2, r3}
 8008aae:	b500      	push	{lr}
 8008ab0:	b09c      	sub	sp, #112	; 0x70
 8008ab2:	ab1d      	add	r3, sp, #116	; 0x74
 8008ab4:	9002      	str	r0, [sp, #8]
 8008ab6:	9006      	str	r0, [sp, #24]
 8008ab8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008abc:	4809      	ldr	r0, [pc, #36]	; (8008ae4 <siprintf+0x38>)
 8008abe:	9107      	str	r1, [sp, #28]
 8008ac0:	9104      	str	r1, [sp, #16]
 8008ac2:	4909      	ldr	r1, [pc, #36]	; (8008ae8 <siprintf+0x3c>)
 8008ac4:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ac8:	9105      	str	r1, [sp, #20]
 8008aca:	6800      	ldr	r0, [r0, #0]
 8008acc:	9301      	str	r3, [sp, #4]
 8008ace:	a902      	add	r1, sp, #8
 8008ad0:	f001 fca2 	bl	800a418 <_svfiprintf_r>
 8008ad4:	9b02      	ldr	r3, [sp, #8]
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	701a      	strb	r2, [r3, #0]
 8008ada:	b01c      	add	sp, #112	; 0x70
 8008adc:	f85d eb04 	ldr.w	lr, [sp], #4
 8008ae0:	b003      	add	sp, #12
 8008ae2:	4770      	bx	lr
 8008ae4:	20000128 	.word	0x20000128
 8008ae8:	ffff0208 	.word	0xffff0208

08008aec <strncmp>:
 8008aec:	b510      	push	{r4, lr}
 8008aee:	b17a      	cbz	r2, 8008b10 <strncmp+0x24>
 8008af0:	4603      	mov	r3, r0
 8008af2:	3901      	subs	r1, #1
 8008af4:	1884      	adds	r4, r0, r2
 8008af6:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008afa:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008afe:	4290      	cmp	r0, r2
 8008b00:	d101      	bne.n	8008b06 <strncmp+0x1a>
 8008b02:	42a3      	cmp	r3, r4
 8008b04:	d101      	bne.n	8008b0a <strncmp+0x1e>
 8008b06:	1a80      	subs	r0, r0, r2
 8008b08:	bd10      	pop	{r4, pc}
 8008b0a:	2800      	cmp	r0, #0
 8008b0c:	d1f3      	bne.n	8008af6 <strncmp+0xa>
 8008b0e:	e7fa      	b.n	8008b06 <strncmp+0x1a>
 8008b10:	4610      	mov	r0, r2
 8008b12:	e7f9      	b.n	8008b08 <strncmp+0x1c>

08008b14 <strtok>:
 8008b14:	4b16      	ldr	r3, [pc, #88]	; (8008b70 <strtok+0x5c>)
 8008b16:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008b18:	681e      	ldr	r6, [r3, #0]
 8008b1a:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8008b1c:	4605      	mov	r5, r0
 8008b1e:	b9fc      	cbnz	r4, 8008b60 <strtok+0x4c>
 8008b20:	2050      	movs	r0, #80	; 0x50
 8008b22:	9101      	str	r1, [sp, #4]
 8008b24:	f000 ff8c 	bl	8009a40 <malloc>
 8008b28:	9901      	ldr	r1, [sp, #4]
 8008b2a:	65b0      	str	r0, [r6, #88]	; 0x58
 8008b2c:	4602      	mov	r2, r0
 8008b2e:	b920      	cbnz	r0, 8008b3a <strtok+0x26>
 8008b30:	4b10      	ldr	r3, [pc, #64]	; (8008b74 <strtok+0x60>)
 8008b32:	4811      	ldr	r0, [pc, #68]	; (8008b78 <strtok+0x64>)
 8008b34:	2157      	movs	r1, #87	; 0x57
 8008b36:	f000 f8d5 	bl	8008ce4 <__assert_func>
 8008b3a:	e9c0 4400 	strd	r4, r4, [r0]
 8008b3e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8008b42:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8008b46:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8008b4a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8008b4e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8008b52:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8008b56:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8008b5a:	6184      	str	r4, [r0, #24]
 8008b5c:	7704      	strb	r4, [r0, #28]
 8008b5e:	6244      	str	r4, [r0, #36]	; 0x24
 8008b60:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8008b62:	2301      	movs	r3, #1
 8008b64:	4628      	mov	r0, r5
 8008b66:	b002      	add	sp, #8
 8008b68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008b6c:	f000 b806 	b.w	8008b7c <__strtok_r>
 8008b70:	20000128 	.word	0x20000128
 8008b74:	0800b2c4 	.word	0x0800b2c4
 8008b78:	0800b2db 	.word	0x0800b2db

08008b7c <__strtok_r>:
 8008b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b7e:	b908      	cbnz	r0, 8008b84 <__strtok_r+0x8>
 8008b80:	6810      	ldr	r0, [r2, #0]
 8008b82:	b188      	cbz	r0, 8008ba8 <__strtok_r+0x2c>
 8008b84:	4604      	mov	r4, r0
 8008b86:	4620      	mov	r0, r4
 8008b88:	f814 5b01 	ldrb.w	r5, [r4], #1
 8008b8c:	460f      	mov	r7, r1
 8008b8e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8008b92:	b91e      	cbnz	r6, 8008b9c <__strtok_r+0x20>
 8008b94:	b965      	cbnz	r5, 8008bb0 <__strtok_r+0x34>
 8008b96:	6015      	str	r5, [r2, #0]
 8008b98:	4628      	mov	r0, r5
 8008b9a:	e005      	b.n	8008ba8 <__strtok_r+0x2c>
 8008b9c:	42b5      	cmp	r5, r6
 8008b9e:	d1f6      	bne.n	8008b8e <__strtok_r+0x12>
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d1f0      	bne.n	8008b86 <__strtok_r+0xa>
 8008ba4:	6014      	str	r4, [r2, #0]
 8008ba6:	7003      	strb	r3, [r0, #0]
 8008ba8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008baa:	461c      	mov	r4, r3
 8008bac:	e00c      	b.n	8008bc8 <__strtok_r+0x4c>
 8008bae:	b915      	cbnz	r5, 8008bb6 <__strtok_r+0x3a>
 8008bb0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008bb4:	460e      	mov	r6, r1
 8008bb6:	f816 5b01 	ldrb.w	r5, [r6], #1
 8008bba:	42ab      	cmp	r3, r5
 8008bbc:	d1f7      	bne.n	8008bae <__strtok_r+0x32>
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d0f3      	beq.n	8008baa <__strtok_r+0x2e>
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	f804 3c01 	strb.w	r3, [r4, #-1]
 8008bc8:	6014      	str	r4, [r2, #0]
 8008bca:	e7ed      	b.n	8008ba8 <__strtok_r+0x2c>

08008bcc <_strtol_l.constprop.0>:
 8008bcc:	2b01      	cmp	r3, #1
 8008bce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008bd2:	d001      	beq.n	8008bd8 <_strtol_l.constprop.0+0xc>
 8008bd4:	2b24      	cmp	r3, #36	; 0x24
 8008bd6:	d906      	bls.n	8008be6 <_strtol_l.constprop.0+0x1a>
 8008bd8:	f7ff facc 	bl	8008174 <__errno>
 8008bdc:	2316      	movs	r3, #22
 8008bde:	6003      	str	r3, [r0, #0]
 8008be0:	2000      	movs	r0, #0
 8008be2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008be6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008ccc <_strtol_l.constprop.0+0x100>
 8008bea:	460d      	mov	r5, r1
 8008bec:	462e      	mov	r6, r5
 8008bee:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008bf2:	f814 700c 	ldrb.w	r7, [r4, ip]
 8008bf6:	f017 0708 	ands.w	r7, r7, #8
 8008bfa:	d1f7      	bne.n	8008bec <_strtol_l.constprop.0+0x20>
 8008bfc:	2c2d      	cmp	r4, #45	; 0x2d
 8008bfe:	d132      	bne.n	8008c66 <_strtol_l.constprop.0+0x9a>
 8008c00:	782c      	ldrb	r4, [r5, #0]
 8008c02:	2701      	movs	r7, #1
 8008c04:	1cb5      	adds	r5, r6, #2
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d05b      	beq.n	8008cc2 <_strtol_l.constprop.0+0xf6>
 8008c0a:	2b10      	cmp	r3, #16
 8008c0c:	d109      	bne.n	8008c22 <_strtol_l.constprop.0+0x56>
 8008c0e:	2c30      	cmp	r4, #48	; 0x30
 8008c10:	d107      	bne.n	8008c22 <_strtol_l.constprop.0+0x56>
 8008c12:	782c      	ldrb	r4, [r5, #0]
 8008c14:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008c18:	2c58      	cmp	r4, #88	; 0x58
 8008c1a:	d14d      	bne.n	8008cb8 <_strtol_l.constprop.0+0xec>
 8008c1c:	786c      	ldrb	r4, [r5, #1]
 8008c1e:	2310      	movs	r3, #16
 8008c20:	3502      	adds	r5, #2
 8008c22:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8008c26:	f108 38ff 	add.w	r8, r8, #4294967295
 8008c2a:	f04f 0c00 	mov.w	ip, #0
 8008c2e:	fbb8 f9f3 	udiv	r9, r8, r3
 8008c32:	4666      	mov	r6, ip
 8008c34:	fb03 8a19 	mls	sl, r3, r9, r8
 8008c38:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8008c3c:	f1be 0f09 	cmp.w	lr, #9
 8008c40:	d816      	bhi.n	8008c70 <_strtol_l.constprop.0+0xa4>
 8008c42:	4674      	mov	r4, lr
 8008c44:	42a3      	cmp	r3, r4
 8008c46:	dd24      	ble.n	8008c92 <_strtol_l.constprop.0+0xc6>
 8008c48:	f1bc 0f00 	cmp.w	ip, #0
 8008c4c:	db1e      	blt.n	8008c8c <_strtol_l.constprop.0+0xc0>
 8008c4e:	45b1      	cmp	r9, r6
 8008c50:	d31c      	bcc.n	8008c8c <_strtol_l.constprop.0+0xc0>
 8008c52:	d101      	bne.n	8008c58 <_strtol_l.constprop.0+0x8c>
 8008c54:	45a2      	cmp	sl, r4
 8008c56:	db19      	blt.n	8008c8c <_strtol_l.constprop.0+0xc0>
 8008c58:	fb06 4603 	mla	r6, r6, r3, r4
 8008c5c:	f04f 0c01 	mov.w	ip, #1
 8008c60:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008c64:	e7e8      	b.n	8008c38 <_strtol_l.constprop.0+0x6c>
 8008c66:	2c2b      	cmp	r4, #43	; 0x2b
 8008c68:	bf04      	itt	eq
 8008c6a:	782c      	ldrbeq	r4, [r5, #0]
 8008c6c:	1cb5      	addeq	r5, r6, #2
 8008c6e:	e7ca      	b.n	8008c06 <_strtol_l.constprop.0+0x3a>
 8008c70:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8008c74:	f1be 0f19 	cmp.w	lr, #25
 8008c78:	d801      	bhi.n	8008c7e <_strtol_l.constprop.0+0xb2>
 8008c7a:	3c37      	subs	r4, #55	; 0x37
 8008c7c:	e7e2      	b.n	8008c44 <_strtol_l.constprop.0+0x78>
 8008c7e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8008c82:	f1be 0f19 	cmp.w	lr, #25
 8008c86:	d804      	bhi.n	8008c92 <_strtol_l.constprop.0+0xc6>
 8008c88:	3c57      	subs	r4, #87	; 0x57
 8008c8a:	e7db      	b.n	8008c44 <_strtol_l.constprop.0+0x78>
 8008c8c:	f04f 3cff 	mov.w	ip, #4294967295
 8008c90:	e7e6      	b.n	8008c60 <_strtol_l.constprop.0+0x94>
 8008c92:	f1bc 0f00 	cmp.w	ip, #0
 8008c96:	da05      	bge.n	8008ca4 <_strtol_l.constprop.0+0xd8>
 8008c98:	2322      	movs	r3, #34	; 0x22
 8008c9a:	6003      	str	r3, [r0, #0]
 8008c9c:	4646      	mov	r6, r8
 8008c9e:	b942      	cbnz	r2, 8008cb2 <_strtol_l.constprop.0+0xe6>
 8008ca0:	4630      	mov	r0, r6
 8008ca2:	e79e      	b.n	8008be2 <_strtol_l.constprop.0+0x16>
 8008ca4:	b107      	cbz	r7, 8008ca8 <_strtol_l.constprop.0+0xdc>
 8008ca6:	4276      	negs	r6, r6
 8008ca8:	2a00      	cmp	r2, #0
 8008caa:	d0f9      	beq.n	8008ca0 <_strtol_l.constprop.0+0xd4>
 8008cac:	f1bc 0f00 	cmp.w	ip, #0
 8008cb0:	d000      	beq.n	8008cb4 <_strtol_l.constprop.0+0xe8>
 8008cb2:	1e69      	subs	r1, r5, #1
 8008cb4:	6011      	str	r1, [r2, #0]
 8008cb6:	e7f3      	b.n	8008ca0 <_strtol_l.constprop.0+0xd4>
 8008cb8:	2430      	movs	r4, #48	; 0x30
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d1b1      	bne.n	8008c22 <_strtol_l.constprop.0+0x56>
 8008cbe:	2308      	movs	r3, #8
 8008cc0:	e7af      	b.n	8008c22 <_strtol_l.constprop.0+0x56>
 8008cc2:	2c30      	cmp	r4, #48	; 0x30
 8008cc4:	d0a5      	beq.n	8008c12 <_strtol_l.constprop.0+0x46>
 8008cc6:	230a      	movs	r3, #10
 8008cc8:	e7ab      	b.n	8008c22 <_strtol_l.constprop.0+0x56>
 8008cca:	bf00      	nop
 8008ccc:	0800b375 	.word	0x0800b375

08008cd0 <strtol>:
 8008cd0:	4613      	mov	r3, r2
 8008cd2:	460a      	mov	r2, r1
 8008cd4:	4601      	mov	r1, r0
 8008cd6:	4802      	ldr	r0, [pc, #8]	; (8008ce0 <strtol+0x10>)
 8008cd8:	6800      	ldr	r0, [r0, #0]
 8008cda:	f7ff bf77 	b.w	8008bcc <_strtol_l.constprop.0>
 8008cde:	bf00      	nop
 8008ce0:	20000128 	.word	0x20000128

08008ce4 <__assert_func>:
 8008ce4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008ce6:	4614      	mov	r4, r2
 8008ce8:	461a      	mov	r2, r3
 8008cea:	4b09      	ldr	r3, [pc, #36]	; (8008d10 <__assert_func+0x2c>)
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	4605      	mov	r5, r0
 8008cf0:	68d8      	ldr	r0, [r3, #12]
 8008cf2:	b14c      	cbz	r4, 8008d08 <__assert_func+0x24>
 8008cf4:	4b07      	ldr	r3, [pc, #28]	; (8008d14 <__assert_func+0x30>)
 8008cf6:	9100      	str	r1, [sp, #0]
 8008cf8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008cfc:	4906      	ldr	r1, [pc, #24]	; (8008d18 <__assert_func+0x34>)
 8008cfe:	462b      	mov	r3, r5
 8008d00:	f000 fe88 	bl	8009a14 <fiprintf>
 8008d04:	f001 feb2 	bl	800aa6c <abort>
 8008d08:	4b04      	ldr	r3, [pc, #16]	; (8008d1c <__assert_func+0x38>)
 8008d0a:	461c      	mov	r4, r3
 8008d0c:	e7f3      	b.n	8008cf6 <__assert_func+0x12>
 8008d0e:	bf00      	nop
 8008d10:	20000128 	.word	0x20000128
 8008d14:	0800b338 	.word	0x0800b338
 8008d18:	0800b345 	.word	0x0800b345
 8008d1c:	0800b373 	.word	0x0800b373

08008d20 <quorem>:
 8008d20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d24:	6903      	ldr	r3, [r0, #16]
 8008d26:	690c      	ldr	r4, [r1, #16]
 8008d28:	42a3      	cmp	r3, r4
 8008d2a:	4607      	mov	r7, r0
 8008d2c:	f2c0 8081 	blt.w	8008e32 <quorem+0x112>
 8008d30:	3c01      	subs	r4, #1
 8008d32:	f101 0814 	add.w	r8, r1, #20
 8008d36:	f100 0514 	add.w	r5, r0, #20
 8008d3a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008d3e:	9301      	str	r3, [sp, #4]
 8008d40:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008d44:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008d48:	3301      	adds	r3, #1
 8008d4a:	429a      	cmp	r2, r3
 8008d4c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008d50:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008d54:	fbb2 f6f3 	udiv	r6, r2, r3
 8008d58:	d331      	bcc.n	8008dbe <quorem+0x9e>
 8008d5a:	f04f 0e00 	mov.w	lr, #0
 8008d5e:	4640      	mov	r0, r8
 8008d60:	46ac      	mov	ip, r5
 8008d62:	46f2      	mov	sl, lr
 8008d64:	f850 2b04 	ldr.w	r2, [r0], #4
 8008d68:	b293      	uxth	r3, r2
 8008d6a:	fb06 e303 	mla	r3, r6, r3, lr
 8008d6e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008d72:	b29b      	uxth	r3, r3
 8008d74:	ebaa 0303 	sub.w	r3, sl, r3
 8008d78:	f8dc a000 	ldr.w	sl, [ip]
 8008d7c:	0c12      	lsrs	r2, r2, #16
 8008d7e:	fa13 f38a 	uxtah	r3, r3, sl
 8008d82:	fb06 e202 	mla	r2, r6, r2, lr
 8008d86:	9300      	str	r3, [sp, #0]
 8008d88:	9b00      	ldr	r3, [sp, #0]
 8008d8a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008d8e:	b292      	uxth	r2, r2
 8008d90:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008d94:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008d98:	f8bd 3000 	ldrh.w	r3, [sp]
 8008d9c:	4581      	cmp	r9, r0
 8008d9e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008da2:	f84c 3b04 	str.w	r3, [ip], #4
 8008da6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008daa:	d2db      	bcs.n	8008d64 <quorem+0x44>
 8008dac:	f855 300b 	ldr.w	r3, [r5, fp]
 8008db0:	b92b      	cbnz	r3, 8008dbe <quorem+0x9e>
 8008db2:	9b01      	ldr	r3, [sp, #4]
 8008db4:	3b04      	subs	r3, #4
 8008db6:	429d      	cmp	r5, r3
 8008db8:	461a      	mov	r2, r3
 8008dba:	d32e      	bcc.n	8008e1a <quorem+0xfa>
 8008dbc:	613c      	str	r4, [r7, #16]
 8008dbe:	4638      	mov	r0, r7
 8008dc0:	f001 f8d6 	bl	8009f70 <__mcmp>
 8008dc4:	2800      	cmp	r0, #0
 8008dc6:	db24      	blt.n	8008e12 <quorem+0xf2>
 8008dc8:	3601      	adds	r6, #1
 8008dca:	4628      	mov	r0, r5
 8008dcc:	f04f 0c00 	mov.w	ip, #0
 8008dd0:	f858 2b04 	ldr.w	r2, [r8], #4
 8008dd4:	f8d0 e000 	ldr.w	lr, [r0]
 8008dd8:	b293      	uxth	r3, r2
 8008dda:	ebac 0303 	sub.w	r3, ip, r3
 8008dde:	0c12      	lsrs	r2, r2, #16
 8008de0:	fa13 f38e 	uxtah	r3, r3, lr
 8008de4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008de8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008dec:	b29b      	uxth	r3, r3
 8008dee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008df2:	45c1      	cmp	r9, r8
 8008df4:	f840 3b04 	str.w	r3, [r0], #4
 8008df8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008dfc:	d2e8      	bcs.n	8008dd0 <quorem+0xb0>
 8008dfe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008e02:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008e06:	b922      	cbnz	r2, 8008e12 <quorem+0xf2>
 8008e08:	3b04      	subs	r3, #4
 8008e0a:	429d      	cmp	r5, r3
 8008e0c:	461a      	mov	r2, r3
 8008e0e:	d30a      	bcc.n	8008e26 <quorem+0x106>
 8008e10:	613c      	str	r4, [r7, #16]
 8008e12:	4630      	mov	r0, r6
 8008e14:	b003      	add	sp, #12
 8008e16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e1a:	6812      	ldr	r2, [r2, #0]
 8008e1c:	3b04      	subs	r3, #4
 8008e1e:	2a00      	cmp	r2, #0
 8008e20:	d1cc      	bne.n	8008dbc <quorem+0x9c>
 8008e22:	3c01      	subs	r4, #1
 8008e24:	e7c7      	b.n	8008db6 <quorem+0x96>
 8008e26:	6812      	ldr	r2, [r2, #0]
 8008e28:	3b04      	subs	r3, #4
 8008e2a:	2a00      	cmp	r2, #0
 8008e2c:	d1f0      	bne.n	8008e10 <quorem+0xf0>
 8008e2e:	3c01      	subs	r4, #1
 8008e30:	e7eb      	b.n	8008e0a <quorem+0xea>
 8008e32:	2000      	movs	r0, #0
 8008e34:	e7ee      	b.n	8008e14 <quorem+0xf4>
	...

08008e38 <_dtoa_r>:
 8008e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e3c:	ed2d 8b04 	vpush	{d8-d9}
 8008e40:	ec57 6b10 	vmov	r6, r7, d0
 8008e44:	b093      	sub	sp, #76	; 0x4c
 8008e46:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008e48:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008e4c:	9106      	str	r1, [sp, #24]
 8008e4e:	ee10 aa10 	vmov	sl, s0
 8008e52:	4604      	mov	r4, r0
 8008e54:	9209      	str	r2, [sp, #36]	; 0x24
 8008e56:	930c      	str	r3, [sp, #48]	; 0x30
 8008e58:	46bb      	mov	fp, r7
 8008e5a:	b975      	cbnz	r5, 8008e7a <_dtoa_r+0x42>
 8008e5c:	2010      	movs	r0, #16
 8008e5e:	f000 fdef 	bl	8009a40 <malloc>
 8008e62:	4602      	mov	r2, r0
 8008e64:	6260      	str	r0, [r4, #36]	; 0x24
 8008e66:	b920      	cbnz	r0, 8008e72 <_dtoa_r+0x3a>
 8008e68:	4ba7      	ldr	r3, [pc, #668]	; (8009108 <_dtoa_r+0x2d0>)
 8008e6a:	21ea      	movs	r1, #234	; 0xea
 8008e6c:	48a7      	ldr	r0, [pc, #668]	; (800910c <_dtoa_r+0x2d4>)
 8008e6e:	f7ff ff39 	bl	8008ce4 <__assert_func>
 8008e72:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008e76:	6005      	str	r5, [r0, #0]
 8008e78:	60c5      	str	r5, [r0, #12]
 8008e7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e7c:	6819      	ldr	r1, [r3, #0]
 8008e7e:	b151      	cbz	r1, 8008e96 <_dtoa_r+0x5e>
 8008e80:	685a      	ldr	r2, [r3, #4]
 8008e82:	604a      	str	r2, [r1, #4]
 8008e84:	2301      	movs	r3, #1
 8008e86:	4093      	lsls	r3, r2
 8008e88:	608b      	str	r3, [r1, #8]
 8008e8a:	4620      	mov	r0, r4
 8008e8c:	f000 fe2e 	bl	8009aec <_Bfree>
 8008e90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e92:	2200      	movs	r2, #0
 8008e94:	601a      	str	r2, [r3, #0]
 8008e96:	1e3b      	subs	r3, r7, #0
 8008e98:	bfaa      	itet	ge
 8008e9a:	2300      	movge	r3, #0
 8008e9c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008ea0:	f8c8 3000 	strge.w	r3, [r8]
 8008ea4:	4b9a      	ldr	r3, [pc, #616]	; (8009110 <_dtoa_r+0x2d8>)
 8008ea6:	bfbc      	itt	lt
 8008ea8:	2201      	movlt	r2, #1
 8008eaa:	f8c8 2000 	strlt.w	r2, [r8]
 8008eae:	ea33 030b 	bics.w	r3, r3, fp
 8008eb2:	d11b      	bne.n	8008eec <_dtoa_r+0xb4>
 8008eb4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008eb6:	f242 730f 	movw	r3, #9999	; 0x270f
 8008eba:	6013      	str	r3, [r2, #0]
 8008ebc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008ec0:	4333      	orrs	r3, r6
 8008ec2:	f000 8592 	beq.w	80099ea <_dtoa_r+0xbb2>
 8008ec6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008ec8:	b963      	cbnz	r3, 8008ee4 <_dtoa_r+0xac>
 8008eca:	4b92      	ldr	r3, [pc, #584]	; (8009114 <_dtoa_r+0x2dc>)
 8008ecc:	e022      	b.n	8008f14 <_dtoa_r+0xdc>
 8008ece:	4b92      	ldr	r3, [pc, #584]	; (8009118 <_dtoa_r+0x2e0>)
 8008ed0:	9301      	str	r3, [sp, #4]
 8008ed2:	3308      	adds	r3, #8
 8008ed4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008ed6:	6013      	str	r3, [r2, #0]
 8008ed8:	9801      	ldr	r0, [sp, #4]
 8008eda:	b013      	add	sp, #76	; 0x4c
 8008edc:	ecbd 8b04 	vpop	{d8-d9}
 8008ee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ee4:	4b8b      	ldr	r3, [pc, #556]	; (8009114 <_dtoa_r+0x2dc>)
 8008ee6:	9301      	str	r3, [sp, #4]
 8008ee8:	3303      	adds	r3, #3
 8008eea:	e7f3      	b.n	8008ed4 <_dtoa_r+0x9c>
 8008eec:	2200      	movs	r2, #0
 8008eee:	2300      	movs	r3, #0
 8008ef0:	4650      	mov	r0, sl
 8008ef2:	4659      	mov	r1, fp
 8008ef4:	f7f7 fe20 	bl	8000b38 <__aeabi_dcmpeq>
 8008ef8:	ec4b ab19 	vmov	d9, sl, fp
 8008efc:	4680      	mov	r8, r0
 8008efe:	b158      	cbz	r0, 8008f18 <_dtoa_r+0xe0>
 8008f00:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008f02:	2301      	movs	r3, #1
 8008f04:	6013      	str	r3, [r2, #0]
 8008f06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	f000 856b 	beq.w	80099e4 <_dtoa_r+0xbac>
 8008f0e:	4883      	ldr	r0, [pc, #524]	; (800911c <_dtoa_r+0x2e4>)
 8008f10:	6018      	str	r0, [r3, #0]
 8008f12:	1e43      	subs	r3, r0, #1
 8008f14:	9301      	str	r3, [sp, #4]
 8008f16:	e7df      	b.n	8008ed8 <_dtoa_r+0xa0>
 8008f18:	ec4b ab10 	vmov	d0, sl, fp
 8008f1c:	aa10      	add	r2, sp, #64	; 0x40
 8008f1e:	a911      	add	r1, sp, #68	; 0x44
 8008f20:	4620      	mov	r0, r4
 8008f22:	f001 f8cb 	bl	800a0bc <__d2b>
 8008f26:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008f2a:	ee08 0a10 	vmov	s16, r0
 8008f2e:	2d00      	cmp	r5, #0
 8008f30:	f000 8084 	beq.w	800903c <_dtoa_r+0x204>
 8008f34:	ee19 3a90 	vmov	r3, s19
 8008f38:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008f3c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008f40:	4656      	mov	r6, sl
 8008f42:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008f46:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008f4a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008f4e:	4b74      	ldr	r3, [pc, #464]	; (8009120 <_dtoa_r+0x2e8>)
 8008f50:	2200      	movs	r2, #0
 8008f52:	4630      	mov	r0, r6
 8008f54:	4639      	mov	r1, r7
 8008f56:	f7f7 f9cf 	bl	80002f8 <__aeabi_dsub>
 8008f5a:	a365      	add	r3, pc, #404	; (adr r3, 80090f0 <_dtoa_r+0x2b8>)
 8008f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f60:	f7f7 fb82 	bl	8000668 <__aeabi_dmul>
 8008f64:	a364      	add	r3, pc, #400	; (adr r3, 80090f8 <_dtoa_r+0x2c0>)
 8008f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f6a:	f7f7 f9c7 	bl	80002fc <__adddf3>
 8008f6e:	4606      	mov	r6, r0
 8008f70:	4628      	mov	r0, r5
 8008f72:	460f      	mov	r7, r1
 8008f74:	f7f7 fb0e 	bl	8000594 <__aeabi_i2d>
 8008f78:	a361      	add	r3, pc, #388	; (adr r3, 8009100 <_dtoa_r+0x2c8>)
 8008f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f7e:	f7f7 fb73 	bl	8000668 <__aeabi_dmul>
 8008f82:	4602      	mov	r2, r0
 8008f84:	460b      	mov	r3, r1
 8008f86:	4630      	mov	r0, r6
 8008f88:	4639      	mov	r1, r7
 8008f8a:	f7f7 f9b7 	bl	80002fc <__adddf3>
 8008f8e:	4606      	mov	r6, r0
 8008f90:	460f      	mov	r7, r1
 8008f92:	f7f7 fe19 	bl	8000bc8 <__aeabi_d2iz>
 8008f96:	2200      	movs	r2, #0
 8008f98:	9000      	str	r0, [sp, #0]
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	4630      	mov	r0, r6
 8008f9e:	4639      	mov	r1, r7
 8008fa0:	f7f7 fdd4 	bl	8000b4c <__aeabi_dcmplt>
 8008fa4:	b150      	cbz	r0, 8008fbc <_dtoa_r+0x184>
 8008fa6:	9800      	ldr	r0, [sp, #0]
 8008fa8:	f7f7 faf4 	bl	8000594 <__aeabi_i2d>
 8008fac:	4632      	mov	r2, r6
 8008fae:	463b      	mov	r3, r7
 8008fb0:	f7f7 fdc2 	bl	8000b38 <__aeabi_dcmpeq>
 8008fb4:	b910      	cbnz	r0, 8008fbc <_dtoa_r+0x184>
 8008fb6:	9b00      	ldr	r3, [sp, #0]
 8008fb8:	3b01      	subs	r3, #1
 8008fba:	9300      	str	r3, [sp, #0]
 8008fbc:	9b00      	ldr	r3, [sp, #0]
 8008fbe:	2b16      	cmp	r3, #22
 8008fc0:	d85a      	bhi.n	8009078 <_dtoa_r+0x240>
 8008fc2:	9a00      	ldr	r2, [sp, #0]
 8008fc4:	4b57      	ldr	r3, [pc, #348]	; (8009124 <_dtoa_r+0x2ec>)
 8008fc6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fce:	ec51 0b19 	vmov	r0, r1, d9
 8008fd2:	f7f7 fdbb 	bl	8000b4c <__aeabi_dcmplt>
 8008fd6:	2800      	cmp	r0, #0
 8008fd8:	d050      	beq.n	800907c <_dtoa_r+0x244>
 8008fda:	9b00      	ldr	r3, [sp, #0]
 8008fdc:	3b01      	subs	r3, #1
 8008fde:	9300      	str	r3, [sp, #0]
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	930b      	str	r3, [sp, #44]	; 0x2c
 8008fe4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008fe6:	1b5d      	subs	r5, r3, r5
 8008fe8:	1e6b      	subs	r3, r5, #1
 8008fea:	9305      	str	r3, [sp, #20]
 8008fec:	bf45      	ittet	mi
 8008fee:	f1c5 0301 	rsbmi	r3, r5, #1
 8008ff2:	9304      	strmi	r3, [sp, #16]
 8008ff4:	2300      	movpl	r3, #0
 8008ff6:	2300      	movmi	r3, #0
 8008ff8:	bf4c      	ite	mi
 8008ffa:	9305      	strmi	r3, [sp, #20]
 8008ffc:	9304      	strpl	r3, [sp, #16]
 8008ffe:	9b00      	ldr	r3, [sp, #0]
 8009000:	2b00      	cmp	r3, #0
 8009002:	db3d      	blt.n	8009080 <_dtoa_r+0x248>
 8009004:	9b05      	ldr	r3, [sp, #20]
 8009006:	9a00      	ldr	r2, [sp, #0]
 8009008:	920a      	str	r2, [sp, #40]	; 0x28
 800900a:	4413      	add	r3, r2
 800900c:	9305      	str	r3, [sp, #20]
 800900e:	2300      	movs	r3, #0
 8009010:	9307      	str	r3, [sp, #28]
 8009012:	9b06      	ldr	r3, [sp, #24]
 8009014:	2b09      	cmp	r3, #9
 8009016:	f200 8089 	bhi.w	800912c <_dtoa_r+0x2f4>
 800901a:	2b05      	cmp	r3, #5
 800901c:	bfc4      	itt	gt
 800901e:	3b04      	subgt	r3, #4
 8009020:	9306      	strgt	r3, [sp, #24]
 8009022:	9b06      	ldr	r3, [sp, #24]
 8009024:	f1a3 0302 	sub.w	r3, r3, #2
 8009028:	bfcc      	ite	gt
 800902a:	2500      	movgt	r5, #0
 800902c:	2501      	movle	r5, #1
 800902e:	2b03      	cmp	r3, #3
 8009030:	f200 8087 	bhi.w	8009142 <_dtoa_r+0x30a>
 8009034:	e8df f003 	tbb	[pc, r3]
 8009038:	59383a2d 	.word	0x59383a2d
 800903c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009040:	441d      	add	r5, r3
 8009042:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009046:	2b20      	cmp	r3, #32
 8009048:	bfc1      	itttt	gt
 800904a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800904e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009052:	fa0b f303 	lslgt.w	r3, fp, r3
 8009056:	fa26 f000 	lsrgt.w	r0, r6, r0
 800905a:	bfda      	itte	le
 800905c:	f1c3 0320 	rsble	r3, r3, #32
 8009060:	fa06 f003 	lslle.w	r0, r6, r3
 8009064:	4318      	orrgt	r0, r3
 8009066:	f7f7 fa85 	bl	8000574 <__aeabi_ui2d>
 800906a:	2301      	movs	r3, #1
 800906c:	4606      	mov	r6, r0
 800906e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009072:	3d01      	subs	r5, #1
 8009074:	930e      	str	r3, [sp, #56]	; 0x38
 8009076:	e76a      	b.n	8008f4e <_dtoa_r+0x116>
 8009078:	2301      	movs	r3, #1
 800907a:	e7b2      	b.n	8008fe2 <_dtoa_r+0x1aa>
 800907c:	900b      	str	r0, [sp, #44]	; 0x2c
 800907e:	e7b1      	b.n	8008fe4 <_dtoa_r+0x1ac>
 8009080:	9b04      	ldr	r3, [sp, #16]
 8009082:	9a00      	ldr	r2, [sp, #0]
 8009084:	1a9b      	subs	r3, r3, r2
 8009086:	9304      	str	r3, [sp, #16]
 8009088:	4253      	negs	r3, r2
 800908a:	9307      	str	r3, [sp, #28]
 800908c:	2300      	movs	r3, #0
 800908e:	930a      	str	r3, [sp, #40]	; 0x28
 8009090:	e7bf      	b.n	8009012 <_dtoa_r+0x1da>
 8009092:	2300      	movs	r3, #0
 8009094:	9308      	str	r3, [sp, #32]
 8009096:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009098:	2b00      	cmp	r3, #0
 800909a:	dc55      	bgt.n	8009148 <_dtoa_r+0x310>
 800909c:	2301      	movs	r3, #1
 800909e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80090a2:	461a      	mov	r2, r3
 80090a4:	9209      	str	r2, [sp, #36]	; 0x24
 80090a6:	e00c      	b.n	80090c2 <_dtoa_r+0x28a>
 80090a8:	2301      	movs	r3, #1
 80090aa:	e7f3      	b.n	8009094 <_dtoa_r+0x25c>
 80090ac:	2300      	movs	r3, #0
 80090ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80090b0:	9308      	str	r3, [sp, #32]
 80090b2:	9b00      	ldr	r3, [sp, #0]
 80090b4:	4413      	add	r3, r2
 80090b6:	9302      	str	r3, [sp, #8]
 80090b8:	3301      	adds	r3, #1
 80090ba:	2b01      	cmp	r3, #1
 80090bc:	9303      	str	r3, [sp, #12]
 80090be:	bfb8      	it	lt
 80090c0:	2301      	movlt	r3, #1
 80090c2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80090c4:	2200      	movs	r2, #0
 80090c6:	6042      	str	r2, [r0, #4]
 80090c8:	2204      	movs	r2, #4
 80090ca:	f102 0614 	add.w	r6, r2, #20
 80090ce:	429e      	cmp	r6, r3
 80090d0:	6841      	ldr	r1, [r0, #4]
 80090d2:	d93d      	bls.n	8009150 <_dtoa_r+0x318>
 80090d4:	4620      	mov	r0, r4
 80090d6:	f000 fcc9 	bl	8009a6c <_Balloc>
 80090da:	9001      	str	r0, [sp, #4]
 80090dc:	2800      	cmp	r0, #0
 80090de:	d13b      	bne.n	8009158 <_dtoa_r+0x320>
 80090e0:	4b11      	ldr	r3, [pc, #68]	; (8009128 <_dtoa_r+0x2f0>)
 80090e2:	4602      	mov	r2, r0
 80090e4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80090e8:	e6c0      	b.n	8008e6c <_dtoa_r+0x34>
 80090ea:	2301      	movs	r3, #1
 80090ec:	e7df      	b.n	80090ae <_dtoa_r+0x276>
 80090ee:	bf00      	nop
 80090f0:	636f4361 	.word	0x636f4361
 80090f4:	3fd287a7 	.word	0x3fd287a7
 80090f8:	8b60c8b3 	.word	0x8b60c8b3
 80090fc:	3fc68a28 	.word	0x3fc68a28
 8009100:	509f79fb 	.word	0x509f79fb
 8009104:	3fd34413 	.word	0x3fd34413
 8009108:	0800b2c4 	.word	0x0800b2c4
 800910c:	0800b482 	.word	0x0800b482
 8009110:	7ff00000 	.word	0x7ff00000
 8009114:	0800b47e 	.word	0x0800b47e
 8009118:	0800b475 	.word	0x0800b475
 800911c:	0800b2a1 	.word	0x0800b2a1
 8009120:	3ff80000 	.word	0x3ff80000
 8009124:	0800b578 	.word	0x0800b578
 8009128:	0800b4dd 	.word	0x0800b4dd
 800912c:	2501      	movs	r5, #1
 800912e:	2300      	movs	r3, #0
 8009130:	9306      	str	r3, [sp, #24]
 8009132:	9508      	str	r5, [sp, #32]
 8009134:	f04f 33ff 	mov.w	r3, #4294967295
 8009138:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800913c:	2200      	movs	r2, #0
 800913e:	2312      	movs	r3, #18
 8009140:	e7b0      	b.n	80090a4 <_dtoa_r+0x26c>
 8009142:	2301      	movs	r3, #1
 8009144:	9308      	str	r3, [sp, #32]
 8009146:	e7f5      	b.n	8009134 <_dtoa_r+0x2fc>
 8009148:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800914a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800914e:	e7b8      	b.n	80090c2 <_dtoa_r+0x28a>
 8009150:	3101      	adds	r1, #1
 8009152:	6041      	str	r1, [r0, #4]
 8009154:	0052      	lsls	r2, r2, #1
 8009156:	e7b8      	b.n	80090ca <_dtoa_r+0x292>
 8009158:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800915a:	9a01      	ldr	r2, [sp, #4]
 800915c:	601a      	str	r2, [r3, #0]
 800915e:	9b03      	ldr	r3, [sp, #12]
 8009160:	2b0e      	cmp	r3, #14
 8009162:	f200 809d 	bhi.w	80092a0 <_dtoa_r+0x468>
 8009166:	2d00      	cmp	r5, #0
 8009168:	f000 809a 	beq.w	80092a0 <_dtoa_r+0x468>
 800916c:	9b00      	ldr	r3, [sp, #0]
 800916e:	2b00      	cmp	r3, #0
 8009170:	dd32      	ble.n	80091d8 <_dtoa_r+0x3a0>
 8009172:	4ab7      	ldr	r2, [pc, #732]	; (8009450 <_dtoa_r+0x618>)
 8009174:	f003 030f 	and.w	r3, r3, #15
 8009178:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800917c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009180:	9b00      	ldr	r3, [sp, #0]
 8009182:	05d8      	lsls	r0, r3, #23
 8009184:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009188:	d516      	bpl.n	80091b8 <_dtoa_r+0x380>
 800918a:	4bb2      	ldr	r3, [pc, #712]	; (8009454 <_dtoa_r+0x61c>)
 800918c:	ec51 0b19 	vmov	r0, r1, d9
 8009190:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009194:	f7f7 fb92 	bl	80008bc <__aeabi_ddiv>
 8009198:	f007 070f 	and.w	r7, r7, #15
 800919c:	4682      	mov	sl, r0
 800919e:	468b      	mov	fp, r1
 80091a0:	2503      	movs	r5, #3
 80091a2:	4eac      	ldr	r6, [pc, #688]	; (8009454 <_dtoa_r+0x61c>)
 80091a4:	b957      	cbnz	r7, 80091bc <_dtoa_r+0x384>
 80091a6:	4642      	mov	r2, r8
 80091a8:	464b      	mov	r3, r9
 80091aa:	4650      	mov	r0, sl
 80091ac:	4659      	mov	r1, fp
 80091ae:	f7f7 fb85 	bl	80008bc <__aeabi_ddiv>
 80091b2:	4682      	mov	sl, r0
 80091b4:	468b      	mov	fp, r1
 80091b6:	e028      	b.n	800920a <_dtoa_r+0x3d2>
 80091b8:	2502      	movs	r5, #2
 80091ba:	e7f2      	b.n	80091a2 <_dtoa_r+0x36a>
 80091bc:	07f9      	lsls	r1, r7, #31
 80091be:	d508      	bpl.n	80091d2 <_dtoa_r+0x39a>
 80091c0:	4640      	mov	r0, r8
 80091c2:	4649      	mov	r1, r9
 80091c4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80091c8:	f7f7 fa4e 	bl	8000668 <__aeabi_dmul>
 80091cc:	3501      	adds	r5, #1
 80091ce:	4680      	mov	r8, r0
 80091d0:	4689      	mov	r9, r1
 80091d2:	107f      	asrs	r7, r7, #1
 80091d4:	3608      	adds	r6, #8
 80091d6:	e7e5      	b.n	80091a4 <_dtoa_r+0x36c>
 80091d8:	f000 809b 	beq.w	8009312 <_dtoa_r+0x4da>
 80091dc:	9b00      	ldr	r3, [sp, #0]
 80091de:	4f9d      	ldr	r7, [pc, #628]	; (8009454 <_dtoa_r+0x61c>)
 80091e0:	425e      	negs	r6, r3
 80091e2:	4b9b      	ldr	r3, [pc, #620]	; (8009450 <_dtoa_r+0x618>)
 80091e4:	f006 020f 	and.w	r2, r6, #15
 80091e8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80091ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091f0:	ec51 0b19 	vmov	r0, r1, d9
 80091f4:	f7f7 fa38 	bl	8000668 <__aeabi_dmul>
 80091f8:	1136      	asrs	r6, r6, #4
 80091fa:	4682      	mov	sl, r0
 80091fc:	468b      	mov	fp, r1
 80091fe:	2300      	movs	r3, #0
 8009200:	2502      	movs	r5, #2
 8009202:	2e00      	cmp	r6, #0
 8009204:	d17a      	bne.n	80092fc <_dtoa_r+0x4c4>
 8009206:	2b00      	cmp	r3, #0
 8009208:	d1d3      	bne.n	80091b2 <_dtoa_r+0x37a>
 800920a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800920c:	2b00      	cmp	r3, #0
 800920e:	f000 8082 	beq.w	8009316 <_dtoa_r+0x4de>
 8009212:	4b91      	ldr	r3, [pc, #580]	; (8009458 <_dtoa_r+0x620>)
 8009214:	2200      	movs	r2, #0
 8009216:	4650      	mov	r0, sl
 8009218:	4659      	mov	r1, fp
 800921a:	f7f7 fc97 	bl	8000b4c <__aeabi_dcmplt>
 800921e:	2800      	cmp	r0, #0
 8009220:	d079      	beq.n	8009316 <_dtoa_r+0x4de>
 8009222:	9b03      	ldr	r3, [sp, #12]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d076      	beq.n	8009316 <_dtoa_r+0x4de>
 8009228:	9b02      	ldr	r3, [sp, #8]
 800922a:	2b00      	cmp	r3, #0
 800922c:	dd36      	ble.n	800929c <_dtoa_r+0x464>
 800922e:	9b00      	ldr	r3, [sp, #0]
 8009230:	4650      	mov	r0, sl
 8009232:	4659      	mov	r1, fp
 8009234:	1e5f      	subs	r7, r3, #1
 8009236:	2200      	movs	r2, #0
 8009238:	4b88      	ldr	r3, [pc, #544]	; (800945c <_dtoa_r+0x624>)
 800923a:	f7f7 fa15 	bl	8000668 <__aeabi_dmul>
 800923e:	9e02      	ldr	r6, [sp, #8]
 8009240:	4682      	mov	sl, r0
 8009242:	468b      	mov	fp, r1
 8009244:	3501      	adds	r5, #1
 8009246:	4628      	mov	r0, r5
 8009248:	f7f7 f9a4 	bl	8000594 <__aeabi_i2d>
 800924c:	4652      	mov	r2, sl
 800924e:	465b      	mov	r3, fp
 8009250:	f7f7 fa0a 	bl	8000668 <__aeabi_dmul>
 8009254:	4b82      	ldr	r3, [pc, #520]	; (8009460 <_dtoa_r+0x628>)
 8009256:	2200      	movs	r2, #0
 8009258:	f7f7 f850 	bl	80002fc <__adddf3>
 800925c:	46d0      	mov	r8, sl
 800925e:	46d9      	mov	r9, fp
 8009260:	4682      	mov	sl, r0
 8009262:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8009266:	2e00      	cmp	r6, #0
 8009268:	d158      	bne.n	800931c <_dtoa_r+0x4e4>
 800926a:	4b7e      	ldr	r3, [pc, #504]	; (8009464 <_dtoa_r+0x62c>)
 800926c:	2200      	movs	r2, #0
 800926e:	4640      	mov	r0, r8
 8009270:	4649      	mov	r1, r9
 8009272:	f7f7 f841 	bl	80002f8 <__aeabi_dsub>
 8009276:	4652      	mov	r2, sl
 8009278:	465b      	mov	r3, fp
 800927a:	4680      	mov	r8, r0
 800927c:	4689      	mov	r9, r1
 800927e:	f7f7 fc83 	bl	8000b88 <__aeabi_dcmpgt>
 8009282:	2800      	cmp	r0, #0
 8009284:	f040 8295 	bne.w	80097b2 <_dtoa_r+0x97a>
 8009288:	4652      	mov	r2, sl
 800928a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800928e:	4640      	mov	r0, r8
 8009290:	4649      	mov	r1, r9
 8009292:	f7f7 fc5b 	bl	8000b4c <__aeabi_dcmplt>
 8009296:	2800      	cmp	r0, #0
 8009298:	f040 8289 	bne.w	80097ae <_dtoa_r+0x976>
 800929c:	ec5b ab19 	vmov	sl, fp, d9
 80092a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	f2c0 8148 	blt.w	8009538 <_dtoa_r+0x700>
 80092a8:	9a00      	ldr	r2, [sp, #0]
 80092aa:	2a0e      	cmp	r2, #14
 80092ac:	f300 8144 	bgt.w	8009538 <_dtoa_r+0x700>
 80092b0:	4b67      	ldr	r3, [pc, #412]	; (8009450 <_dtoa_r+0x618>)
 80092b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80092b6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80092ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092bc:	2b00      	cmp	r3, #0
 80092be:	f280 80d5 	bge.w	800946c <_dtoa_r+0x634>
 80092c2:	9b03      	ldr	r3, [sp, #12]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	f300 80d1 	bgt.w	800946c <_dtoa_r+0x634>
 80092ca:	f040 826f 	bne.w	80097ac <_dtoa_r+0x974>
 80092ce:	4b65      	ldr	r3, [pc, #404]	; (8009464 <_dtoa_r+0x62c>)
 80092d0:	2200      	movs	r2, #0
 80092d2:	4640      	mov	r0, r8
 80092d4:	4649      	mov	r1, r9
 80092d6:	f7f7 f9c7 	bl	8000668 <__aeabi_dmul>
 80092da:	4652      	mov	r2, sl
 80092dc:	465b      	mov	r3, fp
 80092de:	f7f7 fc49 	bl	8000b74 <__aeabi_dcmpge>
 80092e2:	9e03      	ldr	r6, [sp, #12]
 80092e4:	4637      	mov	r7, r6
 80092e6:	2800      	cmp	r0, #0
 80092e8:	f040 8245 	bne.w	8009776 <_dtoa_r+0x93e>
 80092ec:	9d01      	ldr	r5, [sp, #4]
 80092ee:	2331      	movs	r3, #49	; 0x31
 80092f0:	f805 3b01 	strb.w	r3, [r5], #1
 80092f4:	9b00      	ldr	r3, [sp, #0]
 80092f6:	3301      	adds	r3, #1
 80092f8:	9300      	str	r3, [sp, #0]
 80092fa:	e240      	b.n	800977e <_dtoa_r+0x946>
 80092fc:	07f2      	lsls	r2, r6, #31
 80092fe:	d505      	bpl.n	800930c <_dtoa_r+0x4d4>
 8009300:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009304:	f7f7 f9b0 	bl	8000668 <__aeabi_dmul>
 8009308:	3501      	adds	r5, #1
 800930a:	2301      	movs	r3, #1
 800930c:	1076      	asrs	r6, r6, #1
 800930e:	3708      	adds	r7, #8
 8009310:	e777      	b.n	8009202 <_dtoa_r+0x3ca>
 8009312:	2502      	movs	r5, #2
 8009314:	e779      	b.n	800920a <_dtoa_r+0x3d2>
 8009316:	9f00      	ldr	r7, [sp, #0]
 8009318:	9e03      	ldr	r6, [sp, #12]
 800931a:	e794      	b.n	8009246 <_dtoa_r+0x40e>
 800931c:	9901      	ldr	r1, [sp, #4]
 800931e:	4b4c      	ldr	r3, [pc, #304]	; (8009450 <_dtoa_r+0x618>)
 8009320:	4431      	add	r1, r6
 8009322:	910d      	str	r1, [sp, #52]	; 0x34
 8009324:	9908      	ldr	r1, [sp, #32]
 8009326:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800932a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800932e:	2900      	cmp	r1, #0
 8009330:	d043      	beq.n	80093ba <_dtoa_r+0x582>
 8009332:	494d      	ldr	r1, [pc, #308]	; (8009468 <_dtoa_r+0x630>)
 8009334:	2000      	movs	r0, #0
 8009336:	f7f7 fac1 	bl	80008bc <__aeabi_ddiv>
 800933a:	4652      	mov	r2, sl
 800933c:	465b      	mov	r3, fp
 800933e:	f7f6 ffdb 	bl	80002f8 <__aeabi_dsub>
 8009342:	9d01      	ldr	r5, [sp, #4]
 8009344:	4682      	mov	sl, r0
 8009346:	468b      	mov	fp, r1
 8009348:	4649      	mov	r1, r9
 800934a:	4640      	mov	r0, r8
 800934c:	f7f7 fc3c 	bl	8000bc8 <__aeabi_d2iz>
 8009350:	4606      	mov	r6, r0
 8009352:	f7f7 f91f 	bl	8000594 <__aeabi_i2d>
 8009356:	4602      	mov	r2, r0
 8009358:	460b      	mov	r3, r1
 800935a:	4640      	mov	r0, r8
 800935c:	4649      	mov	r1, r9
 800935e:	f7f6 ffcb 	bl	80002f8 <__aeabi_dsub>
 8009362:	3630      	adds	r6, #48	; 0x30
 8009364:	f805 6b01 	strb.w	r6, [r5], #1
 8009368:	4652      	mov	r2, sl
 800936a:	465b      	mov	r3, fp
 800936c:	4680      	mov	r8, r0
 800936e:	4689      	mov	r9, r1
 8009370:	f7f7 fbec 	bl	8000b4c <__aeabi_dcmplt>
 8009374:	2800      	cmp	r0, #0
 8009376:	d163      	bne.n	8009440 <_dtoa_r+0x608>
 8009378:	4642      	mov	r2, r8
 800937a:	464b      	mov	r3, r9
 800937c:	4936      	ldr	r1, [pc, #216]	; (8009458 <_dtoa_r+0x620>)
 800937e:	2000      	movs	r0, #0
 8009380:	f7f6 ffba 	bl	80002f8 <__aeabi_dsub>
 8009384:	4652      	mov	r2, sl
 8009386:	465b      	mov	r3, fp
 8009388:	f7f7 fbe0 	bl	8000b4c <__aeabi_dcmplt>
 800938c:	2800      	cmp	r0, #0
 800938e:	f040 80b5 	bne.w	80094fc <_dtoa_r+0x6c4>
 8009392:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009394:	429d      	cmp	r5, r3
 8009396:	d081      	beq.n	800929c <_dtoa_r+0x464>
 8009398:	4b30      	ldr	r3, [pc, #192]	; (800945c <_dtoa_r+0x624>)
 800939a:	2200      	movs	r2, #0
 800939c:	4650      	mov	r0, sl
 800939e:	4659      	mov	r1, fp
 80093a0:	f7f7 f962 	bl	8000668 <__aeabi_dmul>
 80093a4:	4b2d      	ldr	r3, [pc, #180]	; (800945c <_dtoa_r+0x624>)
 80093a6:	4682      	mov	sl, r0
 80093a8:	468b      	mov	fp, r1
 80093aa:	4640      	mov	r0, r8
 80093ac:	4649      	mov	r1, r9
 80093ae:	2200      	movs	r2, #0
 80093b0:	f7f7 f95a 	bl	8000668 <__aeabi_dmul>
 80093b4:	4680      	mov	r8, r0
 80093b6:	4689      	mov	r9, r1
 80093b8:	e7c6      	b.n	8009348 <_dtoa_r+0x510>
 80093ba:	4650      	mov	r0, sl
 80093bc:	4659      	mov	r1, fp
 80093be:	f7f7 f953 	bl	8000668 <__aeabi_dmul>
 80093c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80093c4:	9d01      	ldr	r5, [sp, #4]
 80093c6:	930f      	str	r3, [sp, #60]	; 0x3c
 80093c8:	4682      	mov	sl, r0
 80093ca:	468b      	mov	fp, r1
 80093cc:	4649      	mov	r1, r9
 80093ce:	4640      	mov	r0, r8
 80093d0:	f7f7 fbfa 	bl	8000bc8 <__aeabi_d2iz>
 80093d4:	4606      	mov	r6, r0
 80093d6:	f7f7 f8dd 	bl	8000594 <__aeabi_i2d>
 80093da:	3630      	adds	r6, #48	; 0x30
 80093dc:	4602      	mov	r2, r0
 80093de:	460b      	mov	r3, r1
 80093e0:	4640      	mov	r0, r8
 80093e2:	4649      	mov	r1, r9
 80093e4:	f7f6 ff88 	bl	80002f8 <__aeabi_dsub>
 80093e8:	f805 6b01 	strb.w	r6, [r5], #1
 80093ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80093ee:	429d      	cmp	r5, r3
 80093f0:	4680      	mov	r8, r0
 80093f2:	4689      	mov	r9, r1
 80093f4:	f04f 0200 	mov.w	r2, #0
 80093f8:	d124      	bne.n	8009444 <_dtoa_r+0x60c>
 80093fa:	4b1b      	ldr	r3, [pc, #108]	; (8009468 <_dtoa_r+0x630>)
 80093fc:	4650      	mov	r0, sl
 80093fe:	4659      	mov	r1, fp
 8009400:	f7f6 ff7c 	bl	80002fc <__adddf3>
 8009404:	4602      	mov	r2, r0
 8009406:	460b      	mov	r3, r1
 8009408:	4640      	mov	r0, r8
 800940a:	4649      	mov	r1, r9
 800940c:	f7f7 fbbc 	bl	8000b88 <__aeabi_dcmpgt>
 8009410:	2800      	cmp	r0, #0
 8009412:	d173      	bne.n	80094fc <_dtoa_r+0x6c4>
 8009414:	4652      	mov	r2, sl
 8009416:	465b      	mov	r3, fp
 8009418:	4913      	ldr	r1, [pc, #76]	; (8009468 <_dtoa_r+0x630>)
 800941a:	2000      	movs	r0, #0
 800941c:	f7f6 ff6c 	bl	80002f8 <__aeabi_dsub>
 8009420:	4602      	mov	r2, r0
 8009422:	460b      	mov	r3, r1
 8009424:	4640      	mov	r0, r8
 8009426:	4649      	mov	r1, r9
 8009428:	f7f7 fb90 	bl	8000b4c <__aeabi_dcmplt>
 800942c:	2800      	cmp	r0, #0
 800942e:	f43f af35 	beq.w	800929c <_dtoa_r+0x464>
 8009432:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009434:	1e6b      	subs	r3, r5, #1
 8009436:	930f      	str	r3, [sp, #60]	; 0x3c
 8009438:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800943c:	2b30      	cmp	r3, #48	; 0x30
 800943e:	d0f8      	beq.n	8009432 <_dtoa_r+0x5fa>
 8009440:	9700      	str	r7, [sp, #0]
 8009442:	e049      	b.n	80094d8 <_dtoa_r+0x6a0>
 8009444:	4b05      	ldr	r3, [pc, #20]	; (800945c <_dtoa_r+0x624>)
 8009446:	f7f7 f90f 	bl	8000668 <__aeabi_dmul>
 800944a:	4680      	mov	r8, r0
 800944c:	4689      	mov	r9, r1
 800944e:	e7bd      	b.n	80093cc <_dtoa_r+0x594>
 8009450:	0800b578 	.word	0x0800b578
 8009454:	0800b550 	.word	0x0800b550
 8009458:	3ff00000 	.word	0x3ff00000
 800945c:	40240000 	.word	0x40240000
 8009460:	401c0000 	.word	0x401c0000
 8009464:	40140000 	.word	0x40140000
 8009468:	3fe00000 	.word	0x3fe00000
 800946c:	9d01      	ldr	r5, [sp, #4]
 800946e:	4656      	mov	r6, sl
 8009470:	465f      	mov	r7, fp
 8009472:	4642      	mov	r2, r8
 8009474:	464b      	mov	r3, r9
 8009476:	4630      	mov	r0, r6
 8009478:	4639      	mov	r1, r7
 800947a:	f7f7 fa1f 	bl	80008bc <__aeabi_ddiv>
 800947e:	f7f7 fba3 	bl	8000bc8 <__aeabi_d2iz>
 8009482:	4682      	mov	sl, r0
 8009484:	f7f7 f886 	bl	8000594 <__aeabi_i2d>
 8009488:	4642      	mov	r2, r8
 800948a:	464b      	mov	r3, r9
 800948c:	f7f7 f8ec 	bl	8000668 <__aeabi_dmul>
 8009490:	4602      	mov	r2, r0
 8009492:	460b      	mov	r3, r1
 8009494:	4630      	mov	r0, r6
 8009496:	4639      	mov	r1, r7
 8009498:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800949c:	f7f6 ff2c 	bl	80002f8 <__aeabi_dsub>
 80094a0:	f805 6b01 	strb.w	r6, [r5], #1
 80094a4:	9e01      	ldr	r6, [sp, #4]
 80094a6:	9f03      	ldr	r7, [sp, #12]
 80094a8:	1bae      	subs	r6, r5, r6
 80094aa:	42b7      	cmp	r7, r6
 80094ac:	4602      	mov	r2, r0
 80094ae:	460b      	mov	r3, r1
 80094b0:	d135      	bne.n	800951e <_dtoa_r+0x6e6>
 80094b2:	f7f6 ff23 	bl	80002fc <__adddf3>
 80094b6:	4642      	mov	r2, r8
 80094b8:	464b      	mov	r3, r9
 80094ba:	4606      	mov	r6, r0
 80094bc:	460f      	mov	r7, r1
 80094be:	f7f7 fb63 	bl	8000b88 <__aeabi_dcmpgt>
 80094c2:	b9d0      	cbnz	r0, 80094fa <_dtoa_r+0x6c2>
 80094c4:	4642      	mov	r2, r8
 80094c6:	464b      	mov	r3, r9
 80094c8:	4630      	mov	r0, r6
 80094ca:	4639      	mov	r1, r7
 80094cc:	f7f7 fb34 	bl	8000b38 <__aeabi_dcmpeq>
 80094d0:	b110      	cbz	r0, 80094d8 <_dtoa_r+0x6a0>
 80094d2:	f01a 0f01 	tst.w	sl, #1
 80094d6:	d110      	bne.n	80094fa <_dtoa_r+0x6c2>
 80094d8:	4620      	mov	r0, r4
 80094da:	ee18 1a10 	vmov	r1, s16
 80094de:	f000 fb05 	bl	8009aec <_Bfree>
 80094e2:	2300      	movs	r3, #0
 80094e4:	9800      	ldr	r0, [sp, #0]
 80094e6:	702b      	strb	r3, [r5, #0]
 80094e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80094ea:	3001      	adds	r0, #1
 80094ec:	6018      	str	r0, [r3, #0]
 80094ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	f43f acf1 	beq.w	8008ed8 <_dtoa_r+0xa0>
 80094f6:	601d      	str	r5, [r3, #0]
 80094f8:	e4ee      	b.n	8008ed8 <_dtoa_r+0xa0>
 80094fa:	9f00      	ldr	r7, [sp, #0]
 80094fc:	462b      	mov	r3, r5
 80094fe:	461d      	mov	r5, r3
 8009500:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009504:	2a39      	cmp	r2, #57	; 0x39
 8009506:	d106      	bne.n	8009516 <_dtoa_r+0x6de>
 8009508:	9a01      	ldr	r2, [sp, #4]
 800950a:	429a      	cmp	r2, r3
 800950c:	d1f7      	bne.n	80094fe <_dtoa_r+0x6c6>
 800950e:	9901      	ldr	r1, [sp, #4]
 8009510:	2230      	movs	r2, #48	; 0x30
 8009512:	3701      	adds	r7, #1
 8009514:	700a      	strb	r2, [r1, #0]
 8009516:	781a      	ldrb	r2, [r3, #0]
 8009518:	3201      	adds	r2, #1
 800951a:	701a      	strb	r2, [r3, #0]
 800951c:	e790      	b.n	8009440 <_dtoa_r+0x608>
 800951e:	4ba6      	ldr	r3, [pc, #664]	; (80097b8 <_dtoa_r+0x980>)
 8009520:	2200      	movs	r2, #0
 8009522:	f7f7 f8a1 	bl	8000668 <__aeabi_dmul>
 8009526:	2200      	movs	r2, #0
 8009528:	2300      	movs	r3, #0
 800952a:	4606      	mov	r6, r0
 800952c:	460f      	mov	r7, r1
 800952e:	f7f7 fb03 	bl	8000b38 <__aeabi_dcmpeq>
 8009532:	2800      	cmp	r0, #0
 8009534:	d09d      	beq.n	8009472 <_dtoa_r+0x63a>
 8009536:	e7cf      	b.n	80094d8 <_dtoa_r+0x6a0>
 8009538:	9a08      	ldr	r2, [sp, #32]
 800953a:	2a00      	cmp	r2, #0
 800953c:	f000 80d7 	beq.w	80096ee <_dtoa_r+0x8b6>
 8009540:	9a06      	ldr	r2, [sp, #24]
 8009542:	2a01      	cmp	r2, #1
 8009544:	f300 80ba 	bgt.w	80096bc <_dtoa_r+0x884>
 8009548:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800954a:	2a00      	cmp	r2, #0
 800954c:	f000 80b2 	beq.w	80096b4 <_dtoa_r+0x87c>
 8009550:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009554:	9e07      	ldr	r6, [sp, #28]
 8009556:	9d04      	ldr	r5, [sp, #16]
 8009558:	9a04      	ldr	r2, [sp, #16]
 800955a:	441a      	add	r2, r3
 800955c:	9204      	str	r2, [sp, #16]
 800955e:	9a05      	ldr	r2, [sp, #20]
 8009560:	2101      	movs	r1, #1
 8009562:	441a      	add	r2, r3
 8009564:	4620      	mov	r0, r4
 8009566:	9205      	str	r2, [sp, #20]
 8009568:	f000 fb78 	bl	8009c5c <__i2b>
 800956c:	4607      	mov	r7, r0
 800956e:	2d00      	cmp	r5, #0
 8009570:	dd0c      	ble.n	800958c <_dtoa_r+0x754>
 8009572:	9b05      	ldr	r3, [sp, #20]
 8009574:	2b00      	cmp	r3, #0
 8009576:	dd09      	ble.n	800958c <_dtoa_r+0x754>
 8009578:	42ab      	cmp	r3, r5
 800957a:	9a04      	ldr	r2, [sp, #16]
 800957c:	bfa8      	it	ge
 800957e:	462b      	movge	r3, r5
 8009580:	1ad2      	subs	r2, r2, r3
 8009582:	9204      	str	r2, [sp, #16]
 8009584:	9a05      	ldr	r2, [sp, #20]
 8009586:	1aed      	subs	r5, r5, r3
 8009588:	1ad3      	subs	r3, r2, r3
 800958a:	9305      	str	r3, [sp, #20]
 800958c:	9b07      	ldr	r3, [sp, #28]
 800958e:	b31b      	cbz	r3, 80095d8 <_dtoa_r+0x7a0>
 8009590:	9b08      	ldr	r3, [sp, #32]
 8009592:	2b00      	cmp	r3, #0
 8009594:	f000 80af 	beq.w	80096f6 <_dtoa_r+0x8be>
 8009598:	2e00      	cmp	r6, #0
 800959a:	dd13      	ble.n	80095c4 <_dtoa_r+0x78c>
 800959c:	4639      	mov	r1, r7
 800959e:	4632      	mov	r2, r6
 80095a0:	4620      	mov	r0, r4
 80095a2:	f000 fc1b 	bl	8009ddc <__pow5mult>
 80095a6:	ee18 2a10 	vmov	r2, s16
 80095aa:	4601      	mov	r1, r0
 80095ac:	4607      	mov	r7, r0
 80095ae:	4620      	mov	r0, r4
 80095b0:	f000 fb6a 	bl	8009c88 <__multiply>
 80095b4:	ee18 1a10 	vmov	r1, s16
 80095b8:	4680      	mov	r8, r0
 80095ba:	4620      	mov	r0, r4
 80095bc:	f000 fa96 	bl	8009aec <_Bfree>
 80095c0:	ee08 8a10 	vmov	s16, r8
 80095c4:	9b07      	ldr	r3, [sp, #28]
 80095c6:	1b9a      	subs	r2, r3, r6
 80095c8:	d006      	beq.n	80095d8 <_dtoa_r+0x7a0>
 80095ca:	ee18 1a10 	vmov	r1, s16
 80095ce:	4620      	mov	r0, r4
 80095d0:	f000 fc04 	bl	8009ddc <__pow5mult>
 80095d4:	ee08 0a10 	vmov	s16, r0
 80095d8:	2101      	movs	r1, #1
 80095da:	4620      	mov	r0, r4
 80095dc:	f000 fb3e 	bl	8009c5c <__i2b>
 80095e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	4606      	mov	r6, r0
 80095e6:	f340 8088 	ble.w	80096fa <_dtoa_r+0x8c2>
 80095ea:	461a      	mov	r2, r3
 80095ec:	4601      	mov	r1, r0
 80095ee:	4620      	mov	r0, r4
 80095f0:	f000 fbf4 	bl	8009ddc <__pow5mult>
 80095f4:	9b06      	ldr	r3, [sp, #24]
 80095f6:	2b01      	cmp	r3, #1
 80095f8:	4606      	mov	r6, r0
 80095fa:	f340 8081 	ble.w	8009700 <_dtoa_r+0x8c8>
 80095fe:	f04f 0800 	mov.w	r8, #0
 8009602:	6933      	ldr	r3, [r6, #16]
 8009604:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009608:	6918      	ldr	r0, [r3, #16]
 800960a:	f000 fad7 	bl	8009bbc <__hi0bits>
 800960e:	f1c0 0020 	rsb	r0, r0, #32
 8009612:	9b05      	ldr	r3, [sp, #20]
 8009614:	4418      	add	r0, r3
 8009616:	f010 001f 	ands.w	r0, r0, #31
 800961a:	f000 8092 	beq.w	8009742 <_dtoa_r+0x90a>
 800961e:	f1c0 0320 	rsb	r3, r0, #32
 8009622:	2b04      	cmp	r3, #4
 8009624:	f340 808a 	ble.w	800973c <_dtoa_r+0x904>
 8009628:	f1c0 001c 	rsb	r0, r0, #28
 800962c:	9b04      	ldr	r3, [sp, #16]
 800962e:	4403      	add	r3, r0
 8009630:	9304      	str	r3, [sp, #16]
 8009632:	9b05      	ldr	r3, [sp, #20]
 8009634:	4403      	add	r3, r0
 8009636:	4405      	add	r5, r0
 8009638:	9305      	str	r3, [sp, #20]
 800963a:	9b04      	ldr	r3, [sp, #16]
 800963c:	2b00      	cmp	r3, #0
 800963e:	dd07      	ble.n	8009650 <_dtoa_r+0x818>
 8009640:	ee18 1a10 	vmov	r1, s16
 8009644:	461a      	mov	r2, r3
 8009646:	4620      	mov	r0, r4
 8009648:	f000 fc22 	bl	8009e90 <__lshift>
 800964c:	ee08 0a10 	vmov	s16, r0
 8009650:	9b05      	ldr	r3, [sp, #20]
 8009652:	2b00      	cmp	r3, #0
 8009654:	dd05      	ble.n	8009662 <_dtoa_r+0x82a>
 8009656:	4631      	mov	r1, r6
 8009658:	461a      	mov	r2, r3
 800965a:	4620      	mov	r0, r4
 800965c:	f000 fc18 	bl	8009e90 <__lshift>
 8009660:	4606      	mov	r6, r0
 8009662:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009664:	2b00      	cmp	r3, #0
 8009666:	d06e      	beq.n	8009746 <_dtoa_r+0x90e>
 8009668:	ee18 0a10 	vmov	r0, s16
 800966c:	4631      	mov	r1, r6
 800966e:	f000 fc7f 	bl	8009f70 <__mcmp>
 8009672:	2800      	cmp	r0, #0
 8009674:	da67      	bge.n	8009746 <_dtoa_r+0x90e>
 8009676:	9b00      	ldr	r3, [sp, #0]
 8009678:	3b01      	subs	r3, #1
 800967a:	ee18 1a10 	vmov	r1, s16
 800967e:	9300      	str	r3, [sp, #0]
 8009680:	220a      	movs	r2, #10
 8009682:	2300      	movs	r3, #0
 8009684:	4620      	mov	r0, r4
 8009686:	f000 fa53 	bl	8009b30 <__multadd>
 800968a:	9b08      	ldr	r3, [sp, #32]
 800968c:	ee08 0a10 	vmov	s16, r0
 8009690:	2b00      	cmp	r3, #0
 8009692:	f000 81b1 	beq.w	80099f8 <_dtoa_r+0xbc0>
 8009696:	2300      	movs	r3, #0
 8009698:	4639      	mov	r1, r7
 800969a:	220a      	movs	r2, #10
 800969c:	4620      	mov	r0, r4
 800969e:	f000 fa47 	bl	8009b30 <__multadd>
 80096a2:	9b02      	ldr	r3, [sp, #8]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	4607      	mov	r7, r0
 80096a8:	f300 808e 	bgt.w	80097c8 <_dtoa_r+0x990>
 80096ac:	9b06      	ldr	r3, [sp, #24]
 80096ae:	2b02      	cmp	r3, #2
 80096b0:	dc51      	bgt.n	8009756 <_dtoa_r+0x91e>
 80096b2:	e089      	b.n	80097c8 <_dtoa_r+0x990>
 80096b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80096b6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80096ba:	e74b      	b.n	8009554 <_dtoa_r+0x71c>
 80096bc:	9b03      	ldr	r3, [sp, #12]
 80096be:	1e5e      	subs	r6, r3, #1
 80096c0:	9b07      	ldr	r3, [sp, #28]
 80096c2:	42b3      	cmp	r3, r6
 80096c4:	bfbf      	itttt	lt
 80096c6:	9b07      	ldrlt	r3, [sp, #28]
 80096c8:	9607      	strlt	r6, [sp, #28]
 80096ca:	1af2      	sublt	r2, r6, r3
 80096cc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80096ce:	bfb6      	itet	lt
 80096d0:	189b      	addlt	r3, r3, r2
 80096d2:	1b9e      	subge	r6, r3, r6
 80096d4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80096d6:	9b03      	ldr	r3, [sp, #12]
 80096d8:	bfb8      	it	lt
 80096da:	2600      	movlt	r6, #0
 80096dc:	2b00      	cmp	r3, #0
 80096de:	bfb7      	itett	lt
 80096e0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80096e4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80096e8:	1a9d      	sublt	r5, r3, r2
 80096ea:	2300      	movlt	r3, #0
 80096ec:	e734      	b.n	8009558 <_dtoa_r+0x720>
 80096ee:	9e07      	ldr	r6, [sp, #28]
 80096f0:	9d04      	ldr	r5, [sp, #16]
 80096f2:	9f08      	ldr	r7, [sp, #32]
 80096f4:	e73b      	b.n	800956e <_dtoa_r+0x736>
 80096f6:	9a07      	ldr	r2, [sp, #28]
 80096f8:	e767      	b.n	80095ca <_dtoa_r+0x792>
 80096fa:	9b06      	ldr	r3, [sp, #24]
 80096fc:	2b01      	cmp	r3, #1
 80096fe:	dc18      	bgt.n	8009732 <_dtoa_r+0x8fa>
 8009700:	f1ba 0f00 	cmp.w	sl, #0
 8009704:	d115      	bne.n	8009732 <_dtoa_r+0x8fa>
 8009706:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800970a:	b993      	cbnz	r3, 8009732 <_dtoa_r+0x8fa>
 800970c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009710:	0d1b      	lsrs	r3, r3, #20
 8009712:	051b      	lsls	r3, r3, #20
 8009714:	b183      	cbz	r3, 8009738 <_dtoa_r+0x900>
 8009716:	9b04      	ldr	r3, [sp, #16]
 8009718:	3301      	adds	r3, #1
 800971a:	9304      	str	r3, [sp, #16]
 800971c:	9b05      	ldr	r3, [sp, #20]
 800971e:	3301      	adds	r3, #1
 8009720:	9305      	str	r3, [sp, #20]
 8009722:	f04f 0801 	mov.w	r8, #1
 8009726:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009728:	2b00      	cmp	r3, #0
 800972a:	f47f af6a 	bne.w	8009602 <_dtoa_r+0x7ca>
 800972e:	2001      	movs	r0, #1
 8009730:	e76f      	b.n	8009612 <_dtoa_r+0x7da>
 8009732:	f04f 0800 	mov.w	r8, #0
 8009736:	e7f6      	b.n	8009726 <_dtoa_r+0x8ee>
 8009738:	4698      	mov	r8, r3
 800973a:	e7f4      	b.n	8009726 <_dtoa_r+0x8ee>
 800973c:	f43f af7d 	beq.w	800963a <_dtoa_r+0x802>
 8009740:	4618      	mov	r0, r3
 8009742:	301c      	adds	r0, #28
 8009744:	e772      	b.n	800962c <_dtoa_r+0x7f4>
 8009746:	9b03      	ldr	r3, [sp, #12]
 8009748:	2b00      	cmp	r3, #0
 800974a:	dc37      	bgt.n	80097bc <_dtoa_r+0x984>
 800974c:	9b06      	ldr	r3, [sp, #24]
 800974e:	2b02      	cmp	r3, #2
 8009750:	dd34      	ble.n	80097bc <_dtoa_r+0x984>
 8009752:	9b03      	ldr	r3, [sp, #12]
 8009754:	9302      	str	r3, [sp, #8]
 8009756:	9b02      	ldr	r3, [sp, #8]
 8009758:	b96b      	cbnz	r3, 8009776 <_dtoa_r+0x93e>
 800975a:	4631      	mov	r1, r6
 800975c:	2205      	movs	r2, #5
 800975e:	4620      	mov	r0, r4
 8009760:	f000 f9e6 	bl	8009b30 <__multadd>
 8009764:	4601      	mov	r1, r0
 8009766:	4606      	mov	r6, r0
 8009768:	ee18 0a10 	vmov	r0, s16
 800976c:	f000 fc00 	bl	8009f70 <__mcmp>
 8009770:	2800      	cmp	r0, #0
 8009772:	f73f adbb 	bgt.w	80092ec <_dtoa_r+0x4b4>
 8009776:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009778:	9d01      	ldr	r5, [sp, #4]
 800977a:	43db      	mvns	r3, r3
 800977c:	9300      	str	r3, [sp, #0]
 800977e:	f04f 0800 	mov.w	r8, #0
 8009782:	4631      	mov	r1, r6
 8009784:	4620      	mov	r0, r4
 8009786:	f000 f9b1 	bl	8009aec <_Bfree>
 800978a:	2f00      	cmp	r7, #0
 800978c:	f43f aea4 	beq.w	80094d8 <_dtoa_r+0x6a0>
 8009790:	f1b8 0f00 	cmp.w	r8, #0
 8009794:	d005      	beq.n	80097a2 <_dtoa_r+0x96a>
 8009796:	45b8      	cmp	r8, r7
 8009798:	d003      	beq.n	80097a2 <_dtoa_r+0x96a>
 800979a:	4641      	mov	r1, r8
 800979c:	4620      	mov	r0, r4
 800979e:	f000 f9a5 	bl	8009aec <_Bfree>
 80097a2:	4639      	mov	r1, r7
 80097a4:	4620      	mov	r0, r4
 80097a6:	f000 f9a1 	bl	8009aec <_Bfree>
 80097aa:	e695      	b.n	80094d8 <_dtoa_r+0x6a0>
 80097ac:	2600      	movs	r6, #0
 80097ae:	4637      	mov	r7, r6
 80097b0:	e7e1      	b.n	8009776 <_dtoa_r+0x93e>
 80097b2:	9700      	str	r7, [sp, #0]
 80097b4:	4637      	mov	r7, r6
 80097b6:	e599      	b.n	80092ec <_dtoa_r+0x4b4>
 80097b8:	40240000 	.word	0x40240000
 80097bc:	9b08      	ldr	r3, [sp, #32]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	f000 80ca 	beq.w	8009958 <_dtoa_r+0xb20>
 80097c4:	9b03      	ldr	r3, [sp, #12]
 80097c6:	9302      	str	r3, [sp, #8]
 80097c8:	2d00      	cmp	r5, #0
 80097ca:	dd05      	ble.n	80097d8 <_dtoa_r+0x9a0>
 80097cc:	4639      	mov	r1, r7
 80097ce:	462a      	mov	r2, r5
 80097d0:	4620      	mov	r0, r4
 80097d2:	f000 fb5d 	bl	8009e90 <__lshift>
 80097d6:	4607      	mov	r7, r0
 80097d8:	f1b8 0f00 	cmp.w	r8, #0
 80097dc:	d05b      	beq.n	8009896 <_dtoa_r+0xa5e>
 80097de:	6879      	ldr	r1, [r7, #4]
 80097e0:	4620      	mov	r0, r4
 80097e2:	f000 f943 	bl	8009a6c <_Balloc>
 80097e6:	4605      	mov	r5, r0
 80097e8:	b928      	cbnz	r0, 80097f6 <_dtoa_r+0x9be>
 80097ea:	4b87      	ldr	r3, [pc, #540]	; (8009a08 <_dtoa_r+0xbd0>)
 80097ec:	4602      	mov	r2, r0
 80097ee:	f240 21ea 	movw	r1, #746	; 0x2ea
 80097f2:	f7ff bb3b 	b.w	8008e6c <_dtoa_r+0x34>
 80097f6:	693a      	ldr	r2, [r7, #16]
 80097f8:	3202      	adds	r2, #2
 80097fa:	0092      	lsls	r2, r2, #2
 80097fc:	f107 010c 	add.w	r1, r7, #12
 8009800:	300c      	adds	r0, #12
 8009802:	f000 f925 	bl	8009a50 <memcpy>
 8009806:	2201      	movs	r2, #1
 8009808:	4629      	mov	r1, r5
 800980a:	4620      	mov	r0, r4
 800980c:	f000 fb40 	bl	8009e90 <__lshift>
 8009810:	9b01      	ldr	r3, [sp, #4]
 8009812:	f103 0901 	add.w	r9, r3, #1
 8009816:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800981a:	4413      	add	r3, r2
 800981c:	9305      	str	r3, [sp, #20]
 800981e:	f00a 0301 	and.w	r3, sl, #1
 8009822:	46b8      	mov	r8, r7
 8009824:	9304      	str	r3, [sp, #16]
 8009826:	4607      	mov	r7, r0
 8009828:	4631      	mov	r1, r6
 800982a:	ee18 0a10 	vmov	r0, s16
 800982e:	f7ff fa77 	bl	8008d20 <quorem>
 8009832:	4641      	mov	r1, r8
 8009834:	9002      	str	r0, [sp, #8]
 8009836:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800983a:	ee18 0a10 	vmov	r0, s16
 800983e:	f000 fb97 	bl	8009f70 <__mcmp>
 8009842:	463a      	mov	r2, r7
 8009844:	9003      	str	r0, [sp, #12]
 8009846:	4631      	mov	r1, r6
 8009848:	4620      	mov	r0, r4
 800984a:	f000 fbad 	bl	8009fa8 <__mdiff>
 800984e:	68c2      	ldr	r2, [r0, #12]
 8009850:	f109 3bff 	add.w	fp, r9, #4294967295
 8009854:	4605      	mov	r5, r0
 8009856:	bb02      	cbnz	r2, 800989a <_dtoa_r+0xa62>
 8009858:	4601      	mov	r1, r0
 800985a:	ee18 0a10 	vmov	r0, s16
 800985e:	f000 fb87 	bl	8009f70 <__mcmp>
 8009862:	4602      	mov	r2, r0
 8009864:	4629      	mov	r1, r5
 8009866:	4620      	mov	r0, r4
 8009868:	9207      	str	r2, [sp, #28]
 800986a:	f000 f93f 	bl	8009aec <_Bfree>
 800986e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8009872:	ea43 0102 	orr.w	r1, r3, r2
 8009876:	9b04      	ldr	r3, [sp, #16]
 8009878:	430b      	orrs	r3, r1
 800987a:	464d      	mov	r5, r9
 800987c:	d10f      	bne.n	800989e <_dtoa_r+0xa66>
 800987e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009882:	d02a      	beq.n	80098da <_dtoa_r+0xaa2>
 8009884:	9b03      	ldr	r3, [sp, #12]
 8009886:	2b00      	cmp	r3, #0
 8009888:	dd02      	ble.n	8009890 <_dtoa_r+0xa58>
 800988a:	9b02      	ldr	r3, [sp, #8]
 800988c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009890:	f88b a000 	strb.w	sl, [fp]
 8009894:	e775      	b.n	8009782 <_dtoa_r+0x94a>
 8009896:	4638      	mov	r0, r7
 8009898:	e7ba      	b.n	8009810 <_dtoa_r+0x9d8>
 800989a:	2201      	movs	r2, #1
 800989c:	e7e2      	b.n	8009864 <_dtoa_r+0xa2c>
 800989e:	9b03      	ldr	r3, [sp, #12]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	db04      	blt.n	80098ae <_dtoa_r+0xa76>
 80098a4:	9906      	ldr	r1, [sp, #24]
 80098a6:	430b      	orrs	r3, r1
 80098a8:	9904      	ldr	r1, [sp, #16]
 80098aa:	430b      	orrs	r3, r1
 80098ac:	d122      	bne.n	80098f4 <_dtoa_r+0xabc>
 80098ae:	2a00      	cmp	r2, #0
 80098b0:	ddee      	ble.n	8009890 <_dtoa_r+0xa58>
 80098b2:	ee18 1a10 	vmov	r1, s16
 80098b6:	2201      	movs	r2, #1
 80098b8:	4620      	mov	r0, r4
 80098ba:	f000 fae9 	bl	8009e90 <__lshift>
 80098be:	4631      	mov	r1, r6
 80098c0:	ee08 0a10 	vmov	s16, r0
 80098c4:	f000 fb54 	bl	8009f70 <__mcmp>
 80098c8:	2800      	cmp	r0, #0
 80098ca:	dc03      	bgt.n	80098d4 <_dtoa_r+0xa9c>
 80098cc:	d1e0      	bne.n	8009890 <_dtoa_r+0xa58>
 80098ce:	f01a 0f01 	tst.w	sl, #1
 80098d2:	d0dd      	beq.n	8009890 <_dtoa_r+0xa58>
 80098d4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80098d8:	d1d7      	bne.n	800988a <_dtoa_r+0xa52>
 80098da:	2339      	movs	r3, #57	; 0x39
 80098dc:	f88b 3000 	strb.w	r3, [fp]
 80098e0:	462b      	mov	r3, r5
 80098e2:	461d      	mov	r5, r3
 80098e4:	3b01      	subs	r3, #1
 80098e6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80098ea:	2a39      	cmp	r2, #57	; 0x39
 80098ec:	d071      	beq.n	80099d2 <_dtoa_r+0xb9a>
 80098ee:	3201      	adds	r2, #1
 80098f0:	701a      	strb	r2, [r3, #0]
 80098f2:	e746      	b.n	8009782 <_dtoa_r+0x94a>
 80098f4:	2a00      	cmp	r2, #0
 80098f6:	dd07      	ble.n	8009908 <_dtoa_r+0xad0>
 80098f8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80098fc:	d0ed      	beq.n	80098da <_dtoa_r+0xaa2>
 80098fe:	f10a 0301 	add.w	r3, sl, #1
 8009902:	f88b 3000 	strb.w	r3, [fp]
 8009906:	e73c      	b.n	8009782 <_dtoa_r+0x94a>
 8009908:	9b05      	ldr	r3, [sp, #20]
 800990a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800990e:	4599      	cmp	r9, r3
 8009910:	d047      	beq.n	80099a2 <_dtoa_r+0xb6a>
 8009912:	ee18 1a10 	vmov	r1, s16
 8009916:	2300      	movs	r3, #0
 8009918:	220a      	movs	r2, #10
 800991a:	4620      	mov	r0, r4
 800991c:	f000 f908 	bl	8009b30 <__multadd>
 8009920:	45b8      	cmp	r8, r7
 8009922:	ee08 0a10 	vmov	s16, r0
 8009926:	f04f 0300 	mov.w	r3, #0
 800992a:	f04f 020a 	mov.w	r2, #10
 800992e:	4641      	mov	r1, r8
 8009930:	4620      	mov	r0, r4
 8009932:	d106      	bne.n	8009942 <_dtoa_r+0xb0a>
 8009934:	f000 f8fc 	bl	8009b30 <__multadd>
 8009938:	4680      	mov	r8, r0
 800993a:	4607      	mov	r7, r0
 800993c:	f109 0901 	add.w	r9, r9, #1
 8009940:	e772      	b.n	8009828 <_dtoa_r+0x9f0>
 8009942:	f000 f8f5 	bl	8009b30 <__multadd>
 8009946:	4639      	mov	r1, r7
 8009948:	4680      	mov	r8, r0
 800994a:	2300      	movs	r3, #0
 800994c:	220a      	movs	r2, #10
 800994e:	4620      	mov	r0, r4
 8009950:	f000 f8ee 	bl	8009b30 <__multadd>
 8009954:	4607      	mov	r7, r0
 8009956:	e7f1      	b.n	800993c <_dtoa_r+0xb04>
 8009958:	9b03      	ldr	r3, [sp, #12]
 800995a:	9302      	str	r3, [sp, #8]
 800995c:	9d01      	ldr	r5, [sp, #4]
 800995e:	ee18 0a10 	vmov	r0, s16
 8009962:	4631      	mov	r1, r6
 8009964:	f7ff f9dc 	bl	8008d20 <quorem>
 8009968:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800996c:	9b01      	ldr	r3, [sp, #4]
 800996e:	f805 ab01 	strb.w	sl, [r5], #1
 8009972:	1aea      	subs	r2, r5, r3
 8009974:	9b02      	ldr	r3, [sp, #8]
 8009976:	4293      	cmp	r3, r2
 8009978:	dd09      	ble.n	800998e <_dtoa_r+0xb56>
 800997a:	ee18 1a10 	vmov	r1, s16
 800997e:	2300      	movs	r3, #0
 8009980:	220a      	movs	r2, #10
 8009982:	4620      	mov	r0, r4
 8009984:	f000 f8d4 	bl	8009b30 <__multadd>
 8009988:	ee08 0a10 	vmov	s16, r0
 800998c:	e7e7      	b.n	800995e <_dtoa_r+0xb26>
 800998e:	9b02      	ldr	r3, [sp, #8]
 8009990:	2b00      	cmp	r3, #0
 8009992:	bfc8      	it	gt
 8009994:	461d      	movgt	r5, r3
 8009996:	9b01      	ldr	r3, [sp, #4]
 8009998:	bfd8      	it	le
 800999a:	2501      	movle	r5, #1
 800999c:	441d      	add	r5, r3
 800999e:	f04f 0800 	mov.w	r8, #0
 80099a2:	ee18 1a10 	vmov	r1, s16
 80099a6:	2201      	movs	r2, #1
 80099a8:	4620      	mov	r0, r4
 80099aa:	f000 fa71 	bl	8009e90 <__lshift>
 80099ae:	4631      	mov	r1, r6
 80099b0:	ee08 0a10 	vmov	s16, r0
 80099b4:	f000 fadc 	bl	8009f70 <__mcmp>
 80099b8:	2800      	cmp	r0, #0
 80099ba:	dc91      	bgt.n	80098e0 <_dtoa_r+0xaa8>
 80099bc:	d102      	bne.n	80099c4 <_dtoa_r+0xb8c>
 80099be:	f01a 0f01 	tst.w	sl, #1
 80099c2:	d18d      	bne.n	80098e0 <_dtoa_r+0xaa8>
 80099c4:	462b      	mov	r3, r5
 80099c6:	461d      	mov	r5, r3
 80099c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80099cc:	2a30      	cmp	r2, #48	; 0x30
 80099ce:	d0fa      	beq.n	80099c6 <_dtoa_r+0xb8e>
 80099d0:	e6d7      	b.n	8009782 <_dtoa_r+0x94a>
 80099d2:	9a01      	ldr	r2, [sp, #4]
 80099d4:	429a      	cmp	r2, r3
 80099d6:	d184      	bne.n	80098e2 <_dtoa_r+0xaaa>
 80099d8:	9b00      	ldr	r3, [sp, #0]
 80099da:	3301      	adds	r3, #1
 80099dc:	9300      	str	r3, [sp, #0]
 80099de:	2331      	movs	r3, #49	; 0x31
 80099e0:	7013      	strb	r3, [r2, #0]
 80099e2:	e6ce      	b.n	8009782 <_dtoa_r+0x94a>
 80099e4:	4b09      	ldr	r3, [pc, #36]	; (8009a0c <_dtoa_r+0xbd4>)
 80099e6:	f7ff ba95 	b.w	8008f14 <_dtoa_r+0xdc>
 80099ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	f47f aa6e 	bne.w	8008ece <_dtoa_r+0x96>
 80099f2:	4b07      	ldr	r3, [pc, #28]	; (8009a10 <_dtoa_r+0xbd8>)
 80099f4:	f7ff ba8e 	b.w	8008f14 <_dtoa_r+0xdc>
 80099f8:	9b02      	ldr	r3, [sp, #8]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	dcae      	bgt.n	800995c <_dtoa_r+0xb24>
 80099fe:	9b06      	ldr	r3, [sp, #24]
 8009a00:	2b02      	cmp	r3, #2
 8009a02:	f73f aea8 	bgt.w	8009756 <_dtoa_r+0x91e>
 8009a06:	e7a9      	b.n	800995c <_dtoa_r+0xb24>
 8009a08:	0800b4dd 	.word	0x0800b4dd
 8009a0c:	0800b2a0 	.word	0x0800b2a0
 8009a10:	0800b475 	.word	0x0800b475

08009a14 <fiprintf>:
 8009a14:	b40e      	push	{r1, r2, r3}
 8009a16:	b503      	push	{r0, r1, lr}
 8009a18:	4601      	mov	r1, r0
 8009a1a:	ab03      	add	r3, sp, #12
 8009a1c:	4805      	ldr	r0, [pc, #20]	; (8009a34 <fiprintf+0x20>)
 8009a1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a22:	6800      	ldr	r0, [r0, #0]
 8009a24:	9301      	str	r3, [sp, #4]
 8009a26:	f000 fe21 	bl	800a66c <_vfiprintf_r>
 8009a2a:	b002      	add	sp, #8
 8009a2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009a30:	b003      	add	sp, #12
 8009a32:	4770      	bx	lr
 8009a34:	20000128 	.word	0x20000128

08009a38 <_localeconv_r>:
 8009a38:	4800      	ldr	r0, [pc, #0]	; (8009a3c <_localeconv_r+0x4>)
 8009a3a:	4770      	bx	lr
 8009a3c:	2000027c 	.word	0x2000027c

08009a40 <malloc>:
 8009a40:	4b02      	ldr	r3, [pc, #8]	; (8009a4c <malloc+0xc>)
 8009a42:	4601      	mov	r1, r0
 8009a44:	6818      	ldr	r0, [r3, #0]
 8009a46:	f000 bc17 	b.w	800a278 <_malloc_r>
 8009a4a:	bf00      	nop
 8009a4c:	20000128 	.word	0x20000128

08009a50 <memcpy>:
 8009a50:	440a      	add	r2, r1
 8009a52:	4291      	cmp	r1, r2
 8009a54:	f100 33ff 	add.w	r3, r0, #4294967295
 8009a58:	d100      	bne.n	8009a5c <memcpy+0xc>
 8009a5a:	4770      	bx	lr
 8009a5c:	b510      	push	{r4, lr}
 8009a5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009a62:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009a66:	4291      	cmp	r1, r2
 8009a68:	d1f9      	bne.n	8009a5e <memcpy+0xe>
 8009a6a:	bd10      	pop	{r4, pc}

08009a6c <_Balloc>:
 8009a6c:	b570      	push	{r4, r5, r6, lr}
 8009a6e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009a70:	4604      	mov	r4, r0
 8009a72:	460d      	mov	r5, r1
 8009a74:	b976      	cbnz	r6, 8009a94 <_Balloc+0x28>
 8009a76:	2010      	movs	r0, #16
 8009a78:	f7ff ffe2 	bl	8009a40 <malloc>
 8009a7c:	4602      	mov	r2, r0
 8009a7e:	6260      	str	r0, [r4, #36]	; 0x24
 8009a80:	b920      	cbnz	r0, 8009a8c <_Balloc+0x20>
 8009a82:	4b18      	ldr	r3, [pc, #96]	; (8009ae4 <_Balloc+0x78>)
 8009a84:	4818      	ldr	r0, [pc, #96]	; (8009ae8 <_Balloc+0x7c>)
 8009a86:	2166      	movs	r1, #102	; 0x66
 8009a88:	f7ff f92c 	bl	8008ce4 <__assert_func>
 8009a8c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009a90:	6006      	str	r6, [r0, #0]
 8009a92:	60c6      	str	r6, [r0, #12]
 8009a94:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009a96:	68f3      	ldr	r3, [r6, #12]
 8009a98:	b183      	cbz	r3, 8009abc <_Balloc+0x50>
 8009a9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a9c:	68db      	ldr	r3, [r3, #12]
 8009a9e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009aa2:	b9b8      	cbnz	r0, 8009ad4 <_Balloc+0x68>
 8009aa4:	2101      	movs	r1, #1
 8009aa6:	fa01 f605 	lsl.w	r6, r1, r5
 8009aaa:	1d72      	adds	r2, r6, #5
 8009aac:	0092      	lsls	r2, r2, #2
 8009aae:	4620      	mov	r0, r4
 8009ab0:	f000 fb60 	bl	800a174 <_calloc_r>
 8009ab4:	b160      	cbz	r0, 8009ad0 <_Balloc+0x64>
 8009ab6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009aba:	e00e      	b.n	8009ada <_Balloc+0x6e>
 8009abc:	2221      	movs	r2, #33	; 0x21
 8009abe:	2104      	movs	r1, #4
 8009ac0:	4620      	mov	r0, r4
 8009ac2:	f000 fb57 	bl	800a174 <_calloc_r>
 8009ac6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009ac8:	60f0      	str	r0, [r6, #12]
 8009aca:	68db      	ldr	r3, [r3, #12]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d1e4      	bne.n	8009a9a <_Balloc+0x2e>
 8009ad0:	2000      	movs	r0, #0
 8009ad2:	bd70      	pop	{r4, r5, r6, pc}
 8009ad4:	6802      	ldr	r2, [r0, #0]
 8009ad6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009ada:	2300      	movs	r3, #0
 8009adc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009ae0:	e7f7      	b.n	8009ad2 <_Balloc+0x66>
 8009ae2:	bf00      	nop
 8009ae4:	0800b2c4 	.word	0x0800b2c4
 8009ae8:	0800b4ee 	.word	0x0800b4ee

08009aec <_Bfree>:
 8009aec:	b570      	push	{r4, r5, r6, lr}
 8009aee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009af0:	4605      	mov	r5, r0
 8009af2:	460c      	mov	r4, r1
 8009af4:	b976      	cbnz	r6, 8009b14 <_Bfree+0x28>
 8009af6:	2010      	movs	r0, #16
 8009af8:	f7ff ffa2 	bl	8009a40 <malloc>
 8009afc:	4602      	mov	r2, r0
 8009afe:	6268      	str	r0, [r5, #36]	; 0x24
 8009b00:	b920      	cbnz	r0, 8009b0c <_Bfree+0x20>
 8009b02:	4b09      	ldr	r3, [pc, #36]	; (8009b28 <_Bfree+0x3c>)
 8009b04:	4809      	ldr	r0, [pc, #36]	; (8009b2c <_Bfree+0x40>)
 8009b06:	218a      	movs	r1, #138	; 0x8a
 8009b08:	f7ff f8ec 	bl	8008ce4 <__assert_func>
 8009b0c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009b10:	6006      	str	r6, [r0, #0]
 8009b12:	60c6      	str	r6, [r0, #12]
 8009b14:	b13c      	cbz	r4, 8009b26 <_Bfree+0x3a>
 8009b16:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009b18:	6862      	ldr	r2, [r4, #4]
 8009b1a:	68db      	ldr	r3, [r3, #12]
 8009b1c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009b20:	6021      	str	r1, [r4, #0]
 8009b22:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009b26:	bd70      	pop	{r4, r5, r6, pc}
 8009b28:	0800b2c4 	.word	0x0800b2c4
 8009b2c:	0800b4ee 	.word	0x0800b4ee

08009b30 <__multadd>:
 8009b30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b34:	690d      	ldr	r5, [r1, #16]
 8009b36:	4607      	mov	r7, r0
 8009b38:	460c      	mov	r4, r1
 8009b3a:	461e      	mov	r6, r3
 8009b3c:	f101 0c14 	add.w	ip, r1, #20
 8009b40:	2000      	movs	r0, #0
 8009b42:	f8dc 3000 	ldr.w	r3, [ip]
 8009b46:	b299      	uxth	r1, r3
 8009b48:	fb02 6101 	mla	r1, r2, r1, r6
 8009b4c:	0c1e      	lsrs	r6, r3, #16
 8009b4e:	0c0b      	lsrs	r3, r1, #16
 8009b50:	fb02 3306 	mla	r3, r2, r6, r3
 8009b54:	b289      	uxth	r1, r1
 8009b56:	3001      	adds	r0, #1
 8009b58:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009b5c:	4285      	cmp	r5, r0
 8009b5e:	f84c 1b04 	str.w	r1, [ip], #4
 8009b62:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009b66:	dcec      	bgt.n	8009b42 <__multadd+0x12>
 8009b68:	b30e      	cbz	r6, 8009bae <__multadd+0x7e>
 8009b6a:	68a3      	ldr	r3, [r4, #8]
 8009b6c:	42ab      	cmp	r3, r5
 8009b6e:	dc19      	bgt.n	8009ba4 <__multadd+0x74>
 8009b70:	6861      	ldr	r1, [r4, #4]
 8009b72:	4638      	mov	r0, r7
 8009b74:	3101      	adds	r1, #1
 8009b76:	f7ff ff79 	bl	8009a6c <_Balloc>
 8009b7a:	4680      	mov	r8, r0
 8009b7c:	b928      	cbnz	r0, 8009b8a <__multadd+0x5a>
 8009b7e:	4602      	mov	r2, r0
 8009b80:	4b0c      	ldr	r3, [pc, #48]	; (8009bb4 <__multadd+0x84>)
 8009b82:	480d      	ldr	r0, [pc, #52]	; (8009bb8 <__multadd+0x88>)
 8009b84:	21b5      	movs	r1, #181	; 0xb5
 8009b86:	f7ff f8ad 	bl	8008ce4 <__assert_func>
 8009b8a:	6922      	ldr	r2, [r4, #16]
 8009b8c:	3202      	adds	r2, #2
 8009b8e:	f104 010c 	add.w	r1, r4, #12
 8009b92:	0092      	lsls	r2, r2, #2
 8009b94:	300c      	adds	r0, #12
 8009b96:	f7ff ff5b 	bl	8009a50 <memcpy>
 8009b9a:	4621      	mov	r1, r4
 8009b9c:	4638      	mov	r0, r7
 8009b9e:	f7ff ffa5 	bl	8009aec <_Bfree>
 8009ba2:	4644      	mov	r4, r8
 8009ba4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009ba8:	3501      	adds	r5, #1
 8009baa:	615e      	str	r6, [r3, #20]
 8009bac:	6125      	str	r5, [r4, #16]
 8009bae:	4620      	mov	r0, r4
 8009bb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009bb4:	0800b4dd 	.word	0x0800b4dd
 8009bb8:	0800b4ee 	.word	0x0800b4ee

08009bbc <__hi0bits>:
 8009bbc:	0c03      	lsrs	r3, r0, #16
 8009bbe:	041b      	lsls	r3, r3, #16
 8009bc0:	b9d3      	cbnz	r3, 8009bf8 <__hi0bits+0x3c>
 8009bc2:	0400      	lsls	r0, r0, #16
 8009bc4:	2310      	movs	r3, #16
 8009bc6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009bca:	bf04      	itt	eq
 8009bcc:	0200      	lsleq	r0, r0, #8
 8009bce:	3308      	addeq	r3, #8
 8009bd0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009bd4:	bf04      	itt	eq
 8009bd6:	0100      	lsleq	r0, r0, #4
 8009bd8:	3304      	addeq	r3, #4
 8009bda:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009bde:	bf04      	itt	eq
 8009be0:	0080      	lsleq	r0, r0, #2
 8009be2:	3302      	addeq	r3, #2
 8009be4:	2800      	cmp	r0, #0
 8009be6:	db05      	blt.n	8009bf4 <__hi0bits+0x38>
 8009be8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009bec:	f103 0301 	add.w	r3, r3, #1
 8009bf0:	bf08      	it	eq
 8009bf2:	2320      	moveq	r3, #32
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	4770      	bx	lr
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	e7e4      	b.n	8009bc6 <__hi0bits+0xa>

08009bfc <__lo0bits>:
 8009bfc:	6803      	ldr	r3, [r0, #0]
 8009bfe:	f013 0207 	ands.w	r2, r3, #7
 8009c02:	4601      	mov	r1, r0
 8009c04:	d00b      	beq.n	8009c1e <__lo0bits+0x22>
 8009c06:	07da      	lsls	r2, r3, #31
 8009c08:	d423      	bmi.n	8009c52 <__lo0bits+0x56>
 8009c0a:	0798      	lsls	r0, r3, #30
 8009c0c:	bf49      	itett	mi
 8009c0e:	085b      	lsrmi	r3, r3, #1
 8009c10:	089b      	lsrpl	r3, r3, #2
 8009c12:	2001      	movmi	r0, #1
 8009c14:	600b      	strmi	r3, [r1, #0]
 8009c16:	bf5c      	itt	pl
 8009c18:	600b      	strpl	r3, [r1, #0]
 8009c1a:	2002      	movpl	r0, #2
 8009c1c:	4770      	bx	lr
 8009c1e:	b298      	uxth	r0, r3
 8009c20:	b9a8      	cbnz	r0, 8009c4e <__lo0bits+0x52>
 8009c22:	0c1b      	lsrs	r3, r3, #16
 8009c24:	2010      	movs	r0, #16
 8009c26:	b2da      	uxtb	r2, r3
 8009c28:	b90a      	cbnz	r2, 8009c2e <__lo0bits+0x32>
 8009c2a:	3008      	adds	r0, #8
 8009c2c:	0a1b      	lsrs	r3, r3, #8
 8009c2e:	071a      	lsls	r2, r3, #28
 8009c30:	bf04      	itt	eq
 8009c32:	091b      	lsreq	r3, r3, #4
 8009c34:	3004      	addeq	r0, #4
 8009c36:	079a      	lsls	r2, r3, #30
 8009c38:	bf04      	itt	eq
 8009c3a:	089b      	lsreq	r3, r3, #2
 8009c3c:	3002      	addeq	r0, #2
 8009c3e:	07da      	lsls	r2, r3, #31
 8009c40:	d403      	bmi.n	8009c4a <__lo0bits+0x4e>
 8009c42:	085b      	lsrs	r3, r3, #1
 8009c44:	f100 0001 	add.w	r0, r0, #1
 8009c48:	d005      	beq.n	8009c56 <__lo0bits+0x5a>
 8009c4a:	600b      	str	r3, [r1, #0]
 8009c4c:	4770      	bx	lr
 8009c4e:	4610      	mov	r0, r2
 8009c50:	e7e9      	b.n	8009c26 <__lo0bits+0x2a>
 8009c52:	2000      	movs	r0, #0
 8009c54:	4770      	bx	lr
 8009c56:	2020      	movs	r0, #32
 8009c58:	4770      	bx	lr
	...

08009c5c <__i2b>:
 8009c5c:	b510      	push	{r4, lr}
 8009c5e:	460c      	mov	r4, r1
 8009c60:	2101      	movs	r1, #1
 8009c62:	f7ff ff03 	bl	8009a6c <_Balloc>
 8009c66:	4602      	mov	r2, r0
 8009c68:	b928      	cbnz	r0, 8009c76 <__i2b+0x1a>
 8009c6a:	4b05      	ldr	r3, [pc, #20]	; (8009c80 <__i2b+0x24>)
 8009c6c:	4805      	ldr	r0, [pc, #20]	; (8009c84 <__i2b+0x28>)
 8009c6e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009c72:	f7ff f837 	bl	8008ce4 <__assert_func>
 8009c76:	2301      	movs	r3, #1
 8009c78:	6144      	str	r4, [r0, #20]
 8009c7a:	6103      	str	r3, [r0, #16]
 8009c7c:	bd10      	pop	{r4, pc}
 8009c7e:	bf00      	nop
 8009c80:	0800b4dd 	.word	0x0800b4dd
 8009c84:	0800b4ee 	.word	0x0800b4ee

08009c88 <__multiply>:
 8009c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c8c:	4691      	mov	r9, r2
 8009c8e:	690a      	ldr	r2, [r1, #16]
 8009c90:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009c94:	429a      	cmp	r2, r3
 8009c96:	bfb8      	it	lt
 8009c98:	460b      	movlt	r3, r1
 8009c9a:	460c      	mov	r4, r1
 8009c9c:	bfbc      	itt	lt
 8009c9e:	464c      	movlt	r4, r9
 8009ca0:	4699      	movlt	r9, r3
 8009ca2:	6927      	ldr	r7, [r4, #16]
 8009ca4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009ca8:	68a3      	ldr	r3, [r4, #8]
 8009caa:	6861      	ldr	r1, [r4, #4]
 8009cac:	eb07 060a 	add.w	r6, r7, sl
 8009cb0:	42b3      	cmp	r3, r6
 8009cb2:	b085      	sub	sp, #20
 8009cb4:	bfb8      	it	lt
 8009cb6:	3101      	addlt	r1, #1
 8009cb8:	f7ff fed8 	bl	8009a6c <_Balloc>
 8009cbc:	b930      	cbnz	r0, 8009ccc <__multiply+0x44>
 8009cbe:	4602      	mov	r2, r0
 8009cc0:	4b44      	ldr	r3, [pc, #272]	; (8009dd4 <__multiply+0x14c>)
 8009cc2:	4845      	ldr	r0, [pc, #276]	; (8009dd8 <__multiply+0x150>)
 8009cc4:	f240 115d 	movw	r1, #349	; 0x15d
 8009cc8:	f7ff f80c 	bl	8008ce4 <__assert_func>
 8009ccc:	f100 0514 	add.w	r5, r0, #20
 8009cd0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009cd4:	462b      	mov	r3, r5
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	4543      	cmp	r3, r8
 8009cda:	d321      	bcc.n	8009d20 <__multiply+0x98>
 8009cdc:	f104 0314 	add.w	r3, r4, #20
 8009ce0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009ce4:	f109 0314 	add.w	r3, r9, #20
 8009ce8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009cec:	9202      	str	r2, [sp, #8]
 8009cee:	1b3a      	subs	r2, r7, r4
 8009cf0:	3a15      	subs	r2, #21
 8009cf2:	f022 0203 	bic.w	r2, r2, #3
 8009cf6:	3204      	adds	r2, #4
 8009cf8:	f104 0115 	add.w	r1, r4, #21
 8009cfc:	428f      	cmp	r7, r1
 8009cfe:	bf38      	it	cc
 8009d00:	2204      	movcc	r2, #4
 8009d02:	9201      	str	r2, [sp, #4]
 8009d04:	9a02      	ldr	r2, [sp, #8]
 8009d06:	9303      	str	r3, [sp, #12]
 8009d08:	429a      	cmp	r2, r3
 8009d0a:	d80c      	bhi.n	8009d26 <__multiply+0x9e>
 8009d0c:	2e00      	cmp	r6, #0
 8009d0e:	dd03      	ble.n	8009d18 <__multiply+0x90>
 8009d10:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d05a      	beq.n	8009dce <__multiply+0x146>
 8009d18:	6106      	str	r6, [r0, #16]
 8009d1a:	b005      	add	sp, #20
 8009d1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d20:	f843 2b04 	str.w	r2, [r3], #4
 8009d24:	e7d8      	b.n	8009cd8 <__multiply+0x50>
 8009d26:	f8b3 a000 	ldrh.w	sl, [r3]
 8009d2a:	f1ba 0f00 	cmp.w	sl, #0
 8009d2e:	d024      	beq.n	8009d7a <__multiply+0xf2>
 8009d30:	f104 0e14 	add.w	lr, r4, #20
 8009d34:	46a9      	mov	r9, r5
 8009d36:	f04f 0c00 	mov.w	ip, #0
 8009d3a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009d3e:	f8d9 1000 	ldr.w	r1, [r9]
 8009d42:	fa1f fb82 	uxth.w	fp, r2
 8009d46:	b289      	uxth	r1, r1
 8009d48:	fb0a 110b 	mla	r1, sl, fp, r1
 8009d4c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009d50:	f8d9 2000 	ldr.w	r2, [r9]
 8009d54:	4461      	add	r1, ip
 8009d56:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009d5a:	fb0a c20b 	mla	r2, sl, fp, ip
 8009d5e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009d62:	b289      	uxth	r1, r1
 8009d64:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009d68:	4577      	cmp	r7, lr
 8009d6a:	f849 1b04 	str.w	r1, [r9], #4
 8009d6e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009d72:	d8e2      	bhi.n	8009d3a <__multiply+0xb2>
 8009d74:	9a01      	ldr	r2, [sp, #4]
 8009d76:	f845 c002 	str.w	ip, [r5, r2]
 8009d7a:	9a03      	ldr	r2, [sp, #12]
 8009d7c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009d80:	3304      	adds	r3, #4
 8009d82:	f1b9 0f00 	cmp.w	r9, #0
 8009d86:	d020      	beq.n	8009dca <__multiply+0x142>
 8009d88:	6829      	ldr	r1, [r5, #0]
 8009d8a:	f104 0c14 	add.w	ip, r4, #20
 8009d8e:	46ae      	mov	lr, r5
 8009d90:	f04f 0a00 	mov.w	sl, #0
 8009d94:	f8bc b000 	ldrh.w	fp, [ip]
 8009d98:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009d9c:	fb09 220b 	mla	r2, r9, fp, r2
 8009da0:	4492      	add	sl, r2
 8009da2:	b289      	uxth	r1, r1
 8009da4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009da8:	f84e 1b04 	str.w	r1, [lr], #4
 8009dac:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009db0:	f8be 1000 	ldrh.w	r1, [lr]
 8009db4:	0c12      	lsrs	r2, r2, #16
 8009db6:	fb09 1102 	mla	r1, r9, r2, r1
 8009dba:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009dbe:	4567      	cmp	r7, ip
 8009dc0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009dc4:	d8e6      	bhi.n	8009d94 <__multiply+0x10c>
 8009dc6:	9a01      	ldr	r2, [sp, #4]
 8009dc8:	50a9      	str	r1, [r5, r2]
 8009dca:	3504      	adds	r5, #4
 8009dcc:	e79a      	b.n	8009d04 <__multiply+0x7c>
 8009dce:	3e01      	subs	r6, #1
 8009dd0:	e79c      	b.n	8009d0c <__multiply+0x84>
 8009dd2:	bf00      	nop
 8009dd4:	0800b4dd 	.word	0x0800b4dd
 8009dd8:	0800b4ee 	.word	0x0800b4ee

08009ddc <__pow5mult>:
 8009ddc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009de0:	4615      	mov	r5, r2
 8009de2:	f012 0203 	ands.w	r2, r2, #3
 8009de6:	4606      	mov	r6, r0
 8009de8:	460f      	mov	r7, r1
 8009dea:	d007      	beq.n	8009dfc <__pow5mult+0x20>
 8009dec:	4c25      	ldr	r4, [pc, #148]	; (8009e84 <__pow5mult+0xa8>)
 8009dee:	3a01      	subs	r2, #1
 8009df0:	2300      	movs	r3, #0
 8009df2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009df6:	f7ff fe9b 	bl	8009b30 <__multadd>
 8009dfa:	4607      	mov	r7, r0
 8009dfc:	10ad      	asrs	r5, r5, #2
 8009dfe:	d03d      	beq.n	8009e7c <__pow5mult+0xa0>
 8009e00:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009e02:	b97c      	cbnz	r4, 8009e24 <__pow5mult+0x48>
 8009e04:	2010      	movs	r0, #16
 8009e06:	f7ff fe1b 	bl	8009a40 <malloc>
 8009e0a:	4602      	mov	r2, r0
 8009e0c:	6270      	str	r0, [r6, #36]	; 0x24
 8009e0e:	b928      	cbnz	r0, 8009e1c <__pow5mult+0x40>
 8009e10:	4b1d      	ldr	r3, [pc, #116]	; (8009e88 <__pow5mult+0xac>)
 8009e12:	481e      	ldr	r0, [pc, #120]	; (8009e8c <__pow5mult+0xb0>)
 8009e14:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009e18:	f7fe ff64 	bl	8008ce4 <__assert_func>
 8009e1c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009e20:	6004      	str	r4, [r0, #0]
 8009e22:	60c4      	str	r4, [r0, #12]
 8009e24:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009e28:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009e2c:	b94c      	cbnz	r4, 8009e42 <__pow5mult+0x66>
 8009e2e:	f240 2171 	movw	r1, #625	; 0x271
 8009e32:	4630      	mov	r0, r6
 8009e34:	f7ff ff12 	bl	8009c5c <__i2b>
 8009e38:	2300      	movs	r3, #0
 8009e3a:	f8c8 0008 	str.w	r0, [r8, #8]
 8009e3e:	4604      	mov	r4, r0
 8009e40:	6003      	str	r3, [r0, #0]
 8009e42:	f04f 0900 	mov.w	r9, #0
 8009e46:	07eb      	lsls	r3, r5, #31
 8009e48:	d50a      	bpl.n	8009e60 <__pow5mult+0x84>
 8009e4a:	4639      	mov	r1, r7
 8009e4c:	4622      	mov	r2, r4
 8009e4e:	4630      	mov	r0, r6
 8009e50:	f7ff ff1a 	bl	8009c88 <__multiply>
 8009e54:	4639      	mov	r1, r7
 8009e56:	4680      	mov	r8, r0
 8009e58:	4630      	mov	r0, r6
 8009e5a:	f7ff fe47 	bl	8009aec <_Bfree>
 8009e5e:	4647      	mov	r7, r8
 8009e60:	106d      	asrs	r5, r5, #1
 8009e62:	d00b      	beq.n	8009e7c <__pow5mult+0xa0>
 8009e64:	6820      	ldr	r0, [r4, #0]
 8009e66:	b938      	cbnz	r0, 8009e78 <__pow5mult+0x9c>
 8009e68:	4622      	mov	r2, r4
 8009e6a:	4621      	mov	r1, r4
 8009e6c:	4630      	mov	r0, r6
 8009e6e:	f7ff ff0b 	bl	8009c88 <__multiply>
 8009e72:	6020      	str	r0, [r4, #0]
 8009e74:	f8c0 9000 	str.w	r9, [r0]
 8009e78:	4604      	mov	r4, r0
 8009e7a:	e7e4      	b.n	8009e46 <__pow5mult+0x6a>
 8009e7c:	4638      	mov	r0, r7
 8009e7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e82:	bf00      	nop
 8009e84:	0800b640 	.word	0x0800b640
 8009e88:	0800b2c4 	.word	0x0800b2c4
 8009e8c:	0800b4ee 	.word	0x0800b4ee

08009e90 <__lshift>:
 8009e90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e94:	460c      	mov	r4, r1
 8009e96:	6849      	ldr	r1, [r1, #4]
 8009e98:	6923      	ldr	r3, [r4, #16]
 8009e9a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009e9e:	68a3      	ldr	r3, [r4, #8]
 8009ea0:	4607      	mov	r7, r0
 8009ea2:	4691      	mov	r9, r2
 8009ea4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009ea8:	f108 0601 	add.w	r6, r8, #1
 8009eac:	42b3      	cmp	r3, r6
 8009eae:	db0b      	blt.n	8009ec8 <__lshift+0x38>
 8009eb0:	4638      	mov	r0, r7
 8009eb2:	f7ff fddb 	bl	8009a6c <_Balloc>
 8009eb6:	4605      	mov	r5, r0
 8009eb8:	b948      	cbnz	r0, 8009ece <__lshift+0x3e>
 8009eba:	4602      	mov	r2, r0
 8009ebc:	4b2a      	ldr	r3, [pc, #168]	; (8009f68 <__lshift+0xd8>)
 8009ebe:	482b      	ldr	r0, [pc, #172]	; (8009f6c <__lshift+0xdc>)
 8009ec0:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009ec4:	f7fe ff0e 	bl	8008ce4 <__assert_func>
 8009ec8:	3101      	adds	r1, #1
 8009eca:	005b      	lsls	r3, r3, #1
 8009ecc:	e7ee      	b.n	8009eac <__lshift+0x1c>
 8009ece:	2300      	movs	r3, #0
 8009ed0:	f100 0114 	add.w	r1, r0, #20
 8009ed4:	f100 0210 	add.w	r2, r0, #16
 8009ed8:	4618      	mov	r0, r3
 8009eda:	4553      	cmp	r3, sl
 8009edc:	db37      	blt.n	8009f4e <__lshift+0xbe>
 8009ede:	6920      	ldr	r0, [r4, #16]
 8009ee0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009ee4:	f104 0314 	add.w	r3, r4, #20
 8009ee8:	f019 091f 	ands.w	r9, r9, #31
 8009eec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009ef0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009ef4:	d02f      	beq.n	8009f56 <__lshift+0xc6>
 8009ef6:	f1c9 0e20 	rsb	lr, r9, #32
 8009efa:	468a      	mov	sl, r1
 8009efc:	f04f 0c00 	mov.w	ip, #0
 8009f00:	681a      	ldr	r2, [r3, #0]
 8009f02:	fa02 f209 	lsl.w	r2, r2, r9
 8009f06:	ea42 020c 	orr.w	r2, r2, ip
 8009f0a:	f84a 2b04 	str.w	r2, [sl], #4
 8009f0e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f12:	4298      	cmp	r0, r3
 8009f14:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009f18:	d8f2      	bhi.n	8009f00 <__lshift+0x70>
 8009f1a:	1b03      	subs	r3, r0, r4
 8009f1c:	3b15      	subs	r3, #21
 8009f1e:	f023 0303 	bic.w	r3, r3, #3
 8009f22:	3304      	adds	r3, #4
 8009f24:	f104 0215 	add.w	r2, r4, #21
 8009f28:	4290      	cmp	r0, r2
 8009f2a:	bf38      	it	cc
 8009f2c:	2304      	movcc	r3, #4
 8009f2e:	f841 c003 	str.w	ip, [r1, r3]
 8009f32:	f1bc 0f00 	cmp.w	ip, #0
 8009f36:	d001      	beq.n	8009f3c <__lshift+0xac>
 8009f38:	f108 0602 	add.w	r6, r8, #2
 8009f3c:	3e01      	subs	r6, #1
 8009f3e:	4638      	mov	r0, r7
 8009f40:	612e      	str	r6, [r5, #16]
 8009f42:	4621      	mov	r1, r4
 8009f44:	f7ff fdd2 	bl	8009aec <_Bfree>
 8009f48:	4628      	mov	r0, r5
 8009f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f4e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009f52:	3301      	adds	r3, #1
 8009f54:	e7c1      	b.n	8009eda <__lshift+0x4a>
 8009f56:	3904      	subs	r1, #4
 8009f58:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f5c:	f841 2f04 	str.w	r2, [r1, #4]!
 8009f60:	4298      	cmp	r0, r3
 8009f62:	d8f9      	bhi.n	8009f58 <__lshift+0xc8>
 8009f64:	e7ea      	b.n	8009f3c <__lshift+0xac>
 8009f66:	bf00      	nop
 8009f68:	0800b4dd 	.word	0x0800b4dd
 8009f6c:	0800b4ee 	.word	0x0800b4ee

08009f70 <__mcmp>:
 8009f70:	b530      	push	{r4, r5, lr}
 8009f72:	6902      	ldr	r2, [r0, #16]
 8009f74:	690c      	ldr	r4, [r1, #16]
 8009f76:	1b12      	subs	r2, r2, r4
 8009f78:	d10e      	bne.n	8009f98 <__mcmp+0x28>
 8009f7a:	f100 0314 	add.w	r3, r0, #20
 8009f7e:	3114      	adds	r1, #20
 8009f80:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009f84:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009f88:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009f8c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009f90:	42a5      	cmp	r5, r4
 8009f92:	d003      	beq.n	8009f9c <__mcmp+0x2c>
 8009f94:	d305      	bcc.n	8009fa2 <__mcmp+0x32>
 8009f96:	2201      	movs	r2, #1
 8009f98:	4610      	mov	r0, r2
 8009f9a:	bd30      	pop	{r4, r5, pc}
 8009f9c:	4283      	cmp	r3, r0
 8009f9e:	d3f3      	bcc.n	8009f88 <__mcmp+0x18>
 8009fa0:	e7fa      	b.n	8009f98 <__mcmp+0x28>
 8009fa2:	f04f 32ff 	mov.w	r2, #4294967295
 8009fa6:	e7f7      	b.n	8009f98 <__mcmp+0x28>

08009fa8 <__mdiff>:
 8009fa8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fac:	460c      	mov	r4, r1
 8009fae:	4606      	mov	r6, r0
 8009fb0:	4611      	mov	r1, r2
 8009fb2:	4620      	mov	r0, r4
 8009fb4:	4690      	mov	r8, r2
 8009fb6:	f7ff ffdb 	bl	8009f70 <__mcmp>
 8009fba:	1e05      	subs	r5, r0, #0
 8009fbc:	d110      	bne.n	8009fe0 <__mdiff+0x38>
 8009fbe:	4629      	mov	r1, r5
 8009fc0:	4630      	mov	r0, r6
 8009fc2:	f7ff fd53 	bl	8009a6c <_Balloc>
 8009fc6:	b930      	cbnz	r0, 8009fd6 <__mdiff+0x2e>
 8009fc8:	4b3a      	ldr	r3, [pc, #232]	; (800a0b4 <__mdiff+0x10c>)
 8009fca:	4602      	mov	r2, r0
 8009fcc:	f240 2132 	movw	r1, #562	; 0x232
 8009fd0:	4839      	ldr	r0, [pc, #228]	; (800a0b8 <__mdiff+0x110>)
 8009fd2:	f7fe fe87 	bl	8008ce4 <__assert_func>
 8009fd6:	2301      	movs	r3, #1
 8009fd8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009fdc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fe0:	bfa4      	itt	ge
 8009fe2:	4643      	movge	r3, r8
 8009fe4:	46a0      	movge	r8, r4
 8009fe6:	4630      	mov	r0, r6
 8009fe8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009fec:	bfa6      	itte	ge
 8009fee:	461c      	movge	r4, r3
 8009ff0:	2500      	movge	r5, #0
 8009ff2:	2501      	movlt	r5, #1
 8009ff4:	f7ff fd3a 	bl	8009a6c <_Balloc>
 8009ff8:	b920      	cbnz	r0, 800a004 <__mdiff+0x5c>
 8009ffa:	4b2e      	ldr	r3, [pc, #184]	; (800a0b4 <__mdiff+0x10c>)
 8009ffc:	4602      	mov	r2, r0
 8009ffe:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a002:	e7e5      	b.n	8009fd0 <__mdiff+0x28>
 800a004:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a008:	6926      	ldr	r6, [r4, #16]
 800a00a:	60c5      	str	r5, [r0, #12]
 800a00c:	f104 0914 	add.w	r9, r4, #20
 800a010:	f108 0514 	add.w	r5, r8, #20
 800a014:	f100 0e14 	add.w	lr, r0, #20
 800a018:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a01c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a020:	f108 0210 	add.w	r2, r8, #16
 800a024:	46f2      	mov	sl, lr
 800a026:	2100      	movs	r1, #0
 800a028:	f859 3b04 	ldr.w	r3, [r9], #4
 800a02c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a030:	fa1f f883 	uxth.w	r8, r3
 800a034:	fa11 f18b 	uxtah	r1, r1, fp
 800a038:	0c1b      	lsrs	r3, r3, #16
 800a03a:	eba1 0808 	sub.w	r8, r1, r8
 800a03e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a042:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a046:	fa1f f888 	uxth.w	r8, r8
 800a04a:	1419      	asrs	r1, r3, #16
 800a04c:	454e      	cmp	r6, r9
 800a04e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a052:	f84a 3b04 	str.w	r3, [sl], #4
 800a056:	d8e7      	bhi.n	800a028 <__mdiff+0x80>
 800a058:	1b33      	subs	r3, r6, r4
 800a05a:	3b15      	subs	r3, #21
 800a05c:	f023 0303 	bic.w	r3, r3, #3
 800a060:	3304      	adds	r3, #4
 800a062:	3415      	adds	r4, #21
 800a064:	42a6      	cmp	r6, r4
 800a066:	bf38      	it	cc
 800a068:	2304      	movcc	r3, #4
 800a06a:	441d      	add	r5, r3
 800a06c:	4473      	add	r3, lr
 800a06e:	469e      	mov	lr, r3
 800a070:	462e      	mov	r6, r5
 800a072:	4566      	cmp	r6, ip
 800a074:	d30e      	bcc.n	800a094 <__mdiff+0xec>
 800a076:	f10c 0203 	add.w	r2, ip, #3
 800a07a:	1b52      	subs	r2, r2, r5
 800a07c:	f022 0203 	bic.w	r2, r2, #3
 800a080:	3d03      	subs	r5, #3
 800a082:	45ac      	cmp	ip, r5
 800a084:	bf38      	it	cc
 800a086:	2200      	movcc	r2, #0
 800a088:	441a      	add	r2, r3
 800a08a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a08e:	b17b      	cbz	r3, 800a0b0 <__mdiff+0x108>
 800a090:	6107      	str	r7, [r0, #16]
 800a092:	e7a3      	b.n	8009fdc <__mdiff+0x34>
 800a094:	f856 8b04 	ldr.w	r8, [r6], #4
 800a098:	fa11 f288 	uxtah	r2, r1, r8
 800a09c:	1414      	asrs	r4, r2, #16
 800a09e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a0a2:	b292      	uxth	r2, r2
 800a0a4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a0a8:	f84e 2b04 	str.w	r2, [lr], #4
 800a0ac:	1421      	asrs	r1, r4, #16
 800a0ae:	e7e0      	b.n	800a072 <__mdiff+0xca>
 800a0b0:	3f01      	subs	r7, #1
 800a0b2:	e7ea      	b.n	800a08a <__mdiff+0xe2>
 800a0b4:	0800b4dd 	.word	0x0800b4dd
 800a0b8:	0800b4ee 	.word	0x0800b4ee

0800a0bc <__d2b>:
 800a0bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a0c0:	4689      	mov	r9, r1
 800a0c2:	2101      	movs	r1, #1
 800a0c4:	ec57 6b10 	vmov	r6, r7, d0
 800a0c8:	4690      	mov	r8, r2
 800a0ca:	f7ff fccf 	bl	8009a6c <_Balloc>
 800a0ce:	4604      	mov	r4, r0
 800a0d0:	b930      	cbnz	r0, 800a0e0 <__d2b+0x24>
 800a0d2:	4602      	mov	r2, r0
 800a0d4:	4b25      	ldr	r3, [pc, #148]	; (800a16c <__d2b+0xb0>)
 800a0d6:	4826      	ldr	r0, [pc, #152]	; (800a170 <__d2b+0xb4>)
 800a0d8:	f240 310a 	movw	r1, #778	; 0x30a
 800a0dc:	f7fe fe02 	bl	8008ce4 <__assert_func>
 800a0e0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a0e4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a0e8:	bb35      	cbnz	r5, 800a138 <__d2b+0x7c>
 800a0ea:	2e00      	cmp	r6, #0
 800a0ec:	9301      	str	r3, [sp, #4]
 800a0ee:	d028      	beq.n	800a142 <__d2b+0x86>
 800a0f0:	4668      	mov	r0, sp
 800a0f2:	9600      	str	r6, [sp, #0]
 800a0f4:	f7ff fd82 	bl	8009bfc <__lo0bits>
 800a0f8:	9900      	ldr	r1, [sp, #0]
 800a0fa:	b300      	cbz	r0, 800a13e <__d2b+0x82>
 800a0fc:	9a01      	ldr	r2, [sp, #4]
 800a0fe:	f1c0 0320 	rsb	r3, r0, #32
 800a102:	fa02 f303 	lsl.w	r3, r2, r3
 800a106:	430b      	orrs	r3, r1
 800a108:	40c2      	lsrs	r2, r0
 800a10a:	6163      	str	r3, [r4, #20]
 800a10c:	9201      	str	r2, [sp, #4]
 800a10e:	9b01      	ldr	r3, [sp, #4]
 800a110:	61a3      	str	r3, [r4, #24]
 800a112:	2b00      	cmp	r3, #0
 800a114:	bf14      	ite	ne
 800a116:	2202      	movne	r2, #2
 800a118:	2201      	moveq	r2, #1
 800a11a:	6122      	str	r2, [r4, #16]
 800a11c:	b1d5      	cbz	r5, 800a154 <__d2b+0x98>
 800a11e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a122:	4405      	add	r5, r0
 800a124:	f8c9 5000 	str.w	r5, [r9]
 800a128:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a12c:	f8c8 0000 	str.w	r0, [r8]
 800a130:	4620      	mov	r0, r4
 800a132:	b003      	add	sp, #12
 800a134:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a138:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a13c:	e7d5      	b.n	800a0ea <__d2b+0x2e>
 800a13e:	6161      	str	r1, [r4, #20]
 800a140:	e7e5      	b.n	800a10e <__d2b+0x52>
 800a142:	a801      	add	r0, sp, #4
 800a144:	f7ff fd5a 	bl	8009bfc <__lo0bits>
 800a148:	9b01      	ldr	r3, [sp, #4]
 800a14a:	6163      	str	r3, [r4, #20]
 800a14c:	2201      	movs	r2, #1
 800a14e:	6122      	str	r2, [r4, #16]
 800a150:	3020      	adds	r0, #32
 800a152:	e7e3      	b.n	800a11c <__d2b+0x60>
 800a154:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a158:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a15c:	f8c9 0000 	str.w	r0, [r9]
 800a160:	6918      	ldr	r0, [r3, #16]
 800a162:	f7ff fd2b 	bl	8009bbc <__hi0bits>
 800a166:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a16a:	e7df      	b.n	800a12c <__d2b+0x70>
 800a16c:	0800b4dd 	.word	0x0800b4dd
 800a170:	0800b4ee 	.word	0x0800b4ee

0800a174 <_calloc_r>:
 800a174:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a176:	fba1 2402 	umull	r2, r4, r1, r2
 800a17a:	b94c      	cbnz	r4, 800a190 <_calloc_r+0x1c>
 800a17c:	4611      	mov	r1, r2
 800a17e:	9201      	str	r2, [sp, #4]
 800a180:	f000 f87a 	bl	800a278 <_malloc_r>
 800a184:	9a01      	ldr	r2, [sp, #4]
 800a186:	4605      	mov	r5, r0
 800a188:	b930      	cbnz	r0, 800a198 <_calloc_r+0x24>
 800a18a:	4628      	mov	r0, r5
 800a18c:	b003      	add	sp, #12
 800a18e:	bd30      	pop	{r4, r5, pc}
 800a190:	220c      	movs	r2, #12
 800a192:	6002      	str	r2, [r0, #0]
 800a194:	2500      	movs	r5, #0
 800a196:	e7f8      	b.n	800a18a <_calloc_r+0x16>
 800a198:	4621      	mov	r1, r4
 800a19a:	f7fe f815 	bl	80081c8 <memset>
 800a19e:	e7f4      	b.n	800a18a <_calloc_r+0x16>

0800a1a0 <_free_r>:
 800a1a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a1a2:	2900      	cmp	r1, #0
 800a1a4:	d044      	beq.n	800a230 <_free_r+0x90>
 800a1a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a1aa:	9001      	str	r0, [sp, #4]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	f1a1 0404 	sub.w	r4, r1, #4
 800a1b2:	bfb8      	it	lt
 800a1b4:	18e4      	addlt	r4, r4, r3
 800a1b6:	f000 fead 	bl	800af14 <__malloc_lock>
 800a1ba:	4a1e      	ldr	r2, [pc, #120]	; (800a234 <_free_r+0x94>)
 800a1bc:	9801      	ldr	r0, [sp, #4]
 800a1be:	6813      	ldr	r3, [r2, #0]
 800a1c0:	b933      	cbnz	r3, 800a1d0 <_free_r+0x30>
 800a1c2:	6063      	str	r3, [r4, #4]
 800a1c4:	6014      	str	r4, [r2, #0]
 800a1c6:	b003      	add	sp, #12
 800a1c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a1cc:	f000 bea8 	b.w	800af20 <__malloc_unlock>
 800a1d0:	42a3      	cmp	r3, r4
 800a1d2:	d908      	bls.n	800a1e6 <_free_r+0x46>
 800a1d4:	6825      	ldr	r5, [r4, #0]
 800a1d6:	1961      	adds	r1, r4, r5
 800a1d8:	428b      	cmp	r3, r1
 800a1da:	bf01      	itttt	eq
 800a1dc:	6819      	ldreq	r1, [r3, #0]
 800a1de:	685b      	ldreq	r3, [r3, #4]
 800a1e0:	1949      	addeq	r1, r1, r5
 800a1e2:	6021      	streq	r1, [r4, #0]
 800a1e4:	e7ed      	b.n	800a1c2 <_free_r+0x22>
 800a1e6:	461a      	mov	r2, r3
 800a1e8:	685b      	ldr	r3, [r3, #4]
 800a1ea:	b10b      	cbz	r3, 800a1f0 <_free_r+0x50>
 800a1ec:	42a3      	cmp	r3, r4
 800a1ee:	d9fa      	bls.n	800a1e6 <_free_r+0x46>
 800a1f0:	6811      	ldr	r1, [r2, #0]
 800a1f2:	1855      	adds	r5, r2, r1
 800a1f4:	42a5      	cmp	r5, r4
 800a1f6:	d10b      	bne.n	800a210 <_free_r+0x70>
 800a1f8:	6824      	ldr	r4, [r4, #0]
 800a1fa:	4421      	add	r1, r4
 800a1fc:	1854      	adds	r4, r2, r1
 800a1fe:	42a3      	cmp	r3, r4
 800a200:	6011      	str	r1, [r2, #0]
 800a202:	d1e0      	bne.n	800a1c6 <_free_r+0x26>
 800a204:	681c      	ldr	r4, [r3, #0]
 800a206:	685b      	ldr	r3, [r3, #4]
 800a208:	6053      	str	r3, [r2, #4]
 800a20a:	4421      	add	r1, r4
 800a20c:	6011      	str	r1, [r2, #0]
 800a20e:	e7da      	b.n	800a1c6 <_free_r+0x26>
 800a210:	d902      	bls.n	800a218 <_free_r+0x78>
 800a212:	230c      	movs	r3, #12
 800a214:	6003      	str	r3, [r0, #0]
 800a216:	e7d6      	b.n	800a1c6 <_free_r+0x26>
 800a218:	6825      	ldr	r5, [r4, #0]
 800a21a:	1961      	adds	r1, r4, r5
 800a21c:	428b      	cmp	r3, r1
 800a21e:	bf04      	itt	eq
 800a220:	6819      	ldreq	r1, [r3, #0]
 800a222:	685b      	ldreq	r3, [r3, #4]
 800a224:	6063      	str	r3, [r4, #4]
 800a226:	bf04      	itt	eq
 800a228:	1949      	addeq	r1, r1, r5
 800a22a:	6021      	streq	r1, [r4, #0]
 800a22c:	6054      	str	r4, [r2, #4]
 800a22e:	e7ca      	b.n	800a1c6 <_free_r+0x26>
 800a230:	b003      	add	sp, #12
 800a232:	bd30      	pop	{r4, r5, pc}
 800a234:	20000518 	.word	0x20000518

0800a238 <sbrk_aligned>:
 800a238:	b570      	push	{r4, r5, r6, lr}
 800a23a:	4e0e      	ldr	r6, [pc, #56]	; (800a274 <sbrk_aligned+0x3c>)
 800a23c:	460c      	mov	r4, r1
 800a23e:	6831      	ldr	r1, [r6, #0]
 800a240:	4605      	mov	r5, r0
 800a242:	b911      	cbnz	r1, 800a24a <sbrk_aligned+0x12>
 800a244:	f000 fb42 	bl	800a8cc <_sbrk_r>
 800a248:	6030      	str	r0, [r6, #0]
 800a24a:	4621      	mov	r1, r4
 800a24c:	4628      	mov	r0, r5
 800a24e:	f000 fb3d 	bl	800a8cc <_sbrk_r>
 800a252:	1c43      	adds	r3, r0, #1
 800a254:	d00a      	beq.n	800a26c <sbrk_aligned+0x34>
 800a256:	1cc4      	adds	r4, r0, #3
 800a258:	f024 0403 	bic.w	r4, r4, #3
 800a25c:	42a0      	cmp	r0, r4
 800a25e:	d007      	beq.n	800a270 <sbrk_aligned+0x38>
 800a260:	1a21      	subs	r1, r4, r0
 800a262:	4628      	mov	r0, r5
 800a264:	f000 fb32 	bl	800a8cc <_sbrk_r>
 800a268:	3001      	adds	r0, #1
 800a26a:	d101      	bne.n	800a270 <sbrk_aligned+0x38>
 800a26c:	f04f 34ff 	mov.w	r4, #4294967295
 800a270:	4620      	mov	r0, r4
 800a272:	bd70      	pop	{r4, r5, r6, pc}
 800a274:	2000051c 	.word	0x2000051c

0800a278 <_malloc_r>:
 800a278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a27c:	1ccd      	adds	r5, r1, #3
 800a27e:	f025 0503 	bic.w	r5, r5, #3
 800a282:	3508      	adds	r5, #8
 800a284:	2d0c      	cmp	r5, #12
 800a286:	bf38      	it	cc
 800a288:	250c      	movcc	r5, #12
 800a28a:	2d00      	cmp	r5, #0
 800a28c:	4607      	mov	r7, r0
 800a28e:	db01      	blt.n	800a294 <_malloc_r+0x1c>
 800a290:	42a9      	cmp	r1, r5
 800a292:	d905      	bls.n	800a2a0 <_malloc_r+0x28>
 800a294:	230c      	movs	r3, #12
 800a296:	603b      	str	r3, [r7, #0]
 800a298:	2600      	movs	r6, #0
 800a29a:	4630      	mov	r0, r6
 800a29c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2a0:	4e2e      	ldr	r6, [pc, #184]	; (800a35c <_malloc_r+0xe4>)
 800a2a2:	f000 fe37 	bl	800af14 <__malloc_lock>
 800a2a6:	6833      	ldr	r3, [r6, #0]
 800a2a8:	461c      	mov	r4, r3
 800a2aa:	bb34      	cbnz	r4, 800a2fa <_malloc_r+0x82>
 800a2ac:	4629      	mov	r1, r5
 800a2ae:	4638      	mov	r0, r7
 800a2b0:	f7ff ffc2 	bl	800a238 <sbrk_aligned>
 800a2b4:	1c43      	adds	r3, r0, #1
 800a2b6:	4604      	mov	r4, r0
 800a2b8:	d14d      	bne.n	800a356 <_malloc_r+0xde>
 800a2ba:	6834      	ldr	r4, [r6, #0]
 800a2bc:	4626      	mov	r6, r4
 800a2be:	2e00      	cmp	r6, #0
 800a2c0:	d140      	bne.n	800a344 <_malloc_r+0xcc>
 800a2c2:	6823      	ldr	r3, [r4, #0]
 800a2c4:	4631      	mov	r1, r6
 800a2c6:	4638      	mov	r0, r7
 800a2c8:	eb04 0803 	add.w	r8, r4, r3
 800a2cc:	f000 fafe 	bl	800a8cc <_sbrk_r>
 800a2d0:	4580      	cmp	r8, r0
 800a2d2:	d13a      	bne.n	800a34a <_malloc_r+0xd2>
 800a2d4:	6821      	ldr	r1, [r4, #0]
 800a2d6:	3503      	adds	r5, #3
 800a2d8:	1a6d      	subs	r5, r5, r1
 800a2da:	f025 0503 	bic.w	r5, r5, #3
 800a2de:	3508      	adds	r5, #8
 800a2e0:	2d0c      	cmp	r5, #12
 800a2e2:	bf38      	it	cc
 800a2e4:	250c      	movcc	r5, #12
 800a2e6:	4629      	mov	r1, r5
 800a2e8:	4638      	mov	r0, r7
 800a2ea:	f7ff ffa5 	bl	800a238 <sbrk_aligned>
 800a2ee:	3001      	adds	r0, #1
 800a2f0:	d02b      	beq.n	800a34a <_malloc_r+0xd2>
 800a2f2:	6823      	ldr	r3, [r4, #0]
 800a2f4:	442b      	add	r3, r5
 800a2f6:	6023      	str	r3, [r4, #0]
 800a2f8:	e00e      	b.n	800a318 <_malloc_r+0xa0>
 800a2fa:	6822      	ldr	r2, [r4, #0]
 800a2fc:	1b52      	subs	r2, r2, r5
 800a2fe:	d41e      	bmi.n	800a33e <_malloc_r+0xc6>
 800a300:	2a0b      	cmp	r2, #11
 800a302:	d916      	bls.n	800a332 <_malloc_r+0xba>
 800a304:	1961      	adds	r1, r4, r5
 800a306:	42a3      	cmp	r3, r4
 800a308:	6025      	str	r5, [r4, #0]
 800a30a:	bf18      	it	ne
 800a30c:	6059      	strne	r1, [r3, #4]
 800a30e:	6863      	ldr	r3, [r4, #4]
 800a310:	bf08      	it	eq
 800a312:	6031      	streq	r1, [r6, #0]
 800a314:	5162      	str	r2, [r4, r5]
 800a316:	604b      	str	r3, [r1, #4]
 800a318:	4638      	mov	r0, r7
 800a31a:	f104 060b 	add.w	r6, r4, #11
 800a31e:	f000 fdff 	bl	800af20 <__malloc_unlock>
 800a322:	f026 0607 	bic.w	r6, r6, #7
 800a326:	1d23      	adds	r3, r4, #4
 800a328:	1af2      	subs	r2, r6, r3
 800a32a:	d0b6      	beq.n	800a29a <_malloc_r+0x22>
 800a32c:	1b9b      	subs	r3, r3, r6
 800a32e:	50a3      	str	r3, [r4, r2]
 800a330:	e7b3      	b.n	800a29a <_malloc_r+0x22>
 800a332:	6862      	ldr	r2, [r4, #4]
 800a334:	42a3      	cmp	r3, r4
 800a336:	bf0c      	ite	eq
 800a338:	6032      	streq	r2, [r6, #0]
 800a33a:	605a      	strne	r2, [r3, #4]
 800a33c:	e7ec      	b.n	800a318 <_malloc_r+0xa0>
 800a33e:	4623      	mov	r3, r4
 800a340:	6864      	ldr	r4, [r4, #4]
 800a342:	e7b2      	b.n	800a2aa <_malloc_r+0x32>
 800a344:	4634      	mov	r4, r6
 800a346:	6876      	ldr	r6, [r6, #4]
 800a348:	e7b9      	b.n	800a2be <_malloc_r+0x46>
 800a34a:	230c      	movs	r3, #12
 800a34c:	603b      	str	r3, [r7, #0]
 800a34e:	4638      	mov	r0, r7
 800a350:	f000 fde6 	bl	800af20 <__malloc_unlock>
 800a354:	e7a1      	b.n	800a29a <_malloc_r+0x22>
 800a356:	6025      	str	r5, [r4, #0]
 800a358:	e7de      	b.n	800a318 <_malloc_r+0xa0>
 800a35a:	bf00      	nop
 800a35c:	20000518 	.word	0x20000518

0800a360 <__ssputs_r>:
 800a360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a364:	688e      	ldr	r6, [r1, #8]
 800a366:	429e      	cmp	r6, r3
 800a368:	4682      	mov	sl, r0
 800a36a:	460c      	mov	r4, r1
 800a36c:	4690      	mov	r8, r2
 800a36e:	461f      	mov	r7, r3
 800a370:	d838      	bhi.n	800a3e4 <__ssputs_r+0x84>
 800a372:	898a      	ldrh	r2, [r1, #12]
 800a374:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a378:	d032      	beq.n	800a3e0 <__ssputs_r+0x80>
 800a37a:	6825      	ldr	r5, [r4, #0]
 800a37c:	6909      	ldr	r1, [r1, #16]
 800a37e:	eba5 0901 	sub.w	r9, r5, r1
 800a382:	6965      	ldr	r5, [r4, #20]
 800a384:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a388:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a38c:	3301      	adds	r3, #1
 800a38e:	444b      	add	r3, r9
 800a390:	106d      	asrs	r5, r5, #1
 800a392:	429d      	cmp	r5, r3
 800a394:	bf38      	it	cc
 800a396:	461d      	movcc	r5, r3
 800a398:	0553      	lsls	r3, r2, #21
 800a39a:	d531      	bpl.n	800a400 <__ssputs_r+0xa0>
 800a39c:	4629      	mov	r1, r5
 800a39e:	f7ff ff6b 	bl	800a278 <_malloc_r>
 800a3a2:	4606      	mov	r6, r0
 800a3a4:	b950      	cbnz	r0, 800a3bc <__ssputs_r+0x5c>
 800a3a6:	230c      	movs	r3, #12
 800a3a8:	f8ca 3000 	str.w	r3, [sl]
 800a3ac:	89a3      	ldrh	r3, [r4, #12]
 800a3ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a3b2:	81a3      	strh	r3, [r4, #12]
 800a3b4:	f04f 30ff 	mov.w	r0, #4294967295
 800a3b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3bc:	6921      	ldr	r1, [r4, #16]
 800a3be:	464a      	mov	r2, r9
 800a3c0:	f7ff fb46 	bl	8009a50 <memcpy>
 800a3c4:	89a3      	ldrh	r3, [r4, #12]
 800a3c6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a3ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3ce:	81a3      	strh	r3, [r4, #12]
 800a3d0:	6126      	str	r6, [r4, #16]
 800a3d2:	6165      	str	r5, [r4, #20]
 800a3d4:	444e      	add	r6, r9
 800a3d6:	eba5 0509 	sub.w	r5, r5, r9
 800a3da:	6026      	str	r6, [r4, #0]
 800a3dc:	60a5      	str	r5, [r4, #8]
 800a3de:	463e      	mov	r6, r7
 800a3e0:	42be      	cmp	r6, r7
 800a3e2:	d900      	bls.n	800a3e6 <__ssputs_r+0x86>
 800a3e4:	463e      	mov	r6, r7
 800a3e6:	6820      	ldr	r0, [r4, #0]
 800a3e8:	4632      	mov	r2, r6
 800a3ea:	4641      	mov	r1, r8
 800a3ec:	f000 fd78 	bl	800aee0 <memmove>
 800a3f0:	68a3      	ldr	r3, [r4, #8]
 800a3f2:	1b9b      	subs	r3, r3, r6
 800a3f4:	60a3      	str	r3, [r4, #8]
 800a3f6:	6823      	ldr	r3, [r4, #0]
 800a3f8:	4433      	add	r3, r6
 800a3fa:	6023      	str	r3, [r4, #0]
 800a3fc:	2000      	movs	r0, #0
 800a3fe:	e7db      	b.n	800a3b8 <__ssputs_r+0x58>
 800a400:	462a      	mov	r2, r5
 800a402:	f000 fd93 	bl	800af2c <_realloc_r>
 800a406:	4606      	mov	r6, r0
 800a408:	2800      	cmp	r0, #0
 800a40a:	d1e1      	bne.n	800a3d0 <__ssputs_r+0x70>
 800a40c:	6921      	ldr	r1, [r4, #16]
 800a40e:	4650      	mov	r0, sl
 800a410:	f7ff fec6 	bl	800a1a0 <_free_r>
 800a414:	e7c7      	b.n	800a3a6 <__ssputs_r+0x46>
	...

0800a418 <_svfiprintf_r>:
 800a418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a41c:	4698      	mov	r8, r3
 800a41e:	898b      	ldrh	r3, [r1, #12]
 800a420:	061b      	lsls	r3, r3, #24
 800a422:	b09d      	sub	sp, #116	; 0x74
 800a424:	4607      	mov	r7, r0
 800a426:	460d      	mov	r5, r1
 800a428:	4614      	mov	r4, r2
 800a42a:	d50e      	bpl.n	800a44a <_svfiprintf_r+0x32>
 800a42c:	690b      	ldr	r3, [r1, #16]
 800a42e:	b963      	cbnz	r3, 800a44a <_svfiprintf_r+0x32>
 800a430:	2140      	movs	r1, #64	; 0x40
 800a432:	f7ff ff21 	bl	800a278 <_malloc_r>
 800a436:	6028      	str	r0, [r5, #0]
 800a438:	6128      	str	r0, [r5, #16]
 800a43a:	b920      	cbnz	r0, 800a446 <_svfiprintf_r+0x2e>
 800a43c:	230c      	movs	r3, #12
 800a43e:	603b      	str	r3, [r7, #0]
 800a440:	f04f 30ff 	mov.w	r0, #4294967295
 800a444:	e0d1      	b.n	800a5ea <_svfiprintf_r+0x1d2>
 800a446:	2340      	movs	r3, #64	; 0x40
 800a448:	616b      	str	r3, [r5, #20]
 800a44a:	2300      	movs	r3, #0
 800a44c:	9309      	str	r3, [sp, #36]	; 0x24
 800a44e:	2320      	movs	r3, #32
 800a450:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a454:	f8cd 800c 	str.w	r8, [sp, #12]
 800a458:	2330      	movs	r3, #48	; 0x30
 800a45a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a604 <_svfiprintf_r+0x1ec>
 800a45e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a462:	f04f 0901 	mov.w	r9, #1
 800a466:	4623      	mov	r3, r4
 800a468:	469a      	mov	sl, r3
 800a46a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a46e:	b10a      	cbz	r2, 800a474 <_svfiprintf_r+0x5c>
 800a470:	2a25      	cmp	r2, #37	; 0x25
 800a472:	d1f9      	bne.n	800a468 <_svfiprintf_r+0x50>
 800a474:	ebba 0b04 	subs.w	fp, sl, r4
 800a478:	d00b      	beq.n	800a492 <_svfiprintf_r+0x7a>
 800a47a:	465b      	mov	r3, fp
 800a47c:	4622      	mov	r2, r4
 800a47e:	4629      	mov	r1, r5
 800a480:	4638      	mov	r0, r7
 800a482:	f7ff ff6d 	bl	800a360 <__ssputs_r>
 800a486:	3001      	adds	r0, #1
 800a488:	f000 80aa 	beq.w	800a5e0 <_svfiprintf_r+0x1c8>
 800a48c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a48e:	445a      	add	r2, fp
 800a490:	9209      	str	r2, [sp, #36]	; 0x24
 800a492:	f89a 3000 	ldrb.w	r3, [sl]
 800a496:	2b00      	cmp	r3, #0
 800a498:	f000 80a2 	beq.w	800a5e0 <_svfiprintf_r+0x1c8>
 800a49c:	2300      	movs	r3, #0
 800a49e:	f04f 32ff 	mov.w	r2, #4294967295
 800a4a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a4a6:	f10a 0a01 	add.w	sl, sl, #1
 800a4aa:	9304      	str	r3, [sp, #16]
 800a4ac:	9307      	str	r3, [sp, #28]
 800a4ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a4b2:	931a      	str	r3, [sp, #104]	; 0x68
 800a4b4:	4654      	mov	r4, sl
 800a4b6:	2205      	movs	r2, #5
 800a4b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4bc:	4851      	ldr	r0, [pc, #324]	; (800a604 <_svfiprintf_r+0x1ec>)
 800a4be:	f7f5 fec7 	bl	8000250 <memchr>
 800a4c2:	9a04      	ldr	r2, [sp, #16]
 800a4c4:	b9d8      	cbnz	r0, 800a4fe <_svfiprintf_r+0xe6>
 800a4c6:	06d0      	lsls	r0, r2, #27
 800a4c8:	bf44      	itt	mi
 800a4ca:	2320      	movmi	r3, #32
 800a4cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a4d0:	0711      	lsls	r1, r2, #28
 800a4d2:	bf44      	itt	mi
 800a4d4:	232b      	movmi	r3, #43	; 0x2b
 800a4d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a4da:	f89a 3000 	ldrb.w	r3, [sl]
 800a4de:	2b2a      	cmp	r3, #42	; 0x2a
 800a4e0:	d015      	beq.n	800a50e <_svfiprintf_r+0xf6>
 800a4e2:	9a07      	ldr	r2, [sp, #28]
 800a4e4:	4654      	mov	r4, sl
 800a4e6:	2000      	movs	r0, #0
 800a4e8:	f04f 0c0a 	mov.w	ip, #10
 800a4ec:	4621      	mov	r1, r4
 800a4ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a4f2:	3b30      	subs	r3, #48	; 0x30
 800a4f4:	2b09      	cmp	r3, #9
 800a4f6:	d94e      	bls.n	800a596 <_svfiprintf_r+0x17e>
 800a4f8:	b1b0      	cbz	r0, 800a528 <_svfiprintf_r+0x110>
 800a4fa:	9207      	str	r2, [sp, #28]
 800a4fc:	e014      	b.n	800a528 <_svfiprintf_r+0x110>
 800a4fe:	eba0 0308 	sub.w	r3, r0, r8
 800a502:	fa09 f303 	lsl.w	r3, r9, r3
 800a506:	4313      	orrs	r3, r2
 800a508:	9304      	str	r3, [sp, #16]
 800a50a:	46a2      	mov	sl, r4
 800a50c:	e7d2      	b.n	800a4b4 <_svfiprintf_r+0x9c>
 800a50e:	9b03      	ldr	r3, [sp, #12]
 800a510:	1d19      	adds	r1, r3, #4
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	9103      	str	r1, [sp, #12]
 800a516:	2b00      	cmp	r3, #0
 800a518:	bfbb      	ittet	lt
 800a51a:	425b      	neglt	r3, r3
 800a51c:	f042 0202 	orrlt.w	r2, r2, #2
 800a520:	9307      	strge	r3, [sp, #28]
 800a522:	9307      	strlt	r3, [sp, #28]
 800a524:	bfb8      	it	lt
 800a526:	9204      	strlt	r2, [sp, #16]
 800a528:	7823      	ldrb	r3, [r4, #0]
 800a52a:	2b2e      	cmp	r3, #46	; 0x2e
 800a52c:	d10c      	bne.n	800a548 <_svfiprintf_r+0x130>
 800a52e:	7863      	ldrb	r3, [r4, #1]
 800a530:	2b2a      	cmp	r3, #42	; 0x2a
 800a532:	d135      	bne.n	800a5a0 <_svfiprintf_r+0x188>
 800a534:	9b03      	ldr	r3, [sp, #12]
 800a536:	1d1a      	adds	r2, r3, #4
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	9203      	str	r2, [sp, #12]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	bfb8      	it	lt
 800a540:	f04f 33ff 	movlt.w	r3, #4294967295
 800a544:	3402      	adds	r4, #2
 800a546:	9305      	str	r3, [sp, #20]
 800a548:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a614 <_svfiprintf_r+0x1fc>
 800a54c:	7821      	ldrb	r1, [r4, #0]
 800a54e:	2203      	movs	r2, #3
 800a550:	4650      	mov	r0, sl
 800a552:	f7f5 fe7d 	bl	8000250 <memchr>
 800a556:	b140      	cbz	r0, 800a56a <_svfiprintf_r+0x152>
 800a558:	2340      	movs	r3, #64	; 0x40
 800a55a:	eba0 000a 	sub.w	r0, r0, sl
 800a55e:	fa03 f000 	lsl.w	r0, r3, r0
 800a562:	9b04      	ldr	r3, [sp, #16]
 800a564:	4303      	orrs	r3, r0
 800a566:	3401      	adds	r4, #1
 800a568:	9304      	str	r3, [sp, #16]
 800a56a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a56e:	4826      	ldr	r0, [pc, #152]	; (800a608 <_svfiprintf_r+0x1f0>)
 800a570:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a574:	2206      	movs	r2, #6
 800a576:	f7f5 fe6b 	bl	8000250 <memchr>
 800a57a:	2800      	cmp	r0, #0
 800a57c:	d038      	beq.n	800a5f0 <_svfiprintf_r+0x1d8>
 800a57e:	4b23      	ldr	r3, [pc, #140]	; (800a60c <_svfiprintf_r+0x1f4>)
 800a580:	bb1b      	cbnz	r3, 800a5ca <_svfiprintf_r+0x1b2>
 800a582:	9b03      	ldr	r3, [sp, #12]
 800a584:	3307      	adds	r3, #7
 800a586:	f023 0307 	bic.w	r3, r3, #7
 800a58a:	3308      	adds	r3, #8
 800a58c:	9303      	str	r3, [sp, #12]
 800a58e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a590:	4433      	add	r3, r6
 800a592:	9309      	str	r3, [sp, #36]	; 0x24
 800a594:	e767      	b.n	800a466 <_svfiprintf_r+0x4e>
 800a596:	fb0c 3202 	mla	r2, ip, r2, r3
 800a59a:	460c      	mov	r4, r1
 800a59c:	2001      	movs	r0, #1
 800a59e:	e7a5      	b.n	800a4ec <_svfiprintf_r+0xd4>
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	3401      	adds	r4, #1
 800a5a4:	9305      	str	r3, [sp, #20]
 800a5a6:	4619      	mov	r1, r3
 800a5a8:	f04f 0c0a 	mov.w	ip, #10
 800a5ac:	4620      	mov	r0, r4
 800a5ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a5b2:	3a30      	subs	r2, #48	; 0x30
 800a5b4:	2a09      	cmp	r2, #9
 800a5b6:	d903      	bls.n	800a5c0 <_svfiprintf_r+0x1a8>
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d0c5      	beq.n	800a548 <_svfiprintf_r+0x130>
 800a5bc:	9105      	str	r1, [sp, #20]
 800a5be:	e7c3      	b.n	800a548 <_svfiprintf_r+0x130>
 800a5c0:	fb0c 2101 	mla	r1, ip, r1, r2
 800a5c4:	4604      	mov	r4, r0
 800a5c6:	2301      	movs	r3, #1
 800a5c8:	e7f0      	b.n	800a5ac <_svfiprintf_r+0x194>
 800a5ca:	ab03      	add	r3, sp, #12
 800a5cc:	9300      	str	r3, [sp, #0]
 800a5ce:	462a      	mov	r2, r5
 800a5d0:	4b0f      	ldr	r3, [pc, #60]	; (800a610 <_svfiprintf_r+0x1f8>)
 800a5d2:	a904      	add	r1, sp, #16
 800a5d4:	4638      	mov	r0, r7
 800a5d6:	f7fd fe9f 	bl	8008318 <_printf_float>
 800a5da:	1c42      	adds	r2, r0, #1
 800a5dc:	4606      	mov	r6, r0
 800a5de:	d1d6      	bne.n	800a58e <_svfiprintf_r+0x176>
 800a5e0:	89ab      	ldrh	r3, [r5, #12]
 800a5e2:	065b      	lsls	r3, r3, #25
 800a5e4:	f53f af2c 	bmi.w	800a440 <_svfiprintf_r+0x28>
 800a5e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a5ea:	b01d      	add	sp, #116	; 0x74
 800a5ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5f0:	ab03      	add	r3, sp, #12
 800a5f2:	9300      	str	r3, [sp, #0]
 800a5f4:	462a      	mov	r2, r5
 800a5f6:	4b06      	ldr	r3, [pc, #24]	; (800a610 <_svfiprintf_r+0x1f8>)
 800a5f8:	a904      	add	r1, sp, #16
 800a5fa:	4638      	mov	r0, r7
 800a5fc:	f7fe f930 	bl	8008860 <_printf_i>
 800a600:	e7eb      	b.n	800a5da <_svfiprintf_r+0x1c2>
 800a602:	bf00      	nop
 800a604:	0800b64c 	.word	0x0800b64c
 800a608:	0800b656 	.word	0x0800b656
 800a60c:	08008319 	.word	0x08008319
 800a610:	0800a361 	.word	0x0800a361
 800a614:	0800b652 	.word	0x0800b652

0800a618 <__sfputc_r>:
 800a618:	6893      	ldr	r3, [r2, #8]
 800a61a:	3b01      	subs	r3, #1
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	b410      	push	{r4}
 800a620:	6093      	str	r3, [r2, #8]
 800a622:	da08      	bge.n	800a636 <__sfputc_r+0x1e>
 800a624:	6994      	ldr	r4, [r2, #24]
 800a626:	42a3      	cmp	r3, r4
 800a628:	db01      	blt.n	800a62e <__sfputc_r+0x16>
 800a62a:	290a      	cmp	r1, #10
 800a62c:	d103      	bne.n	800a636 <__sfputc_r+0x1e>
 800a62e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a632:	f000 b95b 	b.w	800a8ec <__swbuf_r>
 800a636:	6813      	ldr	r3, [r2, #0]
 800a638:	1c58      	adds	r0, r3, #1
 800a63a:	6010      	str	r0, [r2, #0]
 800a63c:	7019      	strb	r1, [r3, #0]
 800a63e:	4608      	mov	r0, r1
 800a640:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a644:	4770      	bx	lr

0800a646 <__sfputs_r>:
 800a646:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a648:	4606      	mov	r6, r0
 800a64a:	460f      	mov	r7, r1
 800a64c:	4614      	mov	r4, r2
 800a64e:	18d5      	adds	r5, r2, r3
 800a650:	42ac      	cmp	r4, r5
 800a652:	d101      	bne.n	800a658 <__sfputs_r+0x12>
 800a654:	2000      	movs	r0, #0
 800a656:	e007      	b.n	800a668 <__sfputs_r+0x22>
 800a658:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a65c:	463a      	mov	r2, r7
 800a65e:	4630      	mov	r0, r6
 800a660:	f7ff ffda 	bl	800a618 <__sfputc_r>
 800a664:	1c43      	adds	r3, r0, #1
 800a666:	d1f3      	bne.n	800a650 <__sfputs_r+0xa>
 800a668:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a66c <_vfiprintf_r>:
 800a66c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a670:	460d      	mov	r5, r1
 800a672:	b09d      	sub	sp, #116	; 0x74
 800a674:	4614      	mov	r4, r2
 800a676:	4698      	mov	r8, r3
 800a678:	4606      	mov	r6, r0
 800a67a:	b118      	cbz	r0, 800a684 <_vfiprintf_r+0x18>
 800a67c:	6983      	ldr	r3, [r0, #24]
 800a67e:	b90b      	cbnz	r3, 800a684 <_vfiprintf_r+0x18>
 800a680:	f000 fb16 	bl	800acb0 <__sinit>
 800a684:	4b89      	ldr	r3, [pc, #548]	; (800a8ac <_vfiprintf_r+0x240>)
 800a686:	429d      	cmp	r5, r3
 800a688:	d11b      	bne.n	800a6c2 <_vfiprintf_r+0x56>
 800a68a:	6875      	ldr	r5, [r6, #4]
 800a68c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a68e:	07d9      	lsls	r1, r3, #31
 800a690:	d405      	bmi.n	800a69e <_vfiprintf_r+0x32>
 800a692:	89ab      	ldrh	r3, [r5, #12]
 800a694:	059a      	lsls	r2, r3, #22
 800a696:	d402      	bmi.n	800a69e <_vfiprintf_r+0x32>
 800a698:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a69a:	f000 fba7 	bl	800adec <__retarget_lock_acquire_recursive>
 800a69e:	89ab      	ldrh	r3, [r5, #12]
 800a6a0:	071b      	lsls	r3, r3, #28
 800a6a2:	d501      	bpl.n	800a6a8 <_vfiprintf_r+0x3c>
 800a6a4:	692b      	ldr	r3, [r5, #16]
 800a6a6:	b9eb      	cbnz	r3, 800a6e4 <_vfiprintf_r+0x78>
 800a6a8:	4629      	mov	r1, r5
 800a6aa:	4630      	mov	r0, r6
 800a6ac:	f000 f970 	bl	800a990 <__swsetup_r>
 800a6b0:	b1c0      	cbz	r0, 800a6e4 <_vfiprintf_r+0x78>
 800a6b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a6b4:	07dc      	lsls	r4, r3, #31
 800a6b6:	d50e      	bpl.n	800a6d6 <_vfiprintf_r+0x6a>
 800a6b8:	f04f 30ff 	mov.w	r0, #4294967295
 800a6bc:	b01d      	add	sp, #116	; 0x74
 800a6be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6c2:	4b7b      	ldr	r3, [pc, #492]	; (800a8b0 <_vfiprintf_r+0x244>)
 800a6c4:	429d      	cmp	r5, r3
 800a6c6:	d101      	bne.n	800a6cc <_vfiprintf_r+0x60>
 800a6c8:	68b5      	ldr	r5, [r6, #8]
 800a6ca:	e7df      	b.n	800a68c <_vfiprintf_r+0x20>
 800a6cc:	4b79      	ldr	r3, [pc, #484]	; (800a8b4 <_vfiprintf_r+0x248>)
 800a6ce:	429d      	cmp	r5, r3
 800a6d0:	bf08      	it	eq
 800a6d2:	68f5      	ldreq	r5, [r6, #12]
 800a6d4:	e7da      	b.n	800a68c <_vfiprintf_r+0x20>
 800a6d6:	89ab      	ldrh	r3, [r5, #12]
 800a6d8:	0598      	lsls	r0, r3, #22
 800a6da:	d4ed      	bmi.n	800a6b8 <_vfiprintf_r+0x4c>
 800a6dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a6de:	f000 fb86 	bl	800adee <__retarget_lock_release_recursive>
 800a6e2:	e7e9      	b.n	800a6b8 <_vfiprintf_r+0x4c>
 800a6e4:	2300      	movs	r3, #0
 800a6e6:	9309      	str	r3, [sp, #36]	; 0x24
 800a6e8:	2320      	movs	r3, #32
 800a6ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a6ee:	f8cd 800c 	str.w	r8, [sp, #12]
 800a6f2:	2330      	movs	r3, #48	; 0x30
 800a6f4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a8b8 <_vfiprintf_r+0x24c>
 800a6f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a6fc:	f04f 0901 	mov.w	r9, #1
 800a700:	4623      	mov	r3, r4
 800a702:	469a      	mov	sl, r3
 800a704:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a708:	b10a      	cbz	r2, 800a70e <_vfiprintf_r+0xa2>
 800a70a:	2a25      	cmp	r2, #37	; 0x25
 800a70c:	d1f9      	bne.n	800a702 <_vfiprintf_r+0x96>
 800a70e:	ebba 0b04 	subs.w	fp, sl, r4
 800a712:	d00b      	beq.n	800a72c <_vfiprintf_r+0xc0>
 800a714:	465b      	mov	r3, fp
 800a716:	4622      	mov	r2, r4
 800a718:	4629      	mov	r1, r5
 800a71a:	4630      	mov	r0, r6
 800a71c:	f7ff ff93 	bl	800a646 <__sfputs_r>
 800a720:	3001      	adds	r0, #1
 800a722:	f000 80aa 	beq.w	800a87a <_vfiprintf_r+0x20e>
 800a726:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a728:	445a      	add	r2, fp
 800a72a:	9209      	str	r2, [sp, #36]	; 0x24
 800a72c:	f89a 3000 	ldrb.w	r3, [sl]
 800a730:	2b00      	cmp	r3, #0
 800a732:	f000 80a2 	beq.w	800a87a <_vfiprintf_r+0x20e>
 800a736:	2300      	movs	r3, #0
 800a738:	f04f 32ff 	mov.w	r2, #4294967295
 800a73c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a740:	f10a 0a01 	add.w	sl, sl, #1
 800a744:	9304      	str	r3, [sp, #16]
 800a746:	9307      	str	r3, [sp, #28]
 800a748:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a74c:	931a      	str	r3, [sp, #104]	; 0x68
 800a74e:	4654      	mov	r4, sl
 800a750:	2205      	movs	r2, #5
 800a752:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a756:	4858      	ldr	r0, [pc, #352]	; (800a8b8 <_vfiprintf_r+0x24c>)
 800a758:	f7f5 fd7a 	bl	8000250 <memchr>
 800a75c:	9a04      	ldr	r2, [sp, #16]
 800a75e:	b9d8      	cbnz	r0, 800a798 <_vfiprintf_r+0x12c>
 800a760:	06d1      	lsls	r1, r2, #27
 800a762:	bf44      	itt	mi
 800a764:	2320      	movmi	r3, #32
 800a766:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a76a:	0713      	lsls	r3, r2, #28
 800a76c:	bf44      	itt	mi
 800a76e:	232b      	movmi	r3, #43	; 0x2b
 800a770:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a774:	f89a 3000 	ldrb.w	r3, [sl]
 800a778:	2b2a      	cmp	r3, #42	; 0x2a
 800a77a:	d015      	beq.n	800a7a8 <_vfiprintf_r+0x13c>
 800a77c:	9a07      	ldr	r2, [sp, #28]
 800a77e:	4654      	mov	r4, sl
 800a780:	2000      	movs	r0, #0
 800a782:	f04f 0c0a 	mov.w	ip, #10
 800a786:	4621      	mov	r1, r4
 800a788:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a78c:	3b30      	subs	r3, #48	; 0x30
 800a78e:	2b09      	cmp	r3, #9
 800a790:	d94e      	bls.n	800a830 <_vfiprintf_r+0x1c4>
 800a792:	b1b0      	cbz	r0, 800a7c2 <_vfiprintf_r+0x156>
 800a794:	9207      	str	r2, [sp, #28]
 800a796:	e014      	b.n	800a7c2 <_vfiprintf_r+0x156>
 800a798:	eba0 0308 	sub.w	r3, r0, r8
 800a79c:	fa09 f303 	lsl.w	r3, r9, r3
 800a7a0:	4313      	orrs	r3, r2
 800a7a2:	9304      	str	r3, [sp, #16]
 800a7a4:	46a2      	mov	sl, r4
 800a7a6:	e7d2      	b.n	800a74e <_vfiprintf_r+0xe2>
 800a7a8:	9b03      	ldr	r3, [sp, #12]
 800a7aa:	1d19      	adds	r1, r3, #4
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	9103      	str	r1, [sp, #12]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	bfbb      	ittet	lt
 800a7b4:	425b      	neglt	r3, r3
 800a7b6:	f042 0202 	orrlt.w	r2, r2, #2
 800a7ba:	9307      	strge	r3, [sp, #28]
 800a7bc:	9307      	strlt	r3, [sp, #28]
 800a7be:	bfb8      	it	lt
 800a7c0:	9204      	strlt	r2, [sp, #16]
 800a7c2:	7823      	ldrb	r3, [r4, #0]
 800a7c4:	2b2e      	cmp	r3, #46	; 0x2e
 800a7c6:	d10c      	bne.n	800a7e2 <_vfiprintf_r+0x176>
 800a7c8:	7863      	ldrb	r3, [r4, #1]
 800a7ca:	2b2a      	cmp	r3, #42	; 0x2a
 800a7cc:	d135      	bne.n	800a83a <_vfiprintf_r+0x1ce>
 800a7ce:	9b03      	ldr	r3, [sp, #12]
 800a7d0:	1d1a      	adds	r2, r3, #4
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	9203      	str	r2, [sp, #12]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	bfb8      	it	lt
 800a7da:	f04f 33ff 	movlt.w	r3, #4294967295
 800a7de:	3402      	adds	r4, #2
 800a7e0:	9305      	str	r3, [sp, #20]
 800a7e2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a8c8 <_vfiprintf_r+0x25c>
 800a7e6:	7821      	ldrb	r1, [r4, #0]
 800a7e8:	2203      	movs	r2, #3
 800a7ea:	4650      	mov	r0, sl
 800a7ec:	f7f5 fd30 	bl	8000250 <memchr>
 800a7f0:	b140      	cbz	r0, 800a804 <_vfiprintf_r+0x198>
 800a7f2:	2340      	movs	r3, #64	; 0x40
 800a7f4:	eba0 000a 	sub.w	r0, r0, sl
 800a7f8:	fa03 f000 	lsl.w	r0, r3, r0
 800a7fc:	9b04      	ldr	r3, [sp, #16]
 800a7fe:	4303      	orrs	r3, r0
 800a800:	3401      	adds	r4, #1
 800a802:	9304      	str	r3, [sp, #16]
 800a804:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a808:	482c      	ldr	r0, [pc, #176]	; (800a8bc <_vfiprintf_r+0x250>)
 800a80a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a80e:	2206      	movs	r2, #6
 800a810:	f7f5 fd1e 	bl	8000250 <memchr>
 800a814:	2800      	cmp	r0, #0
 800a816:	d03f      	beq.n	800a898 <_vfiprintf_r+0x22c>
 800a818:	4b29      	ldr	r3, [pc, #164]	; (800a8c0 <_vfiprintf_r+0x254>)
 800a81a:	bb1b      	cbnz	r3, 800a864 <_vfiprintf_r+0x1f8>
 800a81c:	9b03      	ldr	r3, [sp, #12]
 800a81e:	3307      	adds	r3, #7
 800a820:	f023 0307 	bic.w	r3, r3, #7
 800a824:	3308      	adds	r3, #8
 800a826:	9303      	str	r3, [sp, #12]
 800a828:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a82a:	443b      	add	r3, r7
 800a82c:	9309      	str	r3, [sp, #36]	; 0x24
 800a82e:	e767      	b.n	800a700 <_vfiprintf_r+0x94>
 800a830:	fb0c 3202 	mla	r2, ip, r2, r3
 800a834:	460c      	mov	r4, r1
 800a836:	2001      	movs	r0, #1
 800a838:	e7a5      	b.n	800a786 <_vfiprintf_r+0x11a>
 800a83a:	2300      	movs	r3, #0
 800a83c:	3401      	adds	r4, #1
 800a83e:	9305      	str	r3, [sp, #20]
 800a840:	4619      	mov	r1, r3
 800a842:	f04f 0c0a 	mov.w	ip, #10
 800a846:	4620      	mov	r0, r4
 800a848:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a84c:	3a30      	subs	r2, #48	; 0x30
 800a84e:	2a09      	cmp	r2, #9
 800a850:	d903      	bls.n	800a85a <_vfiprintf_r+0x1ee>
 800a852:	2b00      	cmp	r3, #0
 800a854:	d0c5      	beq.n	800a7e2 <_vfiprintf_r+0x176>
 800a856:	9105      	str	r1, [sp, #20]
 800a858:	e7c3      	b.n	800a7e2 <_vfiprintf_r+0x176>
 800a85a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a85e:	4604      	mov	r4, r0
 800a860:	2301      	movs	r3, #1
 800a862:	e7f0      	b.n	800a846 <_vfiprintf_r+0x1da>
 800a864:	ab03      	add	r3, sp, #12
 800a866:	9300      	str	r3, [sp, #0]
 800a868:	462a      	mov	r2, r5
 800a86a:	4b16      	ldr	r3, [pc, #88]	; (800a8c4 <_vfiprintf_r+0x258>)
 800a86c:	a904      	add	r1, sp, #16
 800a86e:	4630      	mov	r0, r6
 800a870:	f7fd fd52 	bl	8008318 <_printf_float>
 800a874:	4607      	mov	r7, r0
 800a876:	1c78      	adds	r0, r7, #1
 800a878:	d1d6      	bne.n	800a828 <_vfiprintf_r+0x1bc>
 800a87a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a87c:	07d9      	lsls	r1, r3, #31
 800a87e:	d405      	bmi.n	800a88c <_vfiprintf_r+0x220>
 800a880:	89ab      	ldrh	r3, [r5, #12]
 800a882:	059a      	lsls	r2, r3, #22
 800a884:	d402      	bmi.n	800a88c <_vfiprintf_r+0x220>
 800a886:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a888:	f000 fab1 	bl	800adee <__retarget_lock_release_recursive>
 800a88c:	89ab      	ldrh	r3, [r5, #12]
 800a88e:	065b      	lsls	r3, r3, #25
 800a890:	f53f af12 	bmi.w	800a6b8 <_vfiprintf_r+0x4c>
 800a894:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a896:	e711      	b.n	800a6bc <_vfiprintf_r+0x50>
 800a898:	ab03      	add	r3, sp, #12
 800a89a:	9300      	str	r3, [sp, #0]
 800a89c:	462a      	mov	r2, r5
 800a89e:	4b09      	ldr	r3, [pc, #36]	; (800a8c4 <_vfiprintf_r+0x258>)
 800a8a0:	a904      	add	r1, sp, #16
 800a8a2:	4630      	mov	r0, r6
 800a8a4:	f7fd ffdc 	bl	8008860 <_printf_i>
 800a8a8:	e7e4      	b.n	800a874 <_vfiprintf_r+0x208>
 800a8aa:	bf00      	nop
 800a8ac:	0800b680 	.word	0x0800b680
 800a8b0:	0800b6a0 	.word	0x0800b6a0
 800a8b4:	0800b660 	.word	0x0800b660
 800a8b8:	0800b64c 	.word	0x0800b64c
 800a8bc:	0800b656 	.word	0x0800b656
 800a8c0:	08008319 	.word	0x08008319
 800a8c4:	0800a647 	.word	0x0800a647
 800a8c8:	0800b652 	.word	0x0800b652

0800a8cc <_sbrk_r>:
 800a8cc:	b538      	push	{r3, r4, r5, lr}
 800a8ce:	4d06      	ldr	r5, [pc, #24]	; (800a8e8 <_sbrk_r+0x1c>)
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	4604      	mov	r4, r0
 800a8d4:	4608      	mov	r0, r1
 800a8d6:	602b      	str	r3, [r5, #0]
 800a8d8:	f7f6 fff2 	bl	80018c0 <_sbrk>
 800a8dc:	1c43      	adds	r3, r0, #1
 800a8de:	d102      	bne.n	800a8e6 <_sbrk_r+0x1a>
 800a8e0:	682b      	ldr	r3, [r5, #0]
 800a8e2:	b103      	cbz	r3, 800a8e6 <_sbrk_r+0x1a>
 800a8e4:	6023      	str	r3, [r4, #0]
 800a8e6:	bd38      	pop	{r3, r4, r5, pc}
 800a8e8:	20000524 	.word	0x20000524

0800a8ec <__swbuf_r>:
 800a8ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8ee:	460e      	mov	r6, r1
 800a8f0:	4614      	mov	r4, r2
 800a8f2:	4605      	mov	r5, r0
 800a8f4:	b118      	cbz	r0, 800a8fe <__swbuf_r+0x12>
 800a8f6:	6983      	ldr	r3, [r0, #24]
 800a8f8:	b90b      	cbnz	r3, 800a8fe <__swbuf_r+0x12>
 800a8fa:	f000 f9d9 	bl	800acb0 <__sinit>
 800a8fe:	4b21      	ldr	r3, [pc, #132]	; (800a984 <__swbuf_r+0x98>)
 800a900:	429c      	cmp	r4, r3
 800a902:	d12b      	bne.n	800a95c <__swbuf_r+0x70>
 800a904:	686c      	ldr	r4, [r5, #4]
 800a906:	69a3      	ldr	r3, [r4, #24]
 800a908:	60a3      	str	r3, [r4, #8]
 800a90a:	89a3      	ldrh	r3, [r4, #12]
 800a90c:	071a      	lsls	r2, r3, #28
 800a90e:	d52f      	bpl.n	800a970 <__swbuf_r+0x84>
 800a910:	6923      	ldr	r3, [r4, #16]
 800a912:	b36b      	cbz	r3, 800a970 <__swbuf_r+0x84>
 800a914:	6923      	ldr	r3, [r4, #16]
 800a916:	6820      	ldr	r0, [r4, #0]
 800a918:	1ac0      	subs	r0, r0, r3
 800a91a:	6963      	ldr	r3, [r4, #20]
 800a91c:	b2f6      	uxtb	r6, r6
 800a91e:	4283      	cmp	r3, r0
 800a920:	4637      	mov	r7, r6
 800a922:	dc04      	bgt.n	800a92e <__swbuf_r+0x42>
 800a924:	4621      	mov	r1, r4
 800a926:	4628      	mov	r0, r5
 800a928:	f000 f92e 	bl	800ab88 <_fflush_r>
 800a92c:	bb30      	cbnz	r0, 800a97c <__swbuf_r+0x90>
 800a92e:	68a3      	ldr	r3, [r4, #8]
 800a930:	3b01      	subs	r3, #1
 800a932:	60a3      	str	r3, [r4, #8]
 800a934:	6823      	ldr	r3, [r4, #0]
 800a936:	1c5a      	adds	r2, r3, #1
 800a938:	6022      	str	r2, [r4, #0]
 800a93a:	701e      	strb	r6, [r3, #0]
 800a93c:	6963      	ldr	r3, [r4, #20]
 800a93e:	3001      	adds	r0, #1
 800a940:	4283      	cmp	r3, r0
 800a942:	d004      	beq.n	800a94e <__swbuf_r+0x62>
 800a944:	89a3      	ldrh	r3, [r4, #12]
 800a946:	07db      	lsls	r3, r3, #31
 800a948:	d506      	bpl.n	800a958 <__swbuf_r+0x6c>
 800a94a:	2e0a      	cmp	r6, #10
 800a94c:	d104      	bne.n	800a958 <__swbuf_r+0x6c>
 800a94e:	4621      	mov	r1, r4
 800a950:	4628      	mov	r0, r5
 800a952:	f000 f919 	bl	800ab88 <_fflush_r>
 800a956:	b988      	cbnz	r0, 800a97c <__swbuf_r+0x90>
 800a958:	4638      	mov	r0, r7
 800a95a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a95c:	4b0a      	ldr	r3, [pc, #40]	; (800a988 <__swbuf_r+0x9c>)
 800a95e:	429c      	cmp	r4, r3
 800a960:	d101      	bne.n	800a966 <__swbuf_r+0x7a>
 800a962:	68ac      	ldr	r4, [r5, #8]
 800a964:	e7cf      	b.n	800a906 <__swbuf_r+0x1a>
 800a966:	4b09      	ldr	r3, [pc, #36]	; (800a98c <__swbuf_r+0xa0>)
 800a968:	429c      	cmp	r4, r3
 800a96a:	bf08      	it	eq
 800a96c:	68ec      	ldreq	r4, [r5, #12]
 800a96e:	e7ca      	b.n	800a906 <__swbuf_r+0x1a>
 800a970:	4621      	mov	r1, r4
 800a972:	4628      	mov	r0, r5
 800a974:	f000 f80c 	bl	800a990 <__swsetup_r>
 800a978:	2800      	cmp	r0, #0
 800a97a:	d0cb      	beq.n	800a914 <__swbuf_r+0x28>
 800a97c:	f04f 37ff 	mov.w	r7, #4294967295
 800a980:	e7ea      	b.n	800a958 <__swbuf_r+0x6c>
 800a982:	bf00      	nop
 800a984:	0800b680 	.word	0x0800b680
 800a988:	0800b6a0 	.word	0x0800b6a0
 800a98c:	0800b660 	.word	0x0800b660

0800a990 <__swsetup_r>:
 800a990:	4b32      	ldr	r3, [pc, #200]	; (800aa5c <__swsetup_r+0xcc>)
 800a992:	b570      	push	{r4, r5, r6, lr}
 800a994:	681d      	ldr	r5, [r3, #0]
 800a996:	4606      	mov	r6, r0
 800a998:	460c      	mov	r4, r1
 800a99a:	b125      	cbz	r5, 800a9a6 <__swsetup_r+0x16>
 800a99c:	69ab      	ldr	r3, [r5, #24]
 800a99e:	b913      	cbnz	r3, 800a9a6 <__swsetup_r+0x16>
 800a9a0:	4628      	mov	r0, r5
 800a9a2:	f000 f985 	bl	800acb0 <__sinit>
 800a9a6:	4b2e      	ldr	r3, [pc, #184]	; (800aa60 <__swsetup_r+0xd0>)
 800a9a8:	429c      	cmp	r4, r3
 800a9aa:	d10f      	bne.n	800a9cc <__swsetup_r+0x3c>
 800a9ac:	686c      	ldr	r4, [r5, #4]
 800a9ae:	89a3      	ldrh	r3, [r4, #12]
 800a9b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a9b4:	0719      	lsls	r1, r3, #28
 800a9b6:	d42c      	bmi.n	800aa12 <__swsetup_r+0x82>
 800a9b8:	06dd      	lsls	r5, r3, #27
 800a9ba:	d411      	bmi.n	800a9e0 <__swsetup_r+0x50>
 800a9bc:	2309      	movs	r3, #9
 800a9be:	6033      	str	r3, [r6, #0]
 800a9c0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a9c4:	81a3      	strh	r3, [r4, #12]
 800a9c6:	f04f 30ff 	mov.w	r0, #4294967295
 800a9ca:	e03e      	b.n	800aa4a <__swsetup_r+0xba>
 800a9cc:	4b25      	ldr	r3, [pc, #148]	; (800aa64 <__swsetup_r+0xd4>)
 800a9ce:	429c      	cmp	r4, r3
 800a9d0:	d101      	bne.n	800a9d6 <__swsetup_r+0x46>
 800a9d2:	68ac      	ldr	r4, [r5, #8]
 800a9d4:	e7eb      	b.n	800a9ae <__swsetup_r+0x1e>
 800a9d6:	4b24      	ldr	r3, [pc, #144]	; (800aa68 <__swsetup_r+0xd8>)
 800a9d8:	429c      	cmp	r4, r3
 800a9da:	bf08      	it	eq
 800a9dc:	68ec      	ldreq	r4, [r5, #12]
 800a9de:	e7e6      	b.n	800a9ae <__swsetup_r+0x1e>
 800a9e0:	0758      	lsls	r0, r3, #29
 800a9e2:	d512      	bpl.n	800aa0a <__swsetup_r+0x7a>
 800a9e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a9e6:	b141      	cbz	r1, 800a9fa <__swsetup_r+0x6a>
 800a9e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a9ec:	4299      	cmp	r1, r3
 800a9ee:	d002      	beq.n	800a9f6 <__swsetup_r+0x66>
 800a9f0:	4630      	mov	r0, r6
 800a9f2:	f7ff fbd5 	bl	800a1a0 <_free_r>
 800a9f6:	2300      	movs	r3, #0
 800a9f8:	6363      	str	r3, [r4, #52]	; 0x34
 800a9fa:	89a3      	ldrh	r3, [r4, #12]
 800a9fc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800aa00:	81a3      	strh	r3, [r4, #12]
 800aa02:	2300      	movs	r3, #0
 800aa04:	6063      	str	r3, [r4, #4]
 800aa06:	6923      	ldr	r3, [r4, #16]
 800aa08:	6023      	str	r3, [r4, #0]
 800aa0a:	89a3      	ldrh	r3, [r4, #12]
 800aa0c:	f043 0308 	orr.w	r3, r3, #8
 800aa10:	81a3      	strh	r3, [r4, #12]
 800aa12:	6923      	ldr	r3, [r4, #16]
 800aa14:	b94b      	cbnz	r3, 800aa2a <__swsetup_r+0x9a>
 800aa16:	89a3      	ldrh	r3, [r4, #12]
 800aa18:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800aa1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aa20:	d003      	beq.n	800aa2a <__swsetup_r+0x9a>
 800aa22:	4621      	mov	r1, r4
 800aa24:	4630      	mov	r0, r6
 800aa26:	f000 fa09 	bl	800ae3c <__smakebuf_r>
 800aa2a:	89a0      	ldrh	r0, [r4, #12]
 800aa2c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aa30:	f010 0301 	ands.w	r3, r0, #1
 800aa34:	d00a      	beq.n	800aa4c <__swsetup_r+0xbc>
 800aa36:	2300      	movs	r3, #0
 800aa38:	60a3      	str	r3, [r4, #8]
 800aa3a:	6963      	ldr	r3, [r4, #20]
 800aa3c:	425b      	negs	r3, r3
 800aa3e:	61a3      	str	r3, [r4, #24]
 800aa40:	6923      	ldr	r3, [r4, #16]
 800aa42:	b943      	cbnz	r3, 800aa56 <__swsetup_r+0xc6>
 800aa44:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800aa48:	d1ba      	bne.n	800a9c0 <__swsetup_r+0x30>
 800aa4a:	bd70      	pop	{r4, r5, r6, pc}
 800aa4c:	0781      	lsls	r1, r0, #30
 800aa4e:	bf58      	it	pl
 800aa50:	6963      	ldrpl	r3, [r4, #20]
 800aa52:	60a3      	str	r3, [r4, #8]
 800aa54:	e7f4      	b.n	800aa40 <__swsetup_r+0xb0>
 800aa56:	2000      	movs	r0, #0
 800aa58:	e7f7      	b.n	800aa4a <__swsetup_r+0xba>
 800aa5a:	bf00      	nop
 800aa5c:	20000128 	.word	0x20000128
 800aa60:	0800b680 	.word	0x0800b680
 800aa64:	0800b6a0 	.word	0x0800b6a0
 800aa68:	0800b660 	.word	0x0800b660

0800aa6c <abort>:
 800aa6c:	b508      	push	{r3, lr}
 800aa6e:	2006      	movs	r0, #6
 800aa70:	f000 fab4 	bl	800afdc <raise>
 800aa74:	2001      	movs	r0, #1
 800aa76:	f7f6 feab 	bl	80017d0 <_exit>
	...

0800aa7c <__sflush_r>:
 800aa7c:	898a      	ldrh	r2, [r1, #12]
 800aa7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa82:	4605      	mov	r5, r0
 800aa84:	0710      	lsls	r0, r2, #28
 800aa86:	460c      	mov	r4, r1
 800aa88:	d458      	bmi.n	800ab3c <__sflush_r+0xc0>
 800aa8a:	684b      	ldr	r3, [r1, #4]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	dc05      	bgt.n	800aa9c <__sflush_r+0x20>
 800aa90:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	dc02      	bgt.n	800aa9c <__sflush_r+0x20>
 800aa96:	2000      	movs	r0, #0
 800aa98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aa9e:	2e00      	cmp	r6, #0
 800aaa0:	d0f9      	beq.n	800aa96 <__sflush_r+0x1a>
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800aaa8:	682f      	ldr	r7, [r5, #0]
 800aaaa:	602b      	str	r3, [r5, #0]
 800aaac:	d032      	beq.n	800ab14 <__sflush_r+0x98>
 800aaae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800aab0:	89a3      	ldrh	r3, [r4, #12]
 800aab2:	075a      	lsls	r2, r3, #29
 800aab4:	d505      	bpl.n	800aac2 <__sflush_r+0x46>
 800aab6:	6863      	ldr	r3, [r4, #4]
 800aab8:	1ac0      	subs	r0, r0, r3
 800aaba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800aabc:	b10b      	cbz	r3, 800aac2 <__sflush_r+0x46>
 800aabe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800aac0:	1ac0      	subs	r0, r0, r3
 800aac2:	2300      	movs	r3, #0
 800aac4:	4602      	mov	r2, r0
 800aac6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aac8:	6a21      	ldr	r1, [r4, #32]
 800aaca:	4628      	mov	r0, r5
 800aacc:	47b0      	blx	r6
 800aace:	1c43      	adds	r3, r0, #1
 800aad0:	89a3      	ldrh	r3, [r4, #12]
 800aad2:	d106      	bne.n	800aae2 <__sflush_r+0x66>
 800aad4:	6829      	ldr	r1, [r5, #0]
 800aad6:	291d      	cmp	r1, #29
 800aad8:	d82c      	bhi.n	800ab34 <__sflush_r+0xb8>
 800aada:	4a2a      	ldr	r2, [pc, #168]	; (800ab84 <__sflush_r+0x108>)
 800aadc:	40ca      	lsrs	r2, r1
 800aade:	07d6      	lsls	r6, r2, #31
 800aae0:	d528      	bpl.n	800ab34 <__sflush_r+0xb8>
 800aae2:	2200      	movs	r2, #0
 800aae4:	6062      	str	r2, [r4, #4]
 800aae6:	04d9      	lsls	r1, r3, #19
 800aae8:	6922      	ldr	r2, [r4, #16]
 800aaea:	6022      	str	r2, [r4, #0]
 800aaec:	d504      	bpl.n	800aaf8 <__sflush_r+0x7c>
 800aaee:	1c42      	adds	r2, r0, #1
 800aaf0:	d101      	bne.n	800aaf6 <__sflush_r+0x7a>
 800aaf2:	682b      	ldr	r3, [r5, #0]
 800aaf4:	b903      	cbnz	r3, 800aaf8 <__sflush_r+0x7c>
 800aaf6:	6560      	str	r0, [r4, #84]	; 0x54
 800aaf8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aafa:	602f      	str	r7, [r5, #0]
 800aafc:	2900      	cmp	r1, #0
 800aafe:	d0ca      	beq.n	800aa96 <__sflush_r+0x1a>
 800ab00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ab04:	4299      	cmp	r1, r3
 800ab06:	d002      	beq.n	800ab0e <__sflush_r+0x92>
 800ab08:	4628      	mov	r0, r5
 800ab0a:	f7ff fb49 	bl	800a1a0 <_free_r>
 800ab0e:	2000      	movs	r0, #0
 800ab10:	6360      	str	r0, [r4, #52]	; 0x34
 800ab12:	e7c1      	b.n	800aa98 <__sflush_r+0x1c>
 800ab14:	6a21      	ldr	r1, [r4, #32]
 800ab16:	2301      	movs	r3, #1
 800ab18:	4628      	mov	r0, r5
 800ab1a:	47b0      	blx	r6
 800ab1c:	1c41      	adds	r1, r0, #1
 800ab1e:	d1c7      	bne.n	800aab0 <__sflush_r+0x34>
 800ab20:	682b      	ldr	r3, [r5, #0]
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d0c4      	beq.n	800aab0 <__sflush_r+0x34>
 800ab26:	2b1d      	cmp	r3, #29
 800ab28:	d001      	beq.n	800ab2e <__sflush_r+0xb2>
 800ab2a:	2b16      	cmp	r3, #22
 800ab2c:	d101      	bne.n	800ab32 <__sflush_r+0xb6>
 800ab2e:	602f      	str	r7, [r5, #0]
 800ab30:	e7b1      	b.n	800aa96 <__sflush_r+0x1a>
 800ab32:	89a3      	ldrh	r3, [r4, #12]
 800ab34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab38:	81a3      	strh	r3, [r4, #12]
 800ab3a:	e7ad      	b.n	800aa98 <__sflush_r+0x1c>
 800ab3c:	690f      	ldr	r7, [r1, #16]
 800ab3e:	2f00      	cmp	r7, #0
 800ab40:	d0a9      	beq.n	800aa96 <__sflush_r+0x1a>
 800ab42:	0793      	lsls	r3, r2, #30
 800ab44:	680e      	ldr	r6, [r1, #0]
 800ab46:	bf08      	it	eq
 800ab48:	694b      	ldreq	r3, [r1, #20]
 800ab4a:	600f      	str	r7, [r1, #0]
 800ab4c:	bf18      	it	ne
 800ab4e:	2300      	movne	r3, #0
 800ab50:	eba6 0807 	sub.w	r8, r6, r7
 800ab54:	608b      	str	r3, [r1, #8]
 800ab56:	f1b8 0f00 	cmp.w	r8, #0
 800ab5a:	dd9c      	ble.n	800aa96 <__sflush_r+0x1a>
 800ab5c:	6a21      	ldr	r1, [r4, #32]
 800ab5e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ab60:	4643      	mov	r3, r8
 800ab62:	463a      	mov	r2, r7
 800ab64:	4628      	mov	r0, r5
 800ab66:	47b0      	blx	r6
 800ab68:	2800      	cmp	r0, #0
 800ab6a:	dc06      	bgt.n	800ab7a <__sflush_r+0xfe>
 800ab6c:	89a3      	ldrh	r3, [r4, #12]
 800ab6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab72:	81a3      	strh	r3, [r4, #12]
 800ab74:	f04f 30ff 	mov.w	r0, #4294967295
 800ab78:	e78e      	b.n	800aa98 <__sflush_r+0x1c>
 800ab7a:	4407      	add	r7, r0
 800ab7c:	eba8 0800 	sub.w	r8, r8, r0
 800ab80:	e7e9      	b.n	800ab56 <__sflush_r+0xda>
 800ab82:	bf00      	nop
 800ab84:	20400001 	.word	0x20400001

0800ab88 <_fflush_r>:
 800ab88:	b538      	push	{r3, r4, r5, lr}
 800ab8a:	690b      	ldr	r3, [r1, #16]
 800ab8c:	4605      	mov	r5, r0
 800ab8e:	460c      	mov	r4, r1
 800ab90:	b913      	cbnz	r3, 800ab98 <_fflush_r+0x10>
 800ab92:	2500      	movs	r5, #0
 800ab94:	4628      	mov	r0, r5
 800ab96:	bd38      	pop	{r3, r4, r5, pc}
 800ab98:	b118      	cbz	r0, 800aba2 <_fflush_r+0x1a>
 800ab9a:	6983      	ldr	r3, [r0, #24]
 800ab9c:	b90b      	cbnz	r3, 800aba2 <_fflush_r+0x1a>
 800ab9e:	f000 f887 	bl	800acb0 <__sinit>
 800aba2:	4b14      	ldr	r3, [pc, #80]	; (800abf4 <_fflush_r+0x6c>)
 800aba4:	429c      	cmp	r4, r3
 800aba6:	d11b      	bne.n	800abe0 <_fflush_r+0x58>
 800aba8:	686c      	ldr	r4, [r5, #4]
 800abaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d0ef      	beq.n	800ab92 <_fflush_r+0xa>
 800abb2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800abb4:	07d0      	lsls	r0, r2, #31
 800abb6:	d404      	bmi.n	800abc2 <_fflush_r+0x3a>
 800abb8:	0599      	lsls	r1, r3, #22
 800abba:	d402      	bmi.n	800abc2 <_fflush_r+0x3a>
 800abbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800abbe:	f000 f915 	bl	800adec <__retarget_lock_acquire_recursive>
 800abc2:	4628      	mov	r0, r5
 800abc4:	4621      	mov	r1, r4
 800abc6:	f7ff ff59 	bl	800aa7c <__sflush_r>
 800abca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800abcc:	07da      	lsls	r2, r3, #31
 800abce:	4605      	mov	r5, r0
 800abd0:	d4e0      	bmi.n	800ab94 <_fflush_r+0xc>
 800abd2:	89a3      	ldrh	r3, [r4, #12]
 800abd4:	059b      	lsls	r3, r3, #22
 800abd6:	d4dd      	bmi.n	800ab94 <_fflush_r+0xc>
 800abd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800abda:	f000 f908 	bl	800adee <__retarget_lock_release_recursive>
 800abde:	e7d9      	b.n	800ab94 <_fflush_r+0xc>
 800abe0:	4b05      	ldr	r3, [pc, #20]	; (800abf8 <_fflush_r+0x70>)
 800abe2:	429c      	cmp	r4, r3
 800abe4:	d101      	bne.n	800abea <_fflush_r+0x62>
 800abe6:	68ac      	ldr	r4, [r5, #8]
 800abe8:	e7df      	b.n	800abaa <_fflush_r+0x22>
 800abea:	4b04      	ldr	r3, [pc, #16]	; (800abfc <_fflush_r+0x74>)
 800abec:	429c      	cmp	r4, r3
 800abee:	bf08      	it	eq
 800abf0:	68ec      	ldreq	r4, [r5, #12]
 800abf2:	e7da      	b.n	800abaa <_fflush_r+0x22>
 800abf4:	0800b680 	.word	0x0800b680
 800abf8:	0800b6a0 	.word	0x0800b6a0
 800abfc:	0800b660 	.word	0x0800b660

0800ac00 <std>:
 800ac00:	2300      	movs	r3, #0
 800ac02:	b510      	push	{r4, lr}
 800ac04:	4604      	mov	r4, r0
 800ac06:	e9c0 3300 	strd	r3, r3, [r0]
 800ac0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ac0e:	6083      	str	r3, [r0, #8]
 800ac10:	8181      	strh	r1, [r0, #12]
 800ac12:	6643      	str	r3, [r0, #100]	; 0x64
 800ac14:	81c2      	strh	r2, [r0, #14]
 800ac16:	6183      	str	r3, [r0, #24]
 800ac18:	4619      	mov	r1, r3
 800ac1a:	2208      	movs	r2, #8
 800ac1c:	305c      	adds	r0, #92	; 0x5c
 800ac1e:	f7fd fad3 	bl	80081c8 <memset>
 800ac22:	4b05      	ldr	r3, [pc, #20]	; (800ac38 <std+0x38>)
 800ac24:	6263      	str	r3, [r4, #36]	; 0x24
 800ac26:	4b05      	ldr	r3, [pc, #20]	; (800ac3c <std+0x3c>)
 800ac28:	62a3      	str	r3, [r4, #40]	; 0x28
 800ac2a:	4b05      	ldr	r3, [pc, #20]	; (800ac40 <std+0x40>)
 800ac2c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ac2e:	4b05      	ldr	r3, [pc, #20]	; (800ac44 <std+0x44>)
 800ac30:	6224      	str	r4, [r4, #32]
 800ac32:	6323      	str	r3, [r4, #48]	; 0x30
 800ac34:	bd10      	pop	{r4, pc}
 800ac36:	bf00      	nop
 800ac38:	0800b015 	.word	0x0800b015
 800ac3c:	0800b037 	.word	0x0800b037
 800ac40:	0800b06f 	.word	0x0800b06f
 800ac44:	0800b093 	.word	0x0800b093

0800ac48 <_cleanup_r>:
 800ac48:	4901      	ldr	r1, [pc, #4]	; (800ac50 <_cleanup_r+0x8>)
 800ac4a:	f000 b8af 	b.w	800adac <_fwalk_reent>
 800ac4e:	bf00      	nop
 800ac50:	0800ab89 	.word	0x0800ab89

0800ac54 <__sfmoreglue>:
 800ac54:	b570      	push	{r4, r5, r6, lr}
 800ac56:	2268      	movs	r2, #104	; 0x68
 800ac58:	1e4d      	subs	r5, r1, #1
 800ac5a:	4355      	muls	r5, r2
 800ac5c:	460e      	mov	r6, r1
 800ac5e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ac62:	f7ff fb09 	bl	800a278 <_malloc_r>
 800ac66:	4604      	mov	r4, r0
 800ac68:	b140      	cbz	r0, 800ac7c <__sfmoreglue+0x28>
 800ac6a:	2100      	movs	r1, #0
 800ac6c:	e9c0 1600 	strd	r1, r6, [r0]
 800ac70:	300c      	adds	r0, #12
 800ac72:	60a0      	str	r0, [r4, #8]
 800ac74:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ac78:	f7fd faa6 	bl	80081c8 <memset>
 800ac7c:	4620      	mov	r0, r4
 800ac7e:	bd70      	pop	{r4, r5, r6, pc}

0800ac80 <__sfp_lock_acquire>:
 800ac80:	4801      	ldr	r0, [pc, #4]	; (800ac88 <__sfp_lock_acquire+0x8>)
 800ac82:	f000 b8b3 	b.w	800adec <__retarget_lock_acquire_recursive>
 800ac86:	bf00      	nop
 800ac88:	20000521 	.word	0x20000521

0800ac8c <__sfp_lock_release>:
 800ac8c:	4801      	ldr	r0, [pc, #4]	; (800ac94 <__sfp_lock_release+0x8>)
 800ac8e:	f000 b8ae 	b.w	800adee <__retarget_lock_release_recursive>
 800ac92:	bf00      	nop
 800ac94:	20000521 	.word	0x20000521

0800ac98 <__sinit_lock_acquire>:
 800ac98:	4801      	ldr	r0, [pc, #4]	; (800aca0 <__sinit_lock_acquire+0x8>)
 800ac9a:	f000 b8a7 	b.w	800adec <__retarget_lock_acquire_recursive>
 800ac9e:	bf00      	nop
 800aca0:	20000522 	.word	0x20000522

0800aca4 <__sinit_lock_release>:
 800aca4:	4801      	ldr	r0, [pc, #4]	; (800acac <__sinit_lock_release+0x8>)
 800aca6:	f000 b8a2 	b.w	800adee <__retarget_lock_release_recursive>
 800acaa:	bf00      	nop
 800acac:	20000522 	.word	0x20000522

0800acb0 <__sinit>:
 800acb0:	b510      	push	{r4, lr}
 800acb2:	4604      	mov	r4, r0
 800acb4:	f7ff fff0 	bl	800ac98 <__sinit_lock_acquire>
 800acb8:	69a3      	ldr	r3, [r4, #24]
 800acba:	b11b      	cbz	r3, 800acc4 <__sinit+0x14>
 800acbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800acc0:	f7ff bff0 	b.w	800aca4 <__sinit_lock_release>
 800acc4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800acc8:	6523      	str	r3, [r4, #80]	; 0x50
 800acca:	4b13      	ldr	r3, [pc, #76]	; (800ad18 <__sinit+0x68>)
 800accc:	4a13      	ldr	r2, [pc, #76]	; (800ad1c <__sinit+0x6c>)
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	62a2      	str	r2, [r4, #40]	; 0x28
 800acd2:	42a3      	cmp	r3, r4
 800acd4:	bf04      	itt	eq
 800acd6:	2301      	moveq	r3, #1
 800acd8:	61a3      	streq	r3, [r4, #24]
 800acda:	4620      	mov	r0, r4
 800acdc:	f000 f820 	bl	800ad20 <__sfp>
 800ace0:	6060      	str	r0, [r4, #4]
 800ace2:	4620      	mov	r0, r4
 800ace4:	f000 f81c 	bl	800ad20 <__sfp>
 800ace8:	60a0      	str	r0, [r4, #8]
 800acea:	4620      	mov	r0, r4
 800acec:	f000 f818 	bl	800ad20 <__sfp>
 800acf0:	2200      	movs	r2, #0
 800acf2:	60e0      	str	r0, [r4, #12]
 800acf4:	2104      	movs	r1, #4
 800acf6:	6860      	ldr	r0, [r4, #4]
 800acf8:	f7ff ff82 	bl	800ac00 <std>
 800acfc:	68a0      	ldr	r0, [r4, #8]
 800acfe:	2201      	movs	r2, #1
 800ad00:	2109      	movs	r1, #9
 800ad02:	f7ff ff7d 	bl	800ac00 <std>
 800ad06:	68e0      	ldr	r0, [r4, #12]
 800ad08:	2202      	movs	r2, #2
 800ad0a:	2112      	movs	r1, #18
 800ad0c:	f7ff ff78 	bl	800ac00 <std>
 800ad10:	2301      	movs	r3, #1
 800ad12:	61a3      	str	r3, [r4, #24]
 800ad14:	e7d2      	b.n	800acbc <__sinit+0xc>
 800ad16:	bf00      	nop
 800ad18:	0800b28c 	.word	0x0800b28c
 800ad1c:	0800ac49 	.word	0x0800ac49

0800ad20 <__sfp>:
 800ad20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad22:	4607      	mov	r7, r0
 800ad24:	f7ff ffac 	bl	800ac80 <__sfp_lock_acquire>
 800ad28:	4b1e      	ldr	r3, [pc, #120]	; (800ada4 <__sfp+0x84>)
 800ad2a:	681e      	ldr	r6, [r3, #0]
 800ad2c:	69b3      	ldr	r3, [r6, #24]
 800ad2e:	b913      	cbnz	r3, 800ad36 <__sfp+0x16>
 800ad30:	4630      	mov	r0, r6
 800ad32:	f7ff ffbd 	bl	800acb0 <__sinit>
 800ad36:	3648      	adds	r6, #72	; 0x48
 800ad38:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ad3c:	3b01      	subs	r3, #1
 800ad3e:	d503      	bpl.n	800ad48 <__sfp+0x28>
 800ad40:	6833      	ldr	r3, [r6, #0]
 800ad42:	b30b      	cbz	r3, 800ad88 <__sfp+0x68>
 800ad44:	6836      	ldr	r6, [r6, #0]
 800ad46:	e7f7      	b.n	800ad38 <__sfp+0x18>
 800ad48:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ad4c:	b9d5      	cbnz	r5, 800ad84 <__sfp+0x64>
 800ad4e:	4b16      	ldr	r3, [pc, #88]	; (800ada8 <__sfp+0x88>)
 800ad50:	60e3      	str	r3, [r4, #12]
 800ad52:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ad56:	6665      	str	r5, [r4, #100]	; 0x64
 800ad58:	f000 f847 	bl	800adea <__retarget_lock_init_recursive>
 800ad5c:	f7ff ff96 	bl	800ac8c <__sfp_lock_release>
 800ad60:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ad64:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ad68:	6025      	str	r5, [r4, #0]
 800ad6a:	61a5      	str	r5, [r4, #24]
 800ad6c:	2208      	movs	r2, #8
 800ad6e:	4629      	mov	r1, r5
 800ad70:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ad74:	f7fd fa28 	bl	80081c8 <memset>
 800ad78:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ad7c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ad80:	4620      	mov	r0, r4
 800ad82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad84:	3468      	adds	r4, #104	; 0x68
 800ad86:	e7d9      	b.n	800ad3c <__sfp+0x1c>
 800ad88:	2104      	movs	r1, #4
 800ad8a:	4638      	mov	r0, r7
 800ad8c:	f7ff ff62 	bl	800ac54 <__sfmoreglue>
 800ad90:	4604      	mov	r4, r0
 800ad92:	6030      	str	r0, [r6, #0]
 800ad94:	2800      	cmp	r0, #0
 800ad96:	d1d5      	bne.n	800ad44 <__sfp+0x24>
 800ad98:	f7ff ff78 	bl	800ac8c <__sfp_lock_release>
 800ad9c:	230c      	movs	r3, #12
 800ad9e:	603b      	str	r3, [r7, #0]
 800ada0:	e7ee      	b.n	800ad80 <__sfp+0x60>
 800ada2:	bf00      	nop
 800ada4:	0800b28c 	.word	0x0800b28c
 800ada8:	ffff0001 	.word	0xffff0001

0800adac <_fwalk_reent>:
 800adac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800adb0:	4606      	mov	r6, r0
 800adb2:	4688      	mov	r8, r1
 800adb4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800adb8:	2700      	movs	r7, #0
 800adba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800adbe:	f1b9 0901 	subs.w	r9, r9, #1
 800adc2:	d505      	bpl.n	800add0 <_fwalk_reent+0x24>
 800adc4:	6824      	ldr	r4, [r4, #0]
 800adc6:	2c00      	cmp	r4, #0
 800adc8:	d1f7      	bne.n	800adba <_fwalk_reent+0xe>
 800adca:	4638      	mov	r0, r7
 800adcc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800add0:	89ab      	ldrh	r3, [r5, #12]
 800add2:	2b01      	cmp	r3, #1
 800add4:	d907      	bls.n	800ade6 <_fwalk_reent+0x3a>
 800add6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800adda:	3301      	adds	r3, #1
 800addc:	d003      	beq.n	800ade6 <_fwalk_reent+0x3a>
 800adde:	4629      	mov	r1, r5
 800ade0:	4630      	mov	r0, r6
 800ade2:	47c0      	blx	r8
 800ade4:	4307      	orrs	r7, r0
 800ade6:	3568      	adds	r5, #104	; 0x68
 800ade8:	e7e9      	b.n	800adbe <_fwalk_reent+0x12>

0800adea <__retarget_lock_init_recursive>:
 800adea:	4770      	bx	lr

0800adec <__retarget_lock_acquire_recursive>:
 800adec:	4770      	bx	lr

0800adee <__retarget_lock_release_recursive>:
 800adee:	4770      	bx	lr

0800adf0 <__swhatbuf_r>:
 800adf0:	b570      	push	{r4, r5, r6, lr}
 800adf2:	460e      	mov	r6, r1
 800adf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800adf8:	2900      	cmp	r1, #0
 800adfa:	b096      	sub	sp, #88	; 0x58
 800adfc:	4614      	mov	r4, r2
 800adfe:	461d      	mov	r5, r3
 800ae00:	da08      	bge.n	800ae14 <__swhatbuf_r+0x24>
 800ae02:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ae06:	2200      	movs	r2, #0
 800ae08:	602a      	str	r2, [r5, #0]
 800ae0a:	061a      	lsls	r2, r3, #24
 800ae0c:	d410      	bmi.n	800ae30 <__swhatbuf_r+0x40>
 800ae0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae12:	e00e      	b.n	800ae32 <__swhatbuf_r+0x42>
 800ae14:	466a      	mov	r2, sp
 800ae16:	f000 f96f 	bl	800b0f8 <_fstat_r>
 800ae1a:	2800      	cmp	r0, #0
 800ae1c:	dbf1      	blt.n	800ae02 <__swhatbuf_r+0x12>
 800ae1e:	9a01      	ldr	r2, [sp, #4]
 800ae20:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ae24:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ae28:	425a      	negs	r2, r3
 800ae2a:	415a      	adcs	r2, r3
 800ae2c:	602a      	str	r2, [r5, #0]
 800ae2e:	e7ee      	b.n	800ae0e <__swhatbuf_r+0x1e>
 800ae30:	2340      	movs	r3, #64	; 0x40
 800ae32:	2000      	movs	r0, #0
 800ae34:	6023      	str	r3, [r4, #0]
 800ae36:	b016      	add	sp, #88	; 0x58
 800ae38:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ae3c <__smakebuf_r>:
 800ae3c:	898b      	ldrh	r3, [r1, #12]
 800ae3e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ae40:	079d      	lsls	r5, r3, #30
 800ae42:	4606      	mov	r6, r0
 800ae44:	460c      	mov	r4, r1
 800ae46:	d507      	bpl.n	800ae58 <__smakebuf_r+0x1c>
 800ae48:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ae4c:	6023      	str	r3, [r4, #0]
 800ae4e:	6123      	str	r3, [r4, #16]
 800ae50:	2301      	movs	r3, #1
 800ae52:	6163      	str	r3, [r4, #20]
 800ae54:	b002      	add	sp, #8
 800ae56:	bd70      	pop	{r4, r5, r6, pc}
 800ae58:	ab01      	add	r3, sp, #4
 800ae5a:	466a      	mov	r2, sp
 800ae5c:	f7ff ffc8 	bl	800adf0 <__swhatbuf_r>
 800ae60:	9900      	ldr	r1, [sp, #0]
 800ae62:	4605      	mov	r5, r0
 800ae64:	4630      	mov	r0, r6
 800ae66:	f7ff fa07 	bl	800a278 <_malloc_r>
 800ae6a:	b948      	cbnz	r0, 800ae80 <__smakebuf_r+0x44>
 800ae6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae70:	059a      	lsls	r2, r3, #22
 800ae72:	d4ef      	bmi.n	800ae54 <__smakebuf_r+0x18>
 800ae74:	f023 0303 	bic.w	r3, r3, #3
 800ae78:	f043 0302 	orr.w	r3, r3, #2
 800ae7c:	81a3      	strh	r3, [r4, #12]
 800ae7e:	e7e3      	b.n	800ae48 <__smakebuf_r+0xc>
 800ae80:	4b0d      	ldr	r3, [pc, #52]	; (800aeb8 <__smakebuf_r+0x7c>)
 800ae82:	62b3      	str	r3, [r6, #40]	; 0x28
 800ae84:	89a3      	ldrh	r3, [r4, #12]
 800ae86:	6020      	str	r0, [r4, #0]
 800ae88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae8c:	81a3      	strh	r3, [r4, #12]
 800ae8e:	9b00      	ldr	r3, [sp, #0]
 800ae90:	6163      	str	r3, [r4, #20]
 800ae92:	9b01      	ldr	r3, [sp, #4]
 800ae94:	6120      	str	r0, [r4, #16]
 800ae96:	b15b      	cbz	r3, 800aeb0 <__smakebuf_r+0x74>
 800ae98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ae9c:	4630      	mov	r0, r6
 800ae9e:	f000 f93d 	bl	800b11c <_isatty_r>
 800aea2:	b128      	cbz	r0, 800aeb0 <__smakebuf_r+0x74>
 800aea4:	89a3      	ldrh	r3, [r4, #12]
 800aea6:	f023 0303 	bic.w	r3, r3, #3
 800aeaa:	f043 0301 	orr.w	r3, r3, #1
 800aeae:	81a3      	strh	r3, [r4, #12]
 800aeb0:	89a0      	ldrh	r0, [r4, #12]
 800aeb2:	4305      	orrs	r5, r0
 800aeb4:	81a5      	strh	r5, [r4, #12]
 800aeb6:	e7cd      	b.n	800ae54 <__smakebuf_r+0x18>
 800aeb8:	0800ac49 	.word	0x0800ac49

0800aebc <__ascii_mbtowc>:
 800aebc:	b082      	sub	sp, #8
 800aebe:	b901      	cbnz	r1, 800aec2 <__ascii_mbtowc+0x6>
 800aec0:	a901      	add	r1, sp, #4
 800aec2:	b142      	cbz	r2, 800aed6 <__ascii_mbtowc+0x1a>
 800aec4:	b14b      	cbz	r3, 800aeda <__ascii_mbtowc+0x1e>
 800aec6:	7813      	ldrb	r3, [r2, #0]
 800aec8:	600b      	str	r3, [r1, #0]
 800aeca:	7812      	ldrb	r2, [r2, #0]
 800aecc:	1e10      	subs	r0, r2, #0
 800aece:	bf18      	it	ne
 800aed0:	2001      	movne	r0, #1
 800aed2:	b002      	add	sp, #8
 800aed4:	4770      	bx	lr
 800aed6:	4610      	mov	r0, r2
 800aed8:	e7fb      	b.n	800aed2 <__ascii_mbtowc+0x16>
 800aeda:	f06f 0001 	mvn.w	r0, #1
 800aede:	e7f8      	b.n	800aed2 <__ascii_mbtowc+0x16>

0800aee0 <memmove>:
 800aee0:	4288      	cmp	r0, r1
 800aee2:	b510      	push	{r4, lr}
 800aee4:	eb01 0402 	add.w	r4, r1, r2
 800aee8:	d902      	bls.n	800aef0 <memmove+0x10>
 800aeea:	4284      	cmp	r4, r0
 800aeec:	4623      	mov	r3, r4
 800aeee:	d807      	bhi.n	800af00 <memmove+0x20>
 800aef0:	1e43      	subs	r3, r0, #1
 800aef2:	42a1      	cmp	r1, r4
 800aef4:	d008      	beq.n	800af08 <memmove+0x28>
 800aef6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aefa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800aefe:	e7f8      	b.n	800aef2 <memmove+0x12>
 800af00:	4402      	add	r2, r0
 800af02:	4601      	mov	r1, r0
 800af04:	428a      	cmp	r2, r1
 800af06:	d100      	bne.n	800af0a <memmove+0x2a>
 800af08:	bd10      	pop	{r4, pc}
 800af0a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800af0e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800af12:	e7f7      	b.n	800af04 <memmove+0x24>

0800af14 <__malloc_lock>:
 800af14:	4801      	ldr	r0, [pc, #4]	; (800af1c <__malloc_lock+0x8>)
 800af16:	f7ff bf69 	b.w	800adec <__retarget_lock_acquire_recursive>
 800af1a:	bf00      	nop
 800af1c:	20000520 	.word	0x20000520

0800af20 <__malloc_unlock>:
 800af20:	4801      	ldr	r0, [pc, #4]	; (800af28 <__malloc_unlock+0x8>)
 800af22:	f7ff bf64 	b.w	800adee <__retarget_lock_release_recursive>
 800af26:	bf00      	nop
 800af28:	20000520 	.word	0x20000520

0800af2c <_realloc_r>:
 800af2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af30:	4680      	mov	r8, r0
 800af32:	4614      	mov	r4, r2
 800af34:	460e      	mov	r6, r1
 800af36:	b921      	cbnz	r1, 800af42 <_realloc_r+0x16>
 800af38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800af3c:	4611      	mov	r1, r2
 800af3e:	f7ff b99b 	b.w	800a278 <_malloc_r>
 800af42:	b92a      	cbnz	r2, 800af50 <_realloc_r+0x24>
 800af44:	f7ff f92c 	bl	800a1a0 <_free_r>
 800af48:	4625      	mov	r5, r4
 800af4a:	4628      	mov	r0, r5
 800af4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af50:	f000 f906 	bl	800b160 <_malloc_usable_size_r>
 800af54:	4284      	cmp	r4, r0
 800af56:	4607      	mov	r7, r0
 800af58:	d802      	bhi.n	800af60 <_realloc_r+0x34>
 800af5a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800af5e:	d812      	bhi.n	800af86 <_realloc_r+0x5a>
 800af60:	4621      	mov	r1, r4
 800af62:	4640      	mov	r0, r8
 800af64:	f7ff f988 	bl	800a278 <_malloc_r>
 800af68:	4605      	mov	r5, r0
 800af6a:	2800      	cmp	r0, #0
 800af6c:	d0ed      	beq.n	800af4a <_realloc_r+0x1e>
 800af6e:	42bc      	cmp	r4, r7
 800af70:	4622      	mov	r2, r4
 800af72:	4631      	mov	r1, r6
 800af74:	bf28      	it	cs
 800af76:	463a      	movcs	r2, r7
 800af78:	f7fe fd6a 	bl	8009a50 <memcpy>
 800af7c:	4631      	mov	r1, r6
 800af7e:	4640      	mov	r0, r8
 800af80:	f7ff f90e 	bl	800a1a0 <_free_r>
 800af84:	e7e1      	b.n	800af4a <_realloc_r+0x1e>
 800af86:	4635      	mov	r5, r6
 800af88:	e7df      	b.n	800af4a <_realloc_r+0x1e>

0800af8a <_raise_r>:
 800af8a:	291f      	cmp	r1, #31
 800af8c:	b538      	push	{r3, r4, r5, lr}
 800af8e:	4604      	mov	r4, r0
 800af90:	460d      	mov	r5, r1
 800af92:	d904      	bls.n	800af9e <_raise_r+0x14>
 800af94:	2316      	movs	r3, #22
 800af96:	6003      	str	r3, [r0, #0]
 800af98:	f04f 30ff 	mov.w	r0, #4294967295
 800af9c:	bd38      	pop	{r3, r4, r5, pc}
 800af9e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800afa0:	b112      	cbz	r2, 800afa8 <_raise_r+0x1e>
 800afa2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800afa6:	b94b      	cbnz	r3, 800afbc <_raise_r+0x32>
 800afa8:	4620      	mov	r0, r4
 800afaa:	f000 f831 	bl	800b010 <_getpid_r>
 800afae:	462a      	mov	r2, r5
 800afb0:	4601      	mov	r1, r0
 800afb2:	4620      	mov	r0, r4
 800afb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800afb8:	f000 b818 	b.w	800afec <_kill_r>
 800afbc:	2b01      	cmp	r3, #1
 800afbe:	d00a      	beq.n	800afd6 <_raise_r+0x4c>
 800afc0:	1c59      	adds	r1, r3, #1
 800afc2:	d103      	bne.n	800afcc <_raise_r+0x42>
 800afc4:	2316      	movs	r3, #22
 800afc6:	6003      	str	r3, [r0, #0]
 800afc8:	2001      	movs	r0, #1
 800afca:	e7e7      	b.n	800af9c <_raise_r+0x12>
 800afcc:	2400      	movs	r4, #0
 800afce:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800afd2:	4628      	mov	r0, r5
 800afd4:	4798      	blx	r3
 800afd6:	2000      	movs	r0, #0
 800afd8:	e7e0      	b.n	800af9c <_raise_r+0x12>
	...

0800afdc <raise>:
 800afdc:	4b02      	ldr	r3, [pc, #8]	; (800afe8 <raise+0xc>)
 800afde:	4601      	mov	r1, r0
 800afe0:	6818      	ldr	r0, [r3, #0]
 800afe2:	f7ff bfd2 	b.w	800af8a <_raise_r>
 800afe6:	bf00      	nop
 800afe8:	20000128 	.word	0x20000128

0800afec <_kill_r>:
 800afec:	b538      	push	{r3, r4, r5, lr}
 800afee:	4d07      	ldr	r5, [pc, #28]	; (800b00c <_kill_r+0x20>)
 800aff0:	2300      	movs	r3, #0
 800aff2:	4604      	mov	r4, r0
 800aff4:	4608      	mov	r0, r1
 800aff6:	4611      	mov	r1, r2
 800aff8:	602b      	str	r3, [r5, #0]
 800affa:	f7f6 fbd9 	bl	80017b0 <_kill>
 800affe:	1c43      	adds	r3, r0, #1
 800b000:	d102      	bne.n	800b008 <_kill_r+0x1c>
 800b002:	682b      	ldr	r3, [r5, #0]
 800b004:	b103      	cbz	r3, 800b008 <_kill_r+0x1c>
 800b006:	6023      	str	r3, [r4, #0]
 800b008:	bd38      	pop	{r3, r4, r5, pc}
 800b00a:	bf00      	nop
 800b00c:	20000524 	.word	0x20000524

0800b010 <_getpid_r>:
 800b010:	f7f6 bbc6 	b.w	80017a0 <_getpid>

0800b014 <__sread>:
 800b014:	b510      	push	{r4, lr}
 800b016:	460c      	mov	r4, r1
 800b018:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b01c:	f000 f8a8 	bl	800b170 <_read_r>
 800b020:	2800      	cmp	r0, #0
 800b022:	bfab      	itete	ge
 800b024:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b026:	89a3      	ldrhlt	r3, [r4, #12]
 800b028:	181b      	addge	r3, r3, r0
 800b02a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b02e:	bfac      	ite	ge
 800b030:	6563      	strge	r3, [r4, #84]	; 0x54
 800b032:	81a3      	strhlt	r3, [r4, #12]
 800b034:	bd10      	pop	{r4, pc}

0800b036 <__swrite>:
 800b036:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b03a:	461f      	mov	r7, r3
 800b03c:	898b      	ldrh	r3, [r1, #12]
 800b03e:	05db      	lsls	r3, r3, #23
 800b040:	4605      	mov	r5, r0
 800b042:	460c      	mov	r4, r1
 800b044:	4616      	mov	r6, r2
 800b046:	d505      	bpl.n	800b054 <__swrite+0x1e>
 800b048:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b04c:	2302      	movs	r3, #2
 800b04e:	2200      	movs	r2, #0
 800b050:	f000 f874 	bl	800b13c <_lseek_r>
 800b054:	89a3      	ldrh	r3, [r4, #12]
 800b056:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b05a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b05e:	81a3      	strh	r3, [r4, #12]
 800b060:	4632      	mov	r2, r6
 800b062:	463b      	mov	r3, r7
 800b064:	4628      	mov	r0, r5
 800b066:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b06a:	f000 b823 	b.w	800b0b4 <_write_r>

0800b06e <__sseek>:
 800b06e:	b510      	push	{r4, lr}
 800b070:	460c      	mov	r4, r1
 800b072:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b076:	f000 f861 	bl	800b13c <_lseek_r>
 800b07a:	1c43      	adds	r3, r0, #1
 800b07c:	89a3      	ldrh	r3, [r4, #12]
 800b07e:	bf15      	itete	ne
 800b080:	6560      	strne	r0, [r4, #84]	; 0x54
 800b082:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b086:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b08a:	81a3      	strheq	r3, [r4, #12]
 800b08c:	bf18      	it	ne
 800b08e:	81a3      	strhne	r3, [r4, #12]
 800b090:	bd10      	pop	{r4, pc}

0800b092 <__sclose>:
 800b092:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b096:	f000 b81f 	b.w	800b0d8 <_close_r>

0800b09a <__ascii_wctomb>:
 800b09a:	b149      	cbz	r1, 800b0b0 <__ascii_wctomb+0x16>
 800b09c:	2aff      	cmp	r2, #255	; 0xff
 800b09e:	bf85      	ittet	hi
 800b0a0:	238a      	movhi	r3, #138	; 0x8a
 800b0a2:	6003      	strhi	r3, [r0, #0]
 800b0a4:	700a      	strbls	r2, [r1, #0]
 800b0a6:	f04f 30ff 	movhi.w	r0, #4294967295
 800b0aa:	bf98      	it	ls
 800b0ac:	2001      	movls	r0, #1
 800b0ae:	4770      	bx	lr
 800b0b0:	4608      	mov	r0, r1
 800b0b2:	4770      	bx	lr

0800b0b4 <_write_r>:
 800b0b4:	b538      	push	{r3, r4, r5, lr}
 800b0b6:	4d07      	ldr	r5, [pc, #28]	; (800b0d4 <_write_r+0x20>)
 800b0b8:	4604      	mov	r4, r0
 800b0ba:	4608      	mov	r0, r1
 800b0bc:	4611      	mov	r1, r2
 800b0be:	2200      	movs	r2, #0
 800b0c0:	602a      	str	r2, [r5, #0]
 800b0c2:	461a      	mov	r2, r3
 800b0c4:	f7f6 fbab 	bl	800181e <_write>
 800b0c8:	1c43      	adds	r3, r0, #1
 800b0ca:	d102      	bne.n	800b0d2 <_write_r+0x1e>
 800b0cc:	682b      	ldr	r3, [r5, #0]
 800b0ce:	b103      	cbz	r3, 800b0d2 <_write_r+0x1e>
 800b0d0:	6023      	str	r3, [r4, #0]
 800b0d2:	bd38      	pop	{r3, r4, r5, pc}
 800b0d4:	20000524 	.word	0x20000524

0800b0d8 <_close_r>:
 800b0d8:	b538      	push	{r3, r4, r5, lr}
 800b0da:	4d06      	ldr	r5, [pc, #24]	; (800b0f4 <_close_r+0x1c>)
 800b0dc:	2300      	movs	r3, #0
 800b0de:	4604      	mov	r4, r0
 800b0e0:	4608      	mov	r0, r1
 800b0e2:	602b      	str	r3, [r5, #0]
 800b0e4:	f7f6 fbb7 	bl	8001856 <_close>
 800b0e8:	1c43      	adds	r3, r0, #1
 800b0ea:	d102      	bne.n	800b0f2 <_close_r+0x1a>
 800b0ec:	682b      	ldr	r3, [r5, #0]
 800b0ee:	b103      	cbz	r3, 800b0f2 <_close_r+0x1a>
 800b0f0:	6023      	str	r3, [r4, #0]
 800b0f2:	bd38      	pop	{r3, r4, r5, pc}
 800b0f4:	20000524 	.word	0x20000524

0800b0f8 <_fstat_r>:
 800b0f8:	b538      	push	{r3, r4, r5, lr}
 800b0fa:	4d07      	ldr	r5, [pc, #28]	; (800b118 <_fstat_r+0x20>)
 800b0fc:	2300      	movs	r3, #0
 800b0fe:	4604      	mov	r4, r0
 800b100:	4608      	mov	r0, r1
 800b102:	4611      	mov	r1, r2
 800b104:	602b      	str	r3, [r5, #0]
 800b106:	f7f6 fbb2 	bl	800186e <_fstat>
 800b10a:	1c43      	adds	r3, r0, #1
 800b10c:	d102      	bne.n	800b114 <_fstat_r+0x1c>
 800b10e:	682b      	ldr	r3, [r5, #0]
 800b110:	b103      	cbz	r3, 800b114 <_fstat_r+0x1c>
 800b112:	6023      	str	r3, [r4, #0]
 800b114:	bd38      	pop	{r3, r4, r5, pc}
 800b116:	bf00      	nop
 800b118:	20000524 	.word	0x20000524

0800b11c <_isatty_r>:
 800b11c:	b538      	push	{r3, r4, r5, lr}
 800b11e:	4d06      	ldr	r5, [pc, #24]	; (800b138 <_isatty_r+0x1c>)
 800b120:	2300      	movs	r3, #0
 800b122:	4604      	mov	r4, r0
 800b124:	4608      	mov	r0, r1
 800b126:	602b      	str	r3, [r5, #0]
 800b128:	f7f6 fbb1 	bl	800188e <_isatty>
 800b12c:	1c43      	adds	r3, r0, #1
 800b12e:	d102      	bne.n	800b136 <_isatty_r+0x1a>
 800b130:	682b      	ldr	r3, [r5, #0]
 800b132:	b103      	cbz	r3, 800b136 <_isatty_r+0x1a>
 800b134:	6023      	str	r3, [r4, #0]
 800b136:	bd38      	pop	{r3, r4, r5, pc}
 800b138:	20000524 	.word	0x20000524

0800b13c <_lseek_r>:
 800b13c:	b538      	push	{r3, r4, r5, lr}
 800b13e:	4d07      	ldr	r5, [pc, #28]	; (800b15c <_lseek_r+0x20>)
 800b140:	4604      	mov	r4, r0
 800b142:	4608      	mov	r0, r1
 800b144:	4611      	mov	r1, r2
 800b146:	2200      	movs	r2, #0
 800b148:	602a      	str	r2, [r5, #0]
 800b14a:	461a      	mov	r2, r3
 800b14c:	f7f6 fbaa 	bl	80018a4 <_lseek>
 800b150:	1c43      	adds	r3, r0, #1
 800b152:	d102      	bne.n	800b15a <_lseek_r+0x1e>
 800b154:	682b      	ldr	r3, [r5, #0]
 800b156:	b103      	cbz	r3, 800b15a <_lseek_r+0x1e>
 800b158:	6023      	str	r3, [r4, #0]
 800b15a:	bd38      	pop	{r3, r4, r5, pc}
 800b15c:	20000524 	.word	0x20000524

0800b160 <_malloc_usable_size_r>:
 800b160:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b164:	1f18      	subs	r0, r3, #4
 800b166:	2b00      	cmp	r3, #0
 800b168:	bfbc      	itt	lt
 800b16a:	580b      	ldrlt	r3, [r1, r0]
 800b16c:	18c0      	addlt	r0, r0, r3
 800b16e:	4770      	bx	lr

0800b170 <_read_r>:
 800b170:	b538      	push	{r3, r4, r5, lr}
 800b172:	4d07      	ldr	r5, [pc, #28]	; (800b190 <_read_r+0x20>)
 800b174:	4604      	mov	r4, r0
 800b176:	4608      	mov	r0, r1
 800b178:	4611      	mov	r1, r2
 800b17a:	2200      	movs	r2, #0
 800b17c:	602a      	str	r2, [r5, #0]
 800b17e:	461a      	mov	r2, r3
 800b180:	f7f6 fb30 	bl	80017e4 <_read>
 800b184:	1c43      	adds	r3, r0, #1
 800b186:	d102      	bne.n	800b18e <_read_r+0x1e>
 800b188:	682b      	ldr	r3, [r5, #0]
 800b18a:	b103      	cbz	r3, 800b18e <_read_r+0x1e>
 800b18c:	6023      	str	r3, [r4, #0]
 800b18e:	bd38      	pop	{r3, r4, r5, pc}
 800b190:	20000524 	.word	0x20000524

0800b194 <_init>:
 800b194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b196:	bf00      	nop
 800b198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b19a:	bc08      	pop	{r3}
 800b19c:	469e      	mov	lr, r3
 800b19e:	4770      	bx	lr

0800b1a0 <_fini>:
 800b1a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1a2:	bf00      	nop
 800b1a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1a6:	bc08      	pop	{r3}
 800b1a8:	469e      	mov	lr, r3
 800b1aa:	4770      	bx	lr
